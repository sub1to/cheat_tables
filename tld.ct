<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="38">
  <CheatEntries>
    <CheatEntry>
      <ID>8642</ID>
      <Description>"L"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>8644</ID>
          <Description>"Group"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>C08000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>8643</ID>
          <Description>"Script"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>8735</ID>
          <Description>"Game Memory Value"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>FF8080</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>8930</ID>
          <Description>"Game Memory Value (readonly)"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>808080</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>8645</ID>
          <Description>"Script Modifier/Config"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>800080</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>8646</ID>
          <Description>"WIP / Deprecated / Broken"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>4080FF</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>8534</ID>
      <Description>"To Infinity And Beyond!"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="1" RealAddress="00000000"/>
      <Color>C08000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>8710</ID>
          <Description>"Player"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="1" RealAddress="00000000"/>
          <Color>C08000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8709</ID>
              <Description>"Temperature"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.95 83861 S
  Date   : 2021-10-25
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(player_temp_hook)
label(player_temp_bytes)
label(player_temp_base_ptr)
label(player_temp_toggle)
label(player_temp_value)
registersymbol(player_temp_hook)
registersymbol(player_temp_bytes)
registersymbol(player_temp_base_ptr)
registersymbol(player_temp_toggle)
registersymbol(player_temp_value)
aobScanModule(hook,GameAssembly.dll,f3 41 0f 11 7d ? 48 8b 0d)

newmem:
player_temp_bytes:
  //movss [r13+20],xmm7
  readMem(hook, 6)
  jmp returnhere

player_temp_base_ptr:
  dq 0

player_temp_toggle:
  db 0

player_temp_value:
  dd 0

code:
  mov [player_temp_base_ptr], r13

  cmp byte ptr [player_temp_toggle], 0
  jz player_temp_bytes
  movss xmm7, [player_temp_value]
  jmp player_temp_bytes

hook:
player_temp_hook:
  jmp code
  nop
  returnhere:



[DISABLE]
player_temp_hook:
  //db F3 41 0F 11 7D 20
  readMem(player_temp_bytes, 6)

unregistersymbol(player_temp_hook)
unregistersymbol(player_temp_bytes)
unregistersymbol(player_temp_base_ptr)
unregistersymbol(player_temp_toggle)
unregistersymbol(player_temp_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+359F22

"GameAssembly.dll"+359EFB: 33 D2                 -  xor edx,edx
"GameAssembly.dll"+359EFD: 48 8B CB              -  mov rcx,rbx
"GameAssembly.dll"+359F00: E8 0B 20 ED 01        -  call GameAssembly.dll+222BF10
"GameAssembly.dll"+359F05: 84 C0                 -  test al,al
"GameAssembly.dll"+359F07: 74 0E                 -  je GameAssembly.dll+359F17
"GameAssembly.dll"+359F09: 48 85 DB              -  test rbx,rbx
"GameAssembly.dll"+359F0C: 0F 84 47 01 00 00     -  je GameAssembly.dll+35A059
"GameAssembly.dll"+359F12: F3 0F 10 7B 40        -  movss xmm7,[rbx+40]
"GameAssembly.dll"+359F17: F3 41 0F 59 F8        -  mulss xmm7,xmm8
"GameAssembly.dll"+359F1C: F3 41 0F 58 7D 20     -  addss xmm7,dword ptr [r13+20]
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+359F22: F3 41 0F 11 7D 20     -  movss [r13+20],xmm7
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+359F28: 48 8B 0D 01 94 93 03  -  mov rcx,[GameAssembly.dll+3C93330]
"GameAssembly.dll"+359F2F: F6 81 27 01 00 00 02  -  test byte ptr [rcx+00000127],02
"GameAssembly.dll"+359F36: 74 0E                 -  je GameAssembly.dll+359F46
"GameAssembly.dll"+359F38: 83 B9 D8 00 00 00 00  -  cmp dword ptr [rcx+000000D8],00
"GameAssembly.dll"+359F3F: 75 05                 -  jne GameAssembly.dll+359F46
"GameAssembly.dll"+359F41: E8 3A 80 F1 FF        -  call GameAssembly.dll+271F80
"GameAssembly.dll"+359F46: 33 C9                 -  xor ecx,ecx
"GameAssembly.dll"+359F48: E8 93 05 02 00        -  call GameAssembly.dll+37A4E0
"GameAssembly.dll"+359F4D: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+359F50: 0F 84 CD 00 00 00     -  je GameAssembly.dll+35A023
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8712</ID>
                  <Description>"Set Temperature"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
player_temp_toggle:
  db 01

[DISABLE]
player_temp_toggle:
  db 00
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8713</ID>
                      <Description>"Temperature Value"</Description>
                      <Color>800080</Color>
                      <VariableType>Float</VariableType>
                      <Address>player_temp_value</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8655</ID>
                  <Description>"Temperature"</Description>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_temp_base_ptr</Address>
                  <Offsets>
                    <Offset>20</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8719</ID>
                  <Description>"Temperature Max"</Description>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_temp_base_ptr</Address>
                  <Offsets>
                    <Offset>24</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8714</ID>
              <Description>"Fatigue"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState Activated="1"/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.95 83861 S
  Date   : 2021-10-25
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(player_fatigue_hook)
label(player_fatigue_bytes)
label(player_fatigue_base_ptr)
label(player_fatigue_toggle)
label(player_fatigue_value)
registersymbol(player_fatigue_hook)
registersymbol(player_fatigue_bytes)
registersymbol(player_fatigue_base_ptr)
registersymbol(player_fatigue_toggle)
registersymbol(player_fatigue_value)
aobScanModule(hook,GameAssembly.dll,f3 0f 10 bf ? ? ? ? f3 44 0f 10 87 ? ? ? ? f6 81)

newmem:
player_fatigue_bytes:
  //movss [r13+20],xmm7
  readMem(hook, 8)
  jmp returnhere

player_fatigue_base_ptr:
  dq 0

player_fatigue_toggle:
  db 0

player_fatigue_value:
  dd 0

code:
  mov [player_fatigue_base_ptr], rdi

  cmp byte ptr [player_fatigue_toggle], 0
  jz player_fatigue_bytes
  push rax
  mov eax, [player_fatigue_value]
  mov [rdi+00000088], eax
  pop rax
  jmp player_fatigue_bytes

hook:
player_fatigue_hook:
  jmp code
  nop
  nop
  nop
  returnhere:



[DISABLE]
player_fatigue_hook:
  //db F3 0F 10 BF 88 00 00 00
  readMem(player_fatigue_bytes, 8)

unregistersymbol(player_fatigue_hook)
unregistersymbol(player_fatigue_bytes)
unregistersymbol(player_fatigue_base_ptr)
unregistersymbol(player_fatigue_toggle)
unregistersymbol(player_fatigue_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+118568B

"GameAssembly.dll"+1185667: 48 8B 0D 4A 23 35 03        -  mov rcx,[GameAssembly.dll+44D79B8]
"GameAssembly.dll"+118566E: 0F 2F FE                    -  comiss xmm7,xmm6
"GameAssembly.dll"+1185671: 77 0C                       -  ja GameAssembly.dll+118567F
"GameAssembly.dll"+1185673: 41 0F 2F F0                 -  comiss xmm6,xmm8
"GameAssembly.dll"+1185677: 76 12                       -  jna GameAssembly.dll+118568B
"GameAssembly.dll"+1185679: 41 0F 28 F0                 -  movaps xmm6,xmm8
"GameAssembly.dll"+118567D: EB 0C                       -  jmp GameAssembly.dll+118568B
"GameAssembly.dll"+118567F: 0F 57 F6                    -  xorps xmm6,xmm6
"GameAssembly.dll"+1185682: EB 07                       -  jmp GameAssembly.dll+118568B
"GameAssembly.dll"+1185684: 48 8B 0D 2D 23 35 03        -  mov rcx,[GameAssembly.dll+44D79B8]
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+118568B: F3 0F 10 BF 88 00 00 00     -  movss xmm7,[rdi+00000088]
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+1185693: F3 44 0F 10 87 8C 00 00 00  -  movss xmm8,[rdi+0000008C]
"GameAssembly.dll"+118569C: F6 81 2F 01 00 00 02        -  test byte ptr [rcx+0000012F],02
"GameAssembly.dll"+11856A3: 74 0E                       -  je GameAssembly.dll+11856B3
"GameAssembly.dll"+11856A5: 83 B9 E0 00 00 00 00        -  cmp dword ptr [rcx+000000E0],00
"GameAssembly.dll"+11856AC: 75 05                       -  jne GameAssembly.dll+11856B3
"GameAssembly.dll"+11856AE: E8 1D 60 F0 FE              -  call GameAssembly.dll+8B6D0
"GameAssembly.dll"+11856B3: 0F 2F F7                    -  comiss xmm6,xmm7
"GameAssembly.dll"+11856B6: 77 0C                       -  ja GameAssembly.dll+11856C4
"GameAssembly.dll"+11856B8: 41 0F 2F F8                 -  comiss xmm7,xmm8
"GameAssembly.dll"+11856BC: 76 09                       -  jna GameAssembly.dll+11856C7
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8715</ID>
                  <Description>"Set Fatigue"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
player_fatigue_toggle:
  db 01

[DISABLE]
player_fatigue_toggle:
  db 00
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8716</ID>
                      <Description>"Fatigue Value"</Description>
                      <LastState Value="0" RealAddress="7FFF358A0016"/>
                      <Color>800080</Color>
                      <VariableType>Float</VariableType>
                      <Address>player_fatigue_value</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8717</ID>
                  <Description>"Fatigue"</Description>
                  <LastState Value="4.108300686" RealAddress="2311D3C2F68"/>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_fatigue_base_ptr</Address>
                  <Offsets>
                    <Offset>88</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8718</ID>
                  <Description>"Fatigue Max"</Description>
                  <LastState Value="100" RealAddress="2311D3C2F6C"/>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_fatigue_base_ptr</Address>
                  <Offsets>
                    <Offset>8C</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8720</ID>
              <Description>"Thirst"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState Activated="1"/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.95 83861 S
  Date   : 2021-10-25
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(player_thirst_hook)
label(player_thirst_bytes)
label(player_thirst_base_ptr)
label(player_thirst_toggle)
label(player_thirst_value)
registersymbol(player_thirst_hook)
registersymbol(player_thirst_bytes)
registersymbol(player_thirst_base_ptr)
registersymbol(player_thirst_toggle)
registersymbol(player_thirst_value)
aobScanModule(hook,GameAssembly.dll,f3 0f 11 73 ? f3 44 0f 10 43 ? 48 8b 0d ? ? ? ? f6 81 ? ? ? ? ? 74 ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? 0f 2f fe 77 ? 41 0f 2f f0 76 ? 41 0f 28 f0 eb ? 0f 57 f6 f3 0f 11 73 ? 33 d2)

newmem:
player_thirst_bytes:
  //movss [rbx+1C],xmm6
  readMem(hook, 5)
  jmp returnhere

player_thirst_base_ptr:
  dq 0

player_thirst_toggle:
  db 0

player_thirst_value:
  dd 0

code:
  mov [player_thirst_base_ptr], rbx

  cmp byte ptr [player_thirst_toggle], 0
  jz player_thirst_bytes
  movss xmm6, [player_thirst_value]
  jmp player_thirst_bytes

hook:
player_thirst_hook:
  jmp code
  returnhere:



[DISABLE]
player_thirst_hook:
  //db F3 0F 11 73 1C
  readMem(player_thirst_bytes, 5)

unregistersymbol(player_thirst_hook)
unregistersymbol(player_thirst_bytes)
unregistersymbol(player_thirst_base_ptr)
unregistersymbol(player_thirst_toggle)
unregistersymbol(player_thirst_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+917A98

"GameAssembly.dll"+917A70: F3 0F 59 F7              -  mulss xmm6,xmm7
"GameAssembly.dll"+917A74: 33 C9                    -  xor ecx,ecx
"GameAssembly.dll"+917A76: E8 A5 3F A6 FF           -  call GameAssembly.dll+37BA20
"GameAssembly.dll"+917A7B: 48 85 C0                 -  test rax,rax
"GameAssembly.dll"+917A7E: 0F 84 AB 00 00 00        -  je GameAssembly.dll+917B2F
"GameAssembly.dll"+917A84: 0F 57 FF                 -  xorps xmm7,xmm7
"GameAssembly.dll"+917A87: 80 B8 A3 01 00 00 00     -  cmp byte ptr [rax+000001A3],00
"GameAssembly.dll"+917A8E: 74 03                    -  je GameAssembly.dll+917A93
"GameAssembly.dll"+917A90: 0F 57 F6                 -  xorps xmm6,xmm6
"GameAssembly.dll"+917A93: F3 0F 58 73 1C           -  addss xmm6,dword ptr [rbx+1C]
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+917A98: F3 0F 11 73 1C           -  movss [rbx+1C],xmm6
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+917A9D: F3 44 0F 10 43 20        -  movss xmm8,[rbx+20]
"GameAssembly.dll"+917AA3: 48 8B 0D 5E DF 33 03     -  mov rcx,[GameAssembly.dll+3C55A08]
"GameAssembly.dll"+917AAA: F6 81 27 01 00 00 02     -  test byte ptr [rcx+00000127],02
"GameAssembly.dll"+917AB1: 74 0E                    -  je GameAssembly.dll+917AC1
"GameAssembly.dll"+917AB3: 83 B9 D8 00 00 00 00     -  cmp dword ptr [rcx+000000D8],00
"GameAssembly.dll"+917ABA: 75 05                    -  jne GameAssembly.dll+917AC1
"GameAssembly.dll"+917ABC: E8 BF A4 95 FF           -  call GameAssembly.dll+271F80
"GameAssembly.dll"+917AC1: 0F 2F FE                 -  comiss xmm7,xmm6
"GameAssembly.dll"+917AC4: 77 0C                    -  ja GameAssembly.dll+917AD2
"GameAssembly.dll"+917AC6: 41 0F 2F F0              -  comiss xmm6,xmm8
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8721</ID>
                  <Description>"Set Thirst"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
player_thirst_toggle:
  db 01

[DISABLE]
player_thirst_toggle:
  db 00
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8722</ID>
                      <Description>"Thirst Value"</Description>
                      <LastState Value="0" RealAddress="7FFF35890013"/>
                      <Color>800080</Color>
                      <VariableType>Float</VariableType>
                      <Address>player_thirst_value</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8723</ID>
                  <Description>"Thirst"</Description>
                  <LastState Value="8.976885796" RealAddress="232C98C683C"/>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_thirst_base_ptr</Address>
                  <Offsets>
                    <Offset>1C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8724</ID>
                  <Description>"Thirst Max"</Description>
                  <LastState Value="100" RealAddress="232C98C6840"/>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_thirst_base_ptr</Address>
                  <Offsets>
                    <Offset>20</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8725</ID>
              <Description>"Hunger"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState Activated="1"/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.95 83861 S
  Date   : 2021-10-25
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(player_hunger_hook)
label(player_hunger_bytes)
label(player_hunger_base_ptr)
label(player_hunger_toggle)
label(player_hunger_value)
registersymbol(player_hunger_hook)
registersymbol(player_hunger_bytes)
registersymbol(player_hunger_base_ptr)
registersymbol(player_hunger_toggle)
registersymbol(player_hunger_value)
aobScanModule(hook,GameAssembly.dll,f3 41 0f 5c f0 f3 0f 11 73 ? f3 44 0f 10 4b)

newmem:
player_hunger_bytes:
  //subss xmm6,xmm8
  readMem(hook, 5)
  jmp returnhere

player_hunger_base_ptr:
  dq 0

player_hunger_toggle:
  db 0

player_hunger_value:
  dd (float)2500

code:
  mov [player_hunger_base_ptr], rbx

  cmp byte ptr [player_hunger_toggle], 0
  jz player_hunger_bytes
  movss xmm6, [player_hunger_value]
  jmp returnhere

hook:
player_hunger_hook:
  jmp code
  returnhere:



[DISABLE]
player_hunger_hook:
  //db F3 41 0F 5C F0
  readMem(player_hunger_bytes, 5)

unregistersymbol(player_hunger_hook)
unregistersymbol(player_hunger_bytes)
unregistersymbol(player_hunger_base_ptr)
unregistersymbol(player_hunger_toggle)
unregistersymbol(player_hunger_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+81439E

"GameAssembly.dll"+814372: 75 05                 -  jne GameAssembly.dll+814379
"GameAssembly.dll"+814374: E8 07 DC A5 FF        -  call GameAssembly.dll+271F80
"GameAssembly.dll"+814379: 33 C9                 -  xor ecx,ecx
"GameAssembly.dll"+81437B: E8 A0 76 B6 FF        -  call GameAssembly.dll+37BA20
"GameAssembly.dll"+814380: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+814383: 0F 84 32 01 00 00     -  je GameAssembly.dll+8144BB
"GameAssembly.dll"+814389: 80 B8 A3 01 00 00 00  -  cmp byte ptr [rax+000001A3],00
"GameAssembly.dll"+814390: 0F 85 F5 00 00 00     -  jne GameAssembly.dll+81448B
"GameAssembly.dll"+814396: F3 0F 10 7B 18        -  movss xmm7,[rbx+18]
"GameAssembly.dll"+81439B: 0F 28 F7              -  movaps xmm6,xmm7
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+81439E: F3 41 0F 5C F0        -  subss xmm6,xmm8
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+8143A3: F3 0F 11 73 18        -  movss [rbx+18],xmm6
"GameAssembly.dll"+8143A8: F3 44 0F 10 4B 7C     -  movss xmm9,[rbx+7C]
"GameAssembly.dll"+8143AE: F3 44 0F 10 53 78     -  movss xmm10,[rbx+78]
"GameAssembly.dll"+8143B4: 48 8B 0D 4D 16 44 03  -  mov rcx,[GameAssembly.dll+3C55A08]
"GameAssembly.dll"+8143BB: F6 81 27 01 00 00 02  -  test byte ptr [rcx+00000127],02
"GameAssembly.dll"+8143C2: 74 0E                 -  je GameAssembly.dll+8143D2
"GameAssembly.dll"+8143C4: 83 B9 D8 00 00 00 00  -  cmp dword ptr [rcx+000000D8],00
"GameAssembly.dll"+8143CB: 75 05                 -  jne GameAssembly.dll+8143D2
"GameAssembly.dll"+8143CD: E8 AE DB A5 FF        -  call GameAssembly.dll+271F80
"GameAssembly.dll"+8143D2: 44 0F 2F CE           -  comiss xmm9,xmm6
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8726</ID>
                  <Description>"Set Hunger"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
player_hunger_toggle:
  db 01

[DISABLE]
player_hunger_toggle:
  db 00
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8727</ID>
                      <Description>"Hunger Value"</Description>
                      <LastState Value="2500" RealAddress="7FFF35880013"/>
                      <Color>800080</Color>
                      <VariableType>Float</VariableType>
                      <Address>player_hunger_value</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8728</ID>
                  <Description>"Hunger"</Description>
                  <LastState Value="2420.37915" RealAddress="2328B1F3118"/>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_hunger_base_ptr</Address>
                  <Offsets>
                    <Offset>18</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8729</ID>
                  <Description>"Hunger Max"</Description>
                  <LastState Value="2500" RealAddress="2328B1F3178"/>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_hunger_base_ptr</Address>
                  <Offsets>
                    <Offset>78</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8730</ID>
              <Description>"Sprint"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState Activated="1"/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.95 83861 S
  Date   : 2021-10-25
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(player_sprint_hook)
label(player_sprint_bytes)
label(player_sprint_base_ptr)
label(player_sprint_toggle)
label(player_sprint_value)
registersymbol(player_sprint_hook)
registersymbol(player_sprint_bytes)
registersymbol(player_sprint_base_ptr)
registersymbol(player_sprint_toggle)
registersymbol(player_sprint_value)
aobScanModule(hook,GameAssembly.dll,f3 0f 10 73 7c f3 0f 10 7b 78)

newmem:
player_sprint_bytes:
  //movss xmm6,[rbx+7C]
  readMem(hook, 5)
  jmp returnhere

player_sprint_base_ptr:
  dq 0

player_sprint_toggle:
  db 0

player_sprint_value:
  dd (float)100

code:
  mov [player_sprint_base_ptr], rbx

  cmp byte ptr [player_sprint_toggle], 0
  jz player_sprint_bytes
  movss xmm6, [player_sprint_value]
  movss [rbx+7C], xmm6
  jmp returnhere

hook:
player_sprint_hook:
  jmp code
  returnhere:



[DISABLE]
player_sprint_hook:
  //db F3 0F 10 73 7C
  readMem(player_sprint_bytes, 5)

unregistersymbol(player_sprint_hook)
unregistersymbol(player_sprint_bytes)
unregistersymbol(player_sprint_base_ptr)
unregistersymbol(player_sprint_toggle)
unregistersymbol(player_sprint_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+FD84FD

"GameAssembly.dll"+FD84D2: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+FD84D5: 75 1C                 -  jne GameAssembly.dll+FD84F3
"GameAssembly.dll"+FD84D7: 48 8D 0D CA 83 99 02  -  lea rcx,[GameAssembly.dll+39708A8]
"GameAssembly.dll"+FD84DE: E8 ED 4F 0A FF        -  call GameAssembly.dll+7D4D0
"GameAssembly.dll"+FD84E3: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+FD84E6: 0F 84 25 05 00 00     -  je GameAssembly.dll+FD8A11
"GameAssembly.dll"+FD84EC: 48 89 05 75 DC 48 03  -  mov [GameAssembly.dll+4466168],rax
"GameAssembly.dll"+FD84F3: FF D0                 -  call rax
"GameAssembly.dll"+FD84F5: F3 0F 59 C7           -  mulss xmm0,xmm7
"GameAssembly.dll"+FD84F9: F3 0F 5C F0           -  subss xmm6,xmm0
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+FD84FD: F3 0F 11 73 7C        -  movss [rbx+7C],xmm6
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+FD8502: 33 D2                 -  xor edx,edx
"GameAssembly.dll"+FD8504: 48 8B CB              -  mov rcx,rbx
"GameAssembly.dll"+FD8507: E8 14 0B 00 00        -  call GameAssembly.dll+FD9020
"GameAssembly.dll"+FD850C: 0F 28 F8              -  movaps xmm7,xmm0
"GameAssembly.dll"+FD850F: 48 8B 0D A2 F4 4F 03  -  mov rcx,[GameAssembly.dll+44D79B8]
"GameAssembly.dll"+FD8516: F6 81 2F 01 00 00 02  -  test byte ptr [rcx+0000012F],02
"GameAssembly.dll"+FD851D: 74 0E                 -  je GameAssembly.dll+FD852D
"GameAssembly.dll"+FD851F: 83 B9 E0 00 00 00 00  -  cmp dword ptr [rcx+000000E0],00
"GameAssembly.dll"+FD8526: 75 05                 -  jne GameAssembly.dll+FD852D
"GameAssembly.dll"+FD8528: E8 A3 31 0B FF        -  call GameAssembly.dll+8B6D0
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8731</ID>
                  <Description>"Set Sprint"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
player_sprint_toggle:
  db 01

[DISABLE]
player_sprint_toggle:
  db 00
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8732</ID>
                      <Description>"Sprint Value"</Description>
                      <LastState Value="100" RealAddress="7FFF35870013"/>
                      <Color>800080</Color>
                      <VariableType>Float</VariableType>
                      <Address>player_sprint_value</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8733</ID>
                  <Description>"Sprint"</Description>
                  <LastState Value="63" RealAddress="232C8F0E1DC"/>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_sprint_base_ptr</Address>
                  <Offsets>
                    <Offset>7C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8734</ID>
                  <Description>"Sprint Max"</Description>
                  <LastState Value="100" RealAddress="232C8F0E1D8"/>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_sprint_base_ptr</Address>
                  <Offsets>
                    <Offset>78</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8738</ID>
              <Description>"Health"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.95 83861 S
  Date   : 2021-10-25
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(player_health_hook)
label(player_health_bytes)
label(player_health_base_ptr)
label(player_health_toggle)
label(player_health_value)
registersymbol(player_health_hook)
registersymbol(player_health_bytes)
registersymbol(player_health_base_ptr)
registersymbol(player_health_toggle)
registersymbol(player_health_value)
aobScanModule(hook,GameAssembly.dll,f3 0f 10 48 ? f3 0f 5e 48 ? f3 0f 10 83)

newmem:
player_health_bytes:
  //movss xmm1,[rax+18]
  readMem(hook, 5)
  jmp returnhere

player_health_base_ptr:
  dq 0

player_health_toggle:
  db 0

player_health_value:
  dd (float)105 //+5 for well fed

code:
  mov [player_health_base_ptr], rax

  cmp byte ptr [player_health_toggle], 0
  jz player_health_bytes
  movss xmm1, [player_health_value]
  movss [rax+18], xmm1
  jmp returnhere

hook:
player_health_hook:
  jmp code
  returnhere:



[DISABLE]
player_health_hook:
  //db F3 0F 10 48 18
  readMem(player_health_bytes, 5)

unregistersymbol(player_health_hook)
unregistersymbol(player_health_bytes)
unregistersymbol(player_health_base_ptr)
unregistersymbol(player_health_toggle)
unregistersymbol(player_health_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+F026D0

"GameAssembly.dll"+F0269F: E8 7C 6C ED FF                 -  call GameAssembly.dll+DD9320
"GameAssembly.dll"+F026A4: 48 8B 0D D5 79 58 03           -  mov rcx,[GameAssembly.dll+448A080]
"GameAssembly.dll"+F026AB: F6 81 2F 01 00 00 02           -  test byte ptr [rcx+0000012F],02
"GameAssembly.dll"+F026B2: 74 0E                          -  je GameAssembly.dll+F026C2
"GameAssembly.dll"+F026B4: 83 B9 E0 00 00 00 00           -  cmp dword ptr [rcx+000000E0],00
"GameAssembly.dll"+F026BB: 75 05                          -  jne GameAssembly.dll+F026C2
"GameAssembly.dll"+F026BD: E8 0E 90 18 FF                 -  call GameAssembly.dll+8B6D0
"GameAssembly.dll"+F026C2: E8 89 19 F1 FF                 -  call GameAssembly.dll+E14050
"GameAssembly.dll"+F026C7: 48 85 C0                       -  test rax,rax
"GameAssembly.dll"+F026CA: 0F 84 6F 12 00 00              -  je GameAssembly.dll+F0393F
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+F026D0: F3 0F 10 48 18                 -  movss xmm1,[rax+18]
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+F026D5: F3 0F 5E 48 1C                 -  divss xmm1,[rax+1C]
"GameAssembly.dll"+F026DA: F3 0F 10 83 8C 01 00 00        -  movss xmm0,[rbx+0000018C]
"GameAssembly.dll"+F026E2: 0F 2F C1                       -  comiss xmm0,xmm1
"GameAssembly.dll"+F026E5: 0F 93 C2                       -  setae dl
"GameAssembly.dll"+F026E8: 45 33 C0                       -  xor r8d,r8d
"GameAssembly.dll"+F026EB: 48 8B CB                       -  mov rcx,rbx
"GameAssembly.dll"+F026EE: E8 7D E0 00 00                 -  call GameAssembly.dll+F10770
"GameAssembly.dll"+F026F3: 48 8B B3 98 01 00 00           -  mov rsi,[rbx+00000198]
"GameAssembly.dll"+F026FA: 33 D2                          -  xor edx,edx
"GameAssembly.dll"+F026FC: 48 8B CB                       -  mov rcx,rbx
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8739</ID>
                  <Description>"Set Health"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
player_health_toggle:
  db 01

[DISABLE]
player_health_toggle:
  db 00
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8740</ID>
                      <Description>"Health Value"</Description>
                      <Color>800080</Color>
                      <VariableType>Float</VariableType>
                      <Address>player_health_value</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8741</ID>
                  <Description>"Health"</Description>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_health_base_ptr</Address>
                  <Offsets>
                    <Offset>18</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8742</ID>
                  <Description>"Health Max"</Description>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_health_base_ptr</Address>
                  <Offsets>
                    <Offset>1C</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8603</ID>
              <Description>"Backpack (Weight / Scent)"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState Activated="1"/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.95 83861 S
  Date   : 2021-10-18
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(code_weight)
label(code_scent)
label(backpack_hook)
label(backpack_bytes)
label(backpack_base_ptr)
label(backpack_weight_toggle)
label(backpack_scent_toggle)
label(backpack_weight_value)
label(backpack_scent_value)
registersymbol(backpack_hook)
registersymbol(backpack_bytes)
registersymbol(backpack_base_ptr)
registersymbol(backpack_weight_toggle)
registersymbol(backpack_scent_toggle)
registersymbol(backpack_weight_value)
registersymbol(backpack_scent_value)
aobScanModule(hook,GameAssembly.dll,f3 44 0f 11 45 ? f3 44 0f 11 4d ? 41 8b d6)

newmem:
backpack_bytes:
  //movss [rbp+60],xmm8
  //db F3 44 0F 11 45 60
  readMem(hook, 6)
  jmp returnhere

backpack_base_ptr:
  dq 0

backpack_weight_toggle:
  db 0

backpack_scent_toggle:
  db 0

backpack_weight_value:
  dd (float)15

backpack_scent_value:
  dd (float)0

code:
  mov [backpack_base_ptr], rbp

code_weight:
  cmp byte ptr [backpack_weight_toggle], 0
  jz code_scent

  movss xmm8, [backpack_weight_value]

code_scent:
  cmp byte ptr [backpack_scent_toggle], 0
  jz backpack_bytes

  movss xmm9, [backpack_scent_value]
  jmp backpack_bytes

hook:
backpack_hook:
  jmp code
  nop
  returnhere:



[DISABLE]
backpack_hook:
  //movss [rbp+60],xmm8
  //db F3 44 0F 11 45 60
  readMem(backpack_bytes, 6)

unregistersymbol(backpack_hook)
unregistersymbol(backpack_bytes)
unregistersymbol(backpack_base_ptr)
unregistersymbol(backpack_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+13619B1

"GameAssembly.dll"+1361990: F3 0F 11 4D 58           -  movss [rbp+58],xmm1
"GameAssembly.dll"+1361995: F3 0F 10 4D 5C           -  movss xmm1,[rbp+5C]
"GameAssembly.dll"+136199A: 0F 2F F9                 -  comiss xmm7,xmm1
"GameAssembly.dll"+136199D: 77 0A                    -  ja GameAssembly.dll+13619A9
"GameAssembly.dll"+136199F: 0F 2F C8                 -  comiss xmm1,xmm0
"GameAssembly.dll"+13619A2: 76 08                    -  jna GameAssembly.dll+13619AC
"GameAssembly.dll"+13619A4: 0F 28 C8                 -  movaps xmm1,xmm0
"GameAssembly.dll"+13619A7: EB 03                    -  jmp GameAssembly.dll+13619AC
"GameAssembly.dll"+13619A9: 0F 28 CF                 -  movaps xmm1,xmm7
"GameAssembly.dll"+13619AC: F3 0F 11 4D 5C           -  movss [rbp+5C],xmm1
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+13619B1: F3 44 0F 11 45 60        -  movss [rbp+60],xmm8
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+13619B7: F3 44 0F 11 4D 7C        -  movss [rbp+7C],xmm9
"GameAssembly.dll"+13619BD: 41 8B D6                 -  mov edx,r14d
"GameAssembly.dll"+13619C0: 48 8B 4D 28              -  mov rcx,[rbp+28]
"GameAssembly.dll"+13619C4: 48 85 C9                 -  test rcx,rcx
"GameAssembly.dll"+13619C7: 0F 84 C6 00 00 00        -  je GameAssembly.dll+1361A93
"GameAssembly.dll"+13619CD: 48 8B C1                 -  mov rax,rcx
"GameAssembly.dll"+13619D0: BF 20 00 00 00           -  mov edi,00000020
"GameAssembly.dll"+13619D5: 3B 51 18                 -  cmp edx,[rcx+18]
"GameAssembly.dll"+13619D8: 7D 77                    -  jnl GameAssembly.dll+1361A51
"GameAssembly.dll"+13619DA: 48 85 C0                 -  test rax,rax
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8648</ID>
                  <Description>"Set Weight"</Description>
                  <LastState Activated="1"/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
backpack_weight_toggle:
  db 01

[DISABLE]
backpack_weight_toggle:
  db 00
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8649</ID>
                      <Description>"Weight Value"</Description>
                      <LastState Value="15" RealAddress="7FFF35860015"/>
                      <Color>800080</Color>
                      <VariableType>Float</VariableType>
                      <Address>backpack_weight_value</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8638</ID>
                  <Description>"Set Scent"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
backpack_scent_toggle:
  db 01

[DISABLE]
backpack_scent_toggle:
  db 00
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8639</ID>
                      <Description>"Scent Value"</Description>
                      <LastState Value="0" RealAddress="7FFF35860019"/>
                      <Color>800080</Color>
                      <VariableType>Float</VariableType>
                      <Address>backpack_scent_value</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8640</ID>
                  <Description>"Weight"</Description>
                  <LastState Value="15" RealAddress="23251A3B330"/>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>backpack_base_ptr</Address>
                  <Offsets>
                    <Offset>60</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8641</ID>
                  <Description>"Scent"</Description>
                  <LastState Value="0" RealAddress="23251A3B34C"/>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>backpack_base_ptr</Address>
                  <Offsets>
                    <Offset>7C</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8863</ID>
              <Description>"Afflictions"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>C08000</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>8861</ID>
                  <Description>"Remove Sprained Ankle"</Description>
                  <LastState/>
                  <Color>008000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-10-30
  Author : sub1to
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(sprained_ankle_update_hook)
label(sprained_ankle_update_bytes)
registersymbol(sprained_ankle_update_hook)
registersymbol(sprained_ankle_update_bytes)

//  class: SprainedAnkle
//  RVA: 0xFE60B0 Offset: 0xFE50B0 VA: 0x7FFB0C9B60B0
//  public void Update() { }
aobScanModule(hook,GameAssembly.dll,4c 8b dc 56 57 41 56 48 83 ec ? 49 c7 43 ? ? ? ? ? 49 89 5b ? 49 89 6b ? 0f 29 74 24 ? 48 8b e9 45 33 f6)

//  class: SprainedAnkle
//  RVA: 0xFE7B80 Offset: 0xFE6B80 VA: 0x7FFB0C9B7B80
//  public void SprainedAnkleEnd(int index) { }
aobScanModule(sprained_ankle_end,GameAssembly.dll,4c 8b dc 57 48 83 ec ? 49 c7 43 ? ? ? ? ? 49 89 5b ? 49 89 6b ? 49 89 73 ? 8b da 48 8b f1 33 ed 40 38 2d ? ? ? ? 75 ? 48 8b 05 ? ? ? ? 4c 63 80 ? ? ? ? 48 8b 05 ? ? ? ? 41 8b 8c 00 ? ? ? ? 41 8b 94 00 ? ? ? ? 49 89 6b ? 49 89 6b ? 49 89 6b ? 4d 8d 43 ? e8 ? ? ? ? 90 33 c9 ff 15 ? ? ? ? 90 c6 05 ? ? ? ? ? 85 db 0f 88 ? ? ? ? 48 8b 8e)

newmem:
sprained_ankle_update_bytes:
  //push rdi
  //sub rsp,40
  readMem(hook, 5)
  jmp returnhere

code:
  lea rsp, [rsp-38]
  mov [rsp+30], rcx
  xor rdx, rdx
  call sprained_ankle_end
  mov rcx, [rsp+30]
  lea rsp, [rsp+38]
  jmp sprained_ankle_update_bytes

hook:
sprained_ankle_update_hook:
  jmp code
  returnhere:



[DISABLE]
sprained_ankle_update_hook:
  //57 48 83 EC 40
  readMem(sprained_ankle_update_bytes, 5)

unregistersymbol(sprained_ankle_update_hook)
unregistersymbol(sprained_ankle_update_bytes)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+FE60B0

"GameAssembly.dll"+FE60A6: CC                          -  int 3
"GameAssembly.dll"+FE60A7: CC                          -  int 3
"GameAssembly.dll"+FE60A8: CC                          -  int 3
"GameAssembly.dll"+FE60A9: CC                          -  int 3
"GameAssembly.dll"+FE60AA: CC                          -  int 3
"GameAssembly.dll"+FE60AB: CC                          -  int 3
"GameAssembly.dll"+FE60AC: CC                          -  int 3
"GameAssembly.dll"+FE60AD: CC                          -  int 3
"GameAssembly.dll"+FE60AE: CC                          -  int 3
"GameAssembly.dll"+FE60AF: CC                          -  int 3
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+FE60B0: 57                          -  push rdi
"GameAssembly.dll"+FE60B1: 48 83 EC 40                 -  sub rsp,40
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+FE60B5: 90                          -  nop
"GameAssembly.dll"+FE60B6: 48 C7 44 24 20 FE FF FF FF  -  mov qword ptr [rsp+20],FFFFFFFE
"GameAssembly.dll"+FE60BF: 48 89 5C 24 50              -  mov [rsp+50],rbx
"GameAssembly.dll"+FE60C4: 48 8B F9                    -  mov rdi,rcx
"GameAssembly.dll"+FE60C7: 33 DB                       -  xor ebx,ebx
"GameAssembly.dll"+FE60C9: 38 1D 09 74 46 03           -  cmp [GameAssembly.dll+444D4D8],bl
"GameAssembly.dll"+FE60CF: 75 4D                       -  jne GameAssembly.dll+FE611E
"GameAssembly.dll"+FE60D1: 48 8B 05 68 FC 45 03        -  mov rax,[GameAssembly.dll+4445D40]
"GameAssembly.dll"+FE60D8: 48 63 90 B8 00 00 00        -  movsxd  rdx,dword ptr [rax+000000B8]
"GameAssembly.dll"+FE60DF: 48 8B 05 32 FC 45 03        -  mov rax,[GameAssembly.dll+4445D18]
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8873</ID>
                  <Description>"Remove Hypothermia (Risk)"</Description>
                  <LastState/>
                  <Color>008000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-10-30
  Author : sub1to

	// Fields
	public LocalizedString m_LocalizedDisplayName; // 0x18
	public LocalizedString m_LocalizedDescription; // 0x20
	public float m_HoursSpentFreezingRequired; // 0x28
	public float m_HPDrainPerHour; // 0x2C
	public float m_FatigueIncreasePerHour; // 0x30
	public float m_NumHoursWarmForCure; // 0x34
	[TooltipAttribute] // RVA: 0x185D90 Offset: 0x185190 VA: 0x7FFB0BB55D90
	public float m_HypothermiaRatePercentIncreasePerInnerWetItem; // 0x38
	[HeaderAttribute] // RVA: 0x1764B0 Offset: 0x1758B0 VA: 0x7FFB0BB464B0
	public string m_HypothermiaVO; // 0x40
	private bool m_Active; // 0x48
	private float m_ElapsedHours; // 0x4C
	private float m_ElapsedWarmTime; // 0x50
	private string m_CauseLocID; // 0x58
	private bool m_StartHasBeenCalled; // 0x60
	private bool m_SuppressHypothermia; // 0x61
	private static HypothermiaSaveDataProxy m_HypothermiaSaveDataProxy; // 0x0
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(code_call_end)
label(hypothermia_update_hook)
label(hypothermia_update_bytes)
label(hypothermia_suppressed_hook)
label(hypothermia_suppressed_bytes)
label(hypothermia_base_ptr)
registersymbol(hypothermia_update_hook)
registersymbol(hypothermia_update_bytes)
registersymbol(hypothermia_suppressed_hook)
registersymbol(hypothermia_suppressed_bytes)
registersymbol(hypothermia_base_ptr)

//  class: Hypothermia
//  RVA: 0x10F2F00 Offset: 0x10F1F00 VA: 0x7FFB0CAC2F00
//  public void Update() { }
aobScanModule(hook,GameAssembly.dll,48 00 C3 CC 40 53 48 83 EC 40)

//  class: Hypothermia
// 	RVA: 0x10F3BD0 Offset: 0x10F2BD0 VA: 0x7FFB0CAC3BD0
//  private void CheckForHypothermia() { }
aobScanModule(hook2,GameAssembly.dll,80 7b ? ? 0f 85 ? ? ? ? 48 8b 0d ? ? ? ? f6 81 ? ? ? ? ? 74 ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? e8 ? ? ? ? 48 85 c0 0f 84 ? ? ? ? f3 0f 10 40)


//  class: Hypothermia
//  RVA: 0x10F35C0 Offset: 0x10F25C0 VA: 0x7FFB0CAC35C0
//  public void HypothermiaEnd() { }
aobScanModule(hypothermia_end,GameAssembly.dll,40 57 48 83 ec ? 48 c7 44 24 ? ? ? ? ? 48 89 5c 24 ? 48 8b d9 33 ff 40 38 3d ? ? ? ? 75 ? 48 8b 05 ? ? ? ? 48 63 90 ? ? ? ? 48 8b 05 ? ? ? ? 8b 8c 02 ? ? ? ? 48 89 7c 24 ? 48 89 7c 24 ? 48 89 7c 24 ? 4c 8d 44 24 ? 8b 94 02 ? ? ? ? e8 ? ? ? ? 90 33 c9 ff 15 ? ? ? ? 90 c6 05 ? ? ? ? ? c6 43 ? ? 89 7b ? 48 8b 43)


newmem:
hypothermia_update_bytes:
  //push rbx
  //sub rsp,40
  readMem(hook+4, 6)
  jmp returnhere

hypothermia_suppressed_bytes:
  //cmp byte ptr [rbx+61],00
  readMem(hook2, 4)

hypothermia_base_ptr:
  dq 0

code:
  mov [hypothermia_base_ptr], rcx

  // private bool m_Active; // 0x48
  // If the affliction is active, call Hypothermia.HypothermiaEnd
  cmp byte ptr [rcx+48], 0
  jnz code_call_end

  // private float m_ElapsedHours; // 0x4C
  // If the elapsed time is higher than 0, we have hypothermia risk, so call Hypothermia.HypothermiaEnd
  movss xmm1, [rcx+4C]
  xorps xmm0, xmm0
  comiss xmm1, xmm0
  jbe hypothermia_update_bytes

code_call_end:
  lea rsp, [rsp-38]
  mov [rsp+30], rcx
  call hypothermia_end
  mov rcx, [rsp+30]
  lea rsp, [rsp+38]
  jmp hypothermia_update_bytes

hook+4:
hypothermia_update_hook:
  jmp code
  nop
  returnhere:


// this patch is to prevent hypothermia immediately coming back
hook2:
hypothermia_suppressed_hook:
  test rbx, rbx
  nop



[DISABLE]
hypothermia_update_hook:
  //40 53 48 83 EC 40
  readMem(hypothermia_update_bytes, 6)

hypothermia_suppressed_hook:
  //80 7B 61 00
  readMem(hypothermia_suppressed_bytes,4)

unregistersymbol(hypothermia_update_hook)
unregistersymbol(hypothermia_update_bytes)
unregistersymbol(hypothermia_suppressed_hook)
unregistersymbol(hypothermia_suppressed_bytes)
unregistersymbol(hypothermia_base_ptr)
dealloc(newmem)

{
hook+4 / hypothermia_update_hook
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+10F2F00

"GameAssembly.dll"+10F2EEC: CC                          -  int 3
"GameAssembly.dll"+10F2EED: CC                          -  int 3
"GameAssembly.dll"+10F2EEE: CC                          -  int 3
"GameAssembly.dll"+10F2EEF: CC                          -  int 3
"GameAssembly.dll"+10F2EF0: 80 79 60 00                 -  cmp byte ptr [rcx+60],00
"GameAssembly.dll"+10F2EF4: 75 08                       -  jne GameAssembly.dll+10F2EFE
"GameAssembly.dll"+10F2EF6: C6 41 60 01                 -  mov byte ptr [rcx+60],01
"GameAssembly.dll"+10F2EFA: C6 41 48 00                 -  mov byte ptr [rcx+48],00
"GameAssembly.dll"+10F2EFE: C3                          -  ret
"GameAssembly.dll"+10F2EFF: CC                          -  int 3
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+10F2F00: 40 53                       -  push rbx
"GameAssembly.dll"+10F2F02: 48 83 EC 40                 -  sub rsp,40
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+10F2F06: 48 C7 44 24 20 FE FF FF FF  -  mov qword ptr [rsp+20],FFFFFFFE
"GameAssembly.dll"+10F2F0F: 48 8B D9                    -  mov rbx,rcx
"GameAssembly.dll"+10F2F12: 80 3D 1A AB 35 03 00        -  cmp byte ptr [GameAssembly.dll+444DA33],00
"GameAssembly.dll"+10F2F19: 75 50                       -  jne GameAssembly.dll+10F2F6B
"GameAssembly.dll"+10F2F1B: 48 8B 05 1E 2E 35 03        -  mov rax,[GameAssembly.dll+4445D40]
"GameAssembly.dll"+10F2F22: 48 63 90 B8 00 00 00        -  movsxd  rdx,dword ptr [rax+000000B8]
"GameAssembly.dll"+10F2F29: 48 8B 05 E8 2D 35 03        -  mov rax,[GameAssembly.dll+4445D18]
"GameAssembly.dll"+10F2F30: 8B 8C 02 D0 5B 04 00        -  mov ecx,[rdx+rax+00045BD0]
"GameAssembly.dll"+10F2F37: 45 33 C0                    -  xor r8d,r8d
"GameAssembly.dll"+10F2F3A: 4C 89 44 24 28              -  mov [rsp+28],r8
}


{
hook2 / hypotherima_is_suppressed
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+10F3C5A

"GameAssembly.dll"+10F3C31: 49 89 6B A0           -  mov [r11-60],rbp
"GameAssembly.dll"+10F3C35: 49 89 6B A8           -  mov [r11-58],rbp
"GameAssembly.dll"+10F3C39: 4D 8D 43 98           -  lea r8,[r11-68]
"GameAssembly.dll"+10F3C3D: 8B 94 02 94 5B 04 00  -  mov edx,[rdx+rax+00045B94]
"GameAssembly.dll"+10F3C44: E8 F7 DE F8 FE        -  call GameAssembly.dll+81B40
"GameAssembly.dll"+10F3C49: 90                    -  nop
"GameAssembly.dll"+10F3C4A: 33 C9                 -  xor ecx,ecx
"GameAssembly.dll"+10F3C4C: FF 15 DE 74 06 03     -  call qword ptr [GameAssembly.dll+415B130]
"GameAssembly.dll"+10F3C52: 90                    -  nop
"GameAssembly.dll"+10F3C53: C6 05 1D 9D 35 03 01  -  mov byte ptr [GameAssembly.dll+444D977],01
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+10F3C5A: 80 7B 61 00           -  cmp byte ptr [rbx+61],00
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+10F3C5E: 0F 85 19 03 00 00     -  jne GameAssembly.dll+10F3F7D
"GameAssembly.dll"+10F3C64: 48 8B 0D 9D DB 3C 03  -  mov rcx,[GameAssembly.dll+44C1808]
"GameAssembly.dll"+10F3C6B: F6 81 2F 01 00 00 02  -  test byte ptr [rcx+0000012F],02
"GameAssembly.dll"+10F3C72: 74 0E                 -  je GameAssembly.dll+10F3C82
"GameAssembly.dll"+10F3C74: 83 B9 E0 00 00 00 00  -  cmp dword ptr [rcx+000000E0],00
"GameAssembly.dll"+10F3C7B: 75 05                 -  jne GameAssembly.dll+10F3C82
"GameAssembly.dll"+10F3C7D: E8 4E 7A F9 FE        -  call GameAssembly.dll+8B6D0
"GameAssembly.dll"+10F3C82: E8 69 09 D2 FF        -  call GameAssembly.dll+E145F0
"GameAssembly.dll"+10F3C87: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+10F3C8A: 0F 84 20 03 00 00     -  je GameAssembly.dll+10F3FB0
"GameAssembly.dll"+10F3C90: F3 0F 10 40 20        -  movss xmm0,[rax+20]
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8919</ID>
                  <Description>"Remove Cabin Fever"</Description>
                  <LastState/>
                  <Color>008000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-10-30
  Author : sub1to


  	// Fields
	public float m_NumHoursToExitRisk; // 0x18
	public float m_NumHoursToEnterRisk; // 0x1C
	public float m_NumHoursRequiredIndoors; // 0x20
	public float m_NumHoursToCheck; // 0x24
	public float m_NumHoursToPreventIndoorRest; // 0x28
	public int m_NumSafeDaysVoyageur; // 0x2C
	public int m_NumSafeDaysStalker; // 0x30
	[FormerlySerializedAsAttribute] // RVA: 0x185D20 Offset: 0x185120 VA: 0x7FFB0BB55D20
	public int m_NumSafeDaysInterloper; // 0x34
	public List&lt;ExperienceModeType&gt; m_XPModesToDisable; // 0x38
	private bool m_Active; // 0x40
	private bool m_RiskActive; // 0x41
	private float m_ElapsedHours; // 0x44
	private List&lt;float&gt; m_IndoorTimeTracked; // 0x48
	private int m_HourLastFrame; // 0x50
	private float m_HoursIndoorsExcludingLastHourCached; // 0x54
	private bool m_StartHasBeenCalled; // 0x58
	private static CabinFeverSaveDataProxy m_CabinFeverSaveDataProxy; // 0x0
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(cabin_fever_update_hook)
label(cabin_fever_update_bytes)
label(cabin_fever_check_hook)
label(cabin_fever_start_bytes)
registersymbol(cabin_fever_update_hook)
registersymbol(cabin_fever_update_bytes)
registersymbol(cabin_fever_check_hook)
registersymbol(cabin_fever_start_bytes)

//  class: CabinFever
//  RVA: 0x15B8420 Offset: 0x15B7420 VA: 0x7FFB0CF88420
//  public void Update() { }
aobScanModule(hook,GameAssembly.dll,40 00 C3 CC 4C 8B DC 57 48 83 EC 50)

//  class: CabinFever
//  RVA: 0x15B99D0 Offset: 0x15B89D0 VA: 0x7FFB0CF899D0
//  private void CheckForCabinFever() { }
aobScanModule(hook2,GameAssembly.dll,4c 8b dc 57 48 81 ec ? ? ? ? 49 c7 43 ? ? ? ? ? 49 89 5b ? 0f 29 74 24 ? 0f 29 7c 24 ? 48 8b d9 33 ff 40 38 3d ? ? ? ? 75 ? 48 8b 05 ? ? ? ? 48 63 90 ? ? ? ? 48 8b 05 ? ? ? ? 8b 8c 02 ? ? ? ? 49 89 7b ? 49 89 7b ? 49 89 7b ? 4d 8d 43 ? 8b 94 02 ? ? ? ? e8 ? ? ? ? 90 33 c9 ff 15 ? ? ? ? 90 c6 05 ? ? ? ? ? f3 0f 10 73)

//  class: CabinFever
//  RVA: 0x15B9310 Offset: 0x15B8310 VA: 0x7FFB0CF89310
//  public void CabinFeverEnd() { }
aobScanModule(cabin_fever_end,GameAssembly.dll,40 57 48 83 ec ? 48 c7 44 24 ? ? ? ? ? 48 89 5c 24 ? 48 8b d9 33 ff 40 38 3d ? ? ? ? 75 ? 48 8b 05 ? ? ? ? 48 63 90 ? ? ? ? 48 8b 05 ? ? ? ? 8b 8c 02 ? ? ? ? 48 89 7c 24 ? 48 89 7c 24 ? 48 89 7c 24 ? 4c 8d 44 24 ? 8b 94 02 ? ? ? ? e8 ? ? ? ? 90 33 c9 ff 15 ? ? ? ? 90 c6 05 ? ? ? ? ? 66 c7 43 ? ? ? 89 7b)

newmem:
cabin_fever_update_bytes:
  //mov r11,rsp
  //push rdi
  //sub rsp,50
  readMem(hook+4, 8)
  jmp returnhere

cabin_fever_start_bytes:
  //mov r11,rsp
  //push rdi
  readMem(hook2, 4)

code:
  lea rsp, [rsp-38]
  mov [rsp+30], rcx
  call cabin_fever_end
  mov rcx, [rsp+30]
  lea rsp, [rsp+38]
  jmp cabin_fever_update_bytes

hook+4:
cabin_fever_update_hook:
  jmp code
  nop
  nop
  nop
  returnhere:

hook2:
cabin_fever_check_hook:
  db 48 31 c0 c3
  //xor rax, rax
  //ret



[DISABLE]
cabin_fever_update_hook:
  //4C 8B DC 57 48 83 EC 50
  readMem(cabin_fever_update_bytes, 8)

cabin_fever_check_hook:
  //4C 8B DC 57
  readMem(cabin_fever_start_bytes, 4)

unregistersymbol(cabin_fever_update_hook)
unregistersymbol(cabin_fever_update_bytes)
unregistersymbol(cabin_fever_check_hook)
unregistersymbol(cabin_fever_start_bytes)
dealloc(newmem)

{
hook / cabin_fever_update_hook
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+15B8420

"GameAssembly.dll"+15B840C: C3                       -  ret
"GameAssembly.dll"+15B840D: CC                       -  int 3
"GameAssembly.dll"+15B840E: CC                       -  int 3
"GameAssembly.dll"+15B840F: CC                       -  int 3
"GameAssembly.dll"+15B8410: 80 79 58 00              -  cmp byte ptr [rcx+58],00
"GameAssembly.dll"+15B8414: 75 08                    -  jne GameAssembly.dll+15B841E
"GameAssembly.dll"+15B8416: C6 41 58 01              -  mov byte ptr [rcx+58],01
"GameAssembly.dll"+15B841A: C6 41 40 00              -  mov byte ptr [rcx+40],00
"GameAssembly.dll"+15B841E: C3                       -  ret
"GameAssembly.dll"+15B841F: CC                       -  int 3
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+15B8420: 4C 8B DC                 -  mov r11,rsp
"GameAssembly.dll"+15B8423: 57                       -  push rdi
"GameAssembly.dll"+15B8424: 48 83 EC 50              -  sub rsp,50
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+15B8428: 49 C7 43 C8 FE FF FF FF  -  mov qword ptr [r11-38],FFFFFFFE
"GameAssembly.dll"+15B8430: 49 89 5B 08              -  mov [r11+08],rbx
"GameAssembly.dll"+15B8434: 49 89 6B 10              -  mov [r11+10],rbp
"GameAssembly.dll"+15B8438: 49 89 73 18              -  mov [r11+18],rsi
"GameAssembly.dll"+15B843C: 0F 29 74 24 40           -  movaps [rsp+40],xmm6
"GameAssembly.dll"+15B8441: 48 8B D9                 -  mov rbx,rcx
"GameAssembly.dll"+15B8444: 33 ED                    -  xor ebp,ebp
"GameAssembly.dll"+15B8446: 40 38 2D 06 C5 E9 02     -  cmp [GameAssembly.dll+4454953],bpl
"GameAssembly.dll"+15B844D: 75 49                    -  jne GameAssembly.dll+15B8498
"GameAssembly.dll"+15B844F: 48 8B 05 EA D8 E8 02     -  mov rax,[GameAssembly.dll+4445D40]
}

{
hook2 / cabin_fever_check_hook
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+15B99D0

"GameAssembly.dll"+15B99C2: CC                       -  int 3
"GameAssembly.dll"+15B99C3: E8 38 0A B1 FE           -  call GameAssembly.dll+CA400
"GameAssembly.dll"+15B99C8: CC                       -  int 3
"GameAssembly.dll"+15B99C9: CC                       -  int 3
"GameAssembly.dll"+15B99CA: CC                       -  int 3
"GameAssembly.dll"+15B99CB: CC                       -  int 3
"GameAssembly.dll"+15B99CC: CC                       -  int 3
"GameAssembly.dll"+15B99CD: CC                       -  int 3
"GameAssembly.dll"+15B99CE: CC                       -  int 3
"GameAssembly.dll"+15B99CF: CC                       -  int 3
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+15B99D0: 4C 8B DC                 -  mov r11,rsp
"GameAssembly.dll"+15B99D3: 57                       -  push rdi
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+15B99D4: 48 81 EC 80 00 00 00     -  sub rsp,00000080
"GameAssembly.dll"+15B99DB: 49 C7 43 A8 FE FF FF FF  -  mov qword ptr [r11-58],FFFFFFFE
"GameAssembly.dll"+15B99E3: 49 89 5B 08              -  mov [r11+08],rbx
"GameAssembly.dll"+15B99E7: 0F 29 74 24 70           -  movaps [rsp+70],xmm6
"GameAssembly.dll"+15B99EC: 0F 29 7C 24 60           -  movaps [rsp+60],xmm7
"GameAssembly.dll"+15B99F1: 48 8B D9                 -  mov rbx,rcx
"GameAssembly.dll"+15B99F4: 33 FF                    -  xor edi,edi
"GameAssembly.dll"+15B99F6: 40 38 3D CF AE E9 02     -  cmp [GameAssembly.dll+44548CC],dil
"GameAssembly.dll"+15B99FD: 75 49                    -  jne GameAssembly.dll+15B9A48
"GameAssembly.dll"+15B99FF: 48 8B 05 3A C3 E8 02     -  mov rax,[GameAssembly.dll+4445D40]
"GameAssembly.dll"+15B9A06: 48 63 90 B8 00 00 00     -  movsxd  rdx,dword ptr [rax+000000B8]
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>9008</ID>
                  <Description>"Remove Frostbite"</Description>
                  <LastState/>
                  <Color>008000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-11-01
  Author : sub1to

  public class Frostbite : MonoBehaviour // TypeDefIndex: 8463
	// Fields
	public LocalizedString m_LocalizedDisplayName; // 0x18
	public LocalizedString m_LocalizedDescription; // 0x20
	public float m_TemperatureToBeginFrostbiteDamage; // 0x28
	public float m_DamagePerHourBase; // 0x2C
	public float m_DamagePerHourIncreasePerDegree; // 0x30
	public float m_MaxDamagePerHour; // 0x34
	public float m_DamageMultiplierInnerFrozenClothing; // 0x38
	public float m_PilgrimDamageMultiplier; // 0x3C
	public float m_VoyageurDamageMultiplier; // 0x40
	public float m_StalkerDamageMultiplier; // 0x44
	public float m_InterloperDamageMultiplier; // 0x48
	public float m_TemperatureToBeginFrostbiteHeal; // 0x4C
	public float m_HealPerHourBase; // 0x50
	public float m_HealPerHourIncreasePerDegree; // 0x54
	public float m_MaxHealPerHour; // 0x58
	public Frostbite.BodyAreaFrostbiteHP[] m_BodyAreaFrostbiteMaxHPList; // 0x60
	public float m_HPPercentThresholdToStartRisk; // 0x68
	public float m_MaxPlayerHPReductionPerInstance; // 0x6C
	[HeaderAttribute] // RVA: 0x1764B0 Offset: 0x1758B0 VA: 0x7FFB0BB464B0
	public string m_FrostbiteVO; // 0x70
	private List&lt;int&gt; m_LocationsWithActiveFrostbite; // 0x78
	private List&lt;int&gt; m_LocationsWithFrostbiteRisk; // 0x80
	private List&lt;float&gt; m_LocationsCurrentFrostbiteDamage; // 0x88
	private bool m_StartHasBeenCalled; // 0x90
	private bool m_SuppressFrostbite; // 0x91
	private float[] m_MaxHPList; // 0x98
	private static FrostbiteSaveDataProxy m_FrostbiteSaveDataProxy; // 0x0
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(frostbite_update_hook)
label(frostbite_update_bytes)
registersymbol(frostbite_update_hook)
registersymbol(frostbite_update_bytes)

//  class: Frostbite
//  RVA: 0x104CD20 Offset: 0x104BD20 VA: 0x7FFB0CA1CD20
//	public void Update() { }
aobScanModule(hook,GameAssembly.dll,40 53 48 83 ec ? 48 c7 44 24 ? ? ? ? ? 48 8b d9 80 3d ? ? ? ? ? 75 ? 48 8b 05 ? ? ? ? 48 63 90 ? ? ? ? 48 8b 05 ? ? ? ? 8b 8c 02 ? ? ? ? 45 33 c0 4c 89 44 24 ? 4c 89 44 24 ? 4c 89 44 24 ? 4c 8d 44 24 ? 8b 94 02 ? ? ? ? e8 ? ? ? ? 90 33 c9 ff 15 ? ? ? ? 90 c6 05 ? ? ? ? ? 48 8b 0d ? ? ? ? f6 81 ? ? ? ? ? 74 ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? 48 8b 0d ? ? ? ? 48 8b 81 ? ? ? ? 80 78 ? ? 0f 85 ? ? ? ? f6 81 ? ? ? ? ? 74 ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? 48 8b 0d)

//  class: Frostbite
//  RVA: 0x104D9D0 Offset: 0x104C9D0 VA: 0x7FFB0CA1D9D0
//  public void FrostbiteEnd() { }
aobScanModule(frostbite_end,GameAssembly.dll,4c 8b dc 57 48 83 ec ? 49 c7 43 ? ? ? ? ? 49 89 5b ? 49 89 73 ? 48 8b f9 33 f6 40 38 35 ? ? ? ? 75 ? 48 8b 05 ? ? ? ? 48 63 90 ? ? ? ? 48 8b 05 ? ? ? ? 8b 8c 02 ? ? ? ? 49 89 73 ? 49 89 73 ? 49 89 73 ? 4d 8d 43 ? 8b 94 02 ? ? ? ? e8 ? ? ? ? 90 33 c9 ff 15 ? ? ? ? 90 c6 05 ? ? ? ? ? 48 8b 5f ? 48 85 db 0f 84 ? ? ? ? 44 8b 43 ? 45 85 c0 7e ? 45 33 c9 33 d2 48 8b 4b ? e8 ? ? ? ? 89 73 ? ff 43 ? 48 8b 9f)

newmem:
frostbite_update_bytes:
  //push rbx
  //sub rsp,40
  readMem(hook, 6)
  jmp returnhere

code:
  lea rsp, [rsp-38]
  mov [rsp+30], rcx
  xor rdx, rdx
  call frostbite_end
  mov rcx, [rsp+30]
  lea rsp, [rsp+38]
  jmp frostbite_update_bytes

hook:
frostbite_update_hook:
  jmp code
  nop
  returnhere:



[DISABLE]
frostbite_update_hook:
  //40 53 48 83 EC 40
  readMem(frostbite_update_bytes, 6)

unregistersymbol(frostbite_update_hook)
unregistersymbol(frostbite_update_bytes)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+104CD20

"GameAssembly.dll"+104CD0B: CC                          -  int 3
"GameAssembly.dll"+104CD0C: E8 BF E3 02 FF              -  call GameAssembly.dll+7B0D0
"GameAssembly.dll"+104CD11: 48 8B C8                    -  mov rcx,rax
"GameAssembly.dll"+104CD14: 33 D2                       -  xor edx,edx
"GameAssembly.dll"+104CD16: E8 D5 D6 07 FF              -  call GameAssembly.dll+CA3F0
"GameAssembly.dll"+104CD1B: CC                          -  int 3
"GameAssembly.dll"+104CD1C: CC                          -  int 3
"GameAssembly.dll"+104CD1D: CC                          -  int 3
"GameAssembly.dll"+104CD1E: CC                          -  int 3
"GameAssembly.dll"+104CD1F: CC                          -  int 3
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+104CD20: 40 53                       -  push rbx
"GameAssembly.dll"+104CD22: 48 83 EC 40                 -  sub rsp,40
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+104CD26: 48 C7 44 24 20 FE FF FF FF  -  mov qword ptr [rsp+20],FFFFFFFE
"GameAssembly.dll"+104CD2F: 48 8B D9                    -  mov rbx,rcx
"GameAssembly.dll"+104CD32: 80 3D 1E 09 40 03 00        -  cmp byte ptr [GameAssembly.dll+444D657],00
"GameAssembly.dll"+104CD39: 75 50                       -  jne GameAssembly.dll+104CD8B
"GameAssembly.dll"+104CD3B: 48 8B 05 FE 8F 3F 03        -  mov rax,[GameAssembly.dll+4445D40]
"GameAssembly.dll"+104CD42: 48 63 90 B8 00 00 00        -  movsxd  rdx,dword ptr [rax+000000B8]
"GameAssembly.dll"+104CD49: 48 8B 05 C8 8F 3F 03        -  mov rax,[GameAssembly.dll+4445D18]
"GameAssembly.dll"+104CD50: 8B 8C 02 D0 B1 03 00        -  mov ecx,[rdx+rax+0003B1D0]
"GameAssembly.dll"+104CD57: 45 33 C0                    -  xor r8d,r8d
"GameAssembly.dll"+104CD5A: 4C 89 44 24 28              -  mov [rsp+28],r8
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8879</ID>
                  <Description>"Haven't done other afflictions yet.."</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>0080FF</Color>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>8787</ID>
          <Description>"Skills"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="1" RealAddress="00000000"/>
          <Color>C08000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8654</ID>
              <Description>"Skill (Open journal skill tab to activate)"</Description>
              <LastState Activated="1"/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.95 83861 S
  Date   : 2021-10-18
  Author : sub1to

  This script does blah blah blah


  Thanks to JLee:
    // enum SkillType
	public const SkillType None = -1; // 0x0
	public const SkillType Firestarting = 0; // 0x0
	public const SkillType CarcassHarvesting = 1; // 0x0
	public const SkillType IceFishing = 2; // 0x0
	public const SkillType Cooking = 3; // 0x0
	public const SkillType Rifle = 4; // 0x0
	public const SkillType Archery = 5; // 0x0
	public const SkillType ClothingRepair = 6; // 0x0
	public const SkillType ToolRepair = 7; // 0x0
	public const SkillType Revolver = 8; // 0x0
	public const SkillType Gunsmithing = 9; // 0x0
}

[ENABLE]
alloc(newmem,$200,GameAssembly.dll)
label(returnhere)
label(code)
label(code_fire)
label(code_carcass)
label(code_fish)
label(code_cook)
label(code_rifle)
label(code_archery)
label(code_mending)
label(code_tool_repair)
label(code_revolver)
label(code_gunsmith)
label(read_journal_skill_level_hook)
label(read_journal_skill_level_bytes)
label(fire_skill_base_ptr)
label(carcass_skill_base_ptr)
label(fish_skill_base_ptr)
label(cook_skill_base_ptr)
label(rifle_skill_base_ptr)
label(archery_skill_base_ptr)
label(mending_skill_base_ptr)
label(tool_repair_skill_base_ptr)
label(revolver_skill_base_ptr)
label(gunsmith_skill_base_ptr)
registersymbol(read_journal_skill_level_hook)
registersymbol(read_journal_skill_level_bytes)
registersymbol(fire_skill_base_ptr)
registersymbol(carcass_skill_base_ptr)
registersymbol(fish_skill_base_ptr)
registersymbol(cook_skill_base_ptr)
registersymbol(rifle_skill_base_ptr)
registersymbol(archery_skill_base_ptr)
registersymbol(mending_skill_base_ptr)
registersymbol(tool_repair_skill_base_ptr)
registersymbol(revolver_skill_base_ptr)
registersymbol(gunsmith_skill_base_ptr)
aobScanModule(hook,GameAssembly.dll,44 8B 41 58 45 85 C0)

newmem:
read_journal_skill_level_bytes:
  //mov r8d,[rcx+58]
  //test r8d,r8d
  readMem(hook, 7)
  jmp returnhere

fire_skill_base_ptr:
  dq 0

carcass_skill_base_ptr:
  dq 0

fish_skill_base_ptr:
  dq 0

cook_skill_base_ptr:
  dq 0

rifle_skill_base_ptr:
  dq 0

archery_skill_base_ptr:
  dq 0

mending_skill_base_ptr:
  dq 0

tool_repair_skill_base_ptr:
  dq 0

revolver_skill_base_ptr:
  dq 0

gunsmith_skill_base_ptr:
  dq 0

code:
code_fire:
  cmp dword ptr [rcx+20], 0
  jnz code_carcass
  mov [fire_skill_base_ptr], rcx
  jmp read_journal_skill_level_bytes

code_carcass:
  cmp dword ptr [rcx+20], 1
  jnz code_fish
  mov [carcass_skill_base_ptr], rcx
  jmp read_journal_skill_level_bytes

code_fish:
  cmp dword ptr [rcx+20], 2
  jnz code_cook
  mov [fish_skill_base_ptr], rcx
  jmp read_journal_skill_level_bytes

code_cook:
  cmp dword ptr [rcx+20], 3
  jnz code_rifle
  mov [cook_skill_base_ptr], rcx
  jmp read_journal_skill_level_bytes

code_rifle:
  cmp dword ptr [rcx+20], 4
  jnz code_archery
  mov [rifle_skill_base_ptr], rcx
  jmp read_journal_skill_level_bytes

code_archery:
  cmp dword ptr [rcx+20], 5
  jnz code_mending
  mov [archery_skill_base_ptr], rcx
  jmp read_journal_skill_level_bytes

code_mending:
  cmp dword ptr [rcx+20], 6
  jnz code_tool_repair
  mov [mending_skill_base_ptr], rcx
  jmp read_journal_skill_level_bytes

code_tool_repair:
  cmp dword ptr [rcx+20], 7
  jnz code_revolver
  mov [tool_repair_skill_base_ptr], rcx
  jmp read_journal_skill_level_bytes

code_revolver:
  cmp dword ptr [rcx+20], 8
  jnz code_gunsmith
  mov [revolver_skill_base_ptr], rcx
  jmp read_journal_skill_level_bytes

code_gunsmith:
  cmp dword ptr [rcx+20], 9
  jnz read_journal_skill_level_bytes
  mov [gunsmith_skill_base_ptr], rcx
  jmp read_journal_skill_level_bytes

hook:
read_journal_skill_level_hook:
  jmp code
  nop
  nop
  returnhere:



[DISABLE]
read_journal_skill_level_hook:
  //db 44 8B 41 58 45 85 C0
  readMem(read_journal_skill_level_bytes, 7)

unregistersymbol(read_journal_skill_level_hook)
unregistersymbol(read_journal_skill_level_bytes)
unregistersymbol(fire_skill_base_ptr)
unregistersymbol(carcass_skill_base_ptr)
unregistersymbol(fish_skill_base_ptr)
unregistersymbol(cook_skill_base_ptr)
unregistersymbol(rifle_skill_base_ptr)
unregistersymbol(archery_skill_base_ptr)
unregistersymbol(mending_skill_base_ptr)
unregistersymbol(tool_repair_skill_base_ptr)
unregistersymbol(revolver_skill_base_ptr)
unregistersymbol(gunsmith_skill_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+16E7854

"GameAssembly.dll"+16E7843: CC                    -  int 3
"GameAssembly.dll"+16E7844: E8 B7 2B 9E FE        -  call GameAssembly.dll+CA400
"GameAssembly.dll"+16E7849: CC                    -  int 3
"GameAssembly.dll"+16E784A: CC                    -  int 3
"GameAssembly.dll"+16E784B: CC                    -  int 3
"GameAssembly.dll"+16E784C: CC                    -  int 3
"GameAssembly.dll"+16E784D: CC                    -  int 3
"GameAssembly.dll"+16E784E: CC                    -  int 3
"GameAssembly.dll"+16E784F: CC                    -  int 3
"GameAssembly.dll"+16E7850: 48 83 EC 28           -  sub rsp,28
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+16E7854: 44 8B 41 58           -  mov r8d,[rcx+58]
"GameAssembly.dll"+16E7858: 45 85 C0              -  test r8d,r8d
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+16E785B: 74 36                 -  je GameAssembly.dll+16E7893
"GameAssembly.dll"+16E785D: 48 8B 51 28           -  mov rdx,[rcx+28]
"GameAssembly.dll"+16E7861: 48 85 D2              -  test rdx,rdx
"GameAssembly.dll"+16E7864: 74 46                 -  je GameAssembly.dll+16E78AC
"GameAssembly.dll"+16E7866: 44 8B 4A 18           -  mov r9d,[rdx+18]
"GameAssembly.dll"+16E786A: 41 83 F9 04           -  cmp r9d,04
"GameAssembly.dll"+16E786E: 76 42                 -  jna GameAssembly.dll+16E78B2
"GameAssembly.dll"+16E7870: 44 3B 42 30           -  cmp r8d,[rdx+30]
"GameAssembly.dll"+16E7874: 74 2C                 -  je GameAssembly.dll+16E78A2
"GameAssembly.dll"+16E7876: 33 C9                 -  xor ecx,ecx
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8878</ID>
                  <Description>"Fire Starting"</Description>
                  <LastState Value="200" RealAddress="23251507328"/>
                  <Color>FF8080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>fire_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>58</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8657</ID>
                  <Description>"Carcass Harvesting"</Description>
                  <LastState Value="100" RealAddress="23251507448"/>
                  <Color>FF8080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>carcass_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>58</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8658</ID>
                  <Description>"Fishing"</Description>
                  <LastState Value="250" RealAddress="231F527FE58"/>
                  <Color>FF8080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>fish_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>58</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8659</ID>
                  <Description>"Cooking"</Description>
                  <LastState Value="350" RealAddress="232515073B8"/>
                  <Color>FF8080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>cook_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>58</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8660</ID>
                  <Description>"Rifle"</Description>
                  <LastState Value="100" RealAddress="232C8F0E108"/>
                  <Color>FF8080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>rifle_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>58</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8656</ID>
                  <Description>"Archery"</Description>
                  <LastState Value="125" RealAddress="232C98C64B8"/>
                  <Color>FF8080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>archery_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>58</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8661</ID>
                  <Description>"Mending"</Description>
                  <LastState Value="350" RealAddress="23251507298"/>
                  <Color>FF8080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>mending_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>58</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8663</ID>
                  <Description>"Revolver"</Description>
                  <LastState Value="100" RealAddress="232C8F0E058"/>
                  <Color>FF8080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>revolver_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>58</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8664</ID>
                  <Description>"Gunsmithing"</Description>
                  <LastState Value="100" RealAddress="232C8F3F608"/>
                  <Color>FF8080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>gunsmith_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>58</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8786</ID>
              <Description>"Secondary Skills (Open tool repair/gun cleaning/sharpening screen to activate)"</Description>
              <LastState Activated="1"/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-10-27
  Author : sub1to

  This script does blah blah blah

  +18]
    +14  tool repair skill
    +18  gun cleaning skill
    +1C  sharpening skill


  call to function that returns the ptr:
  e8 ? ? ? ? 48 85 c0 0f 84 ? ? ? ? 48 8b 48 ? 48 85 c9 0f 84 ? ? ? ? f3 0f 10 71 ? f3 0f 59 35 ? ? ? ? 48 8b 9f
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(code)
label(returnhere)
label(secondary_skill_hook)
label(secondary_skill_bytes)
label(secondary_skill_base_ptr)
registersymbol(secondary_skill_hook)
registersymbol(secondary_skill_bytes)
registersymbol(secondary_skill_base_ptr)
aobScanModule(hook,GameAssembly.dll,48 83 EC 48 48 C7 44 24 20 FE FF FF FF 80 3D ? ? ? ? 00 75 4F 48 8B 05 23 F4)

newmem:
secondary_skill_bytes:
  //add rsp,48
  //ret
  readMem(hook, 13)
  jmp returnhere

secondary_skill_base_ptr:
  dq 0

code:
  sub rsp, 28
  call secondary_skill_bytes
  add rsp, 28
  mov [secondary_skill_base_ptr], rax
  jmp secondary_skill_bytes

hook:
secondary_skill_hook:
  jmp code
  nop 8
  returnhere:


[DISABLE]
secondary_skill_hook:
  //db 48 83 C4 48 C3
  readMem(secondary_skill_bytes, 13)

unregistersymbol(secondary_skill_hook)
unregistersymbol(secondary_skill_bytes)
unregistersymbol(secondary_skill_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+16B8610

GameAssembly.dll+16B8600: 0F B6 81 A1 04 00 00        - movzx eax,byte ptr [rcx+000004A1]
GameAssembly.dll+16B8607: C3                          - ret
GameAssembly.dll+16B8608: CC                          - int 3
GameAssembly.dll+16B8609: CC                          - int 3
GameAssembly.dll+16B860A: CC                          - int 3
GameAssembly.dll+16B860B: CC                          - int 3
GameAssembly.dll+16B860C: CC                          - int 3
GameAssembly.dll+16B860D: CC                          - int 3
GameAssembly.dll+16B860E: CC                          - int 3
GameAssembly.dll+16B860F: CC                          - int 3
// ---------- INJECTING HERE ----------
GameAssembly.dll+16B8610: 48 83 EC 48                 - sub rsp,48
// ---------- DONE INJECTING  ----------
GameAssembly.dll+16B8614: 48 C7 44 24 20 FE FF FF FF  - mov qword ptr [rsp+20],FFFFFFFFFFFFFFFE
GameAssembly.dll+16B861D: 80 3D EB E0 D9 02 00        - cmp byte ptr [GameAssembly.dll+445670F],00
GameAssembly.dll+16B8624: 75 4F                       - jne GameAssembly.dll+16B8675
GameAssembly.dll+16B8626: 48 8B 05 93 D0 D9 02        - mov rax,[GameAssembly.dll+44556C0]
GameAssembly.dll+16B862D: 48 63 88 B8 00 00 00        - movsxd  rcx,dword ptr [rax+000000B8]
GameAssembly.dll+16B8634: 48 8B 05 5D D0 D9 02        - mov rax,[GameAssembly.dll+4455698]
GameAssembly.dll+16B863B: 33 D2                       - xor edx,edx
GameAssembly.dll+16B863D: 48 89 54 24 28              - mov [rsp+28],rdx
GameAssembly.dll+16B8642: 48 89 54 24 30              - mov [rsp+30],rdx
GameAssembly.dll+16B8647: 48 89 54 24 38              - mov [rsp+38],rdx
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8711</ID>
                  <Description>"Tool Repair"</Description>
                  <LastState Value="100" RealAddress="232A0DA2C70"/>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>secondary_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>10</Offset>
                    <Offset>18</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8789</ID>
                  <Description>"Gun Cleaning"</Description>
                  <LastState Value="48" RealAddress="232A0DA2C74"/>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>secondary_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>14</Offset>
                    <Offset>18</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8790</ID>
                  <Description>"Sharpening"</Description>
                  <LastState Value="100" RealAddress="232A0DA2C78"/>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>secondary_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>18</Offset>
                    <Offset>18</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>8627</ID>
          <Description>"Light"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="1" RealAddress="00000000"/>
          <Color>C08000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8512</ID>
              <Description>"Lantern"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState Activated="1"/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.95 83861 S
  Date   : 2021-10-18
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(lamp_oil_hook)
label(lamp_oil_bytes)
label(lamp_oil_base_ptr)
label(lamp_oil_inf_toggle)
registersymbol(lamp_oil_hook)
registersymbol(lamp_oil_bytes)
registersymbol(lamp_oil_base_ptr)
registersymbol(lamp_oil_inf_toggle)
aobScanModule(hook,GameAssembly.dll,f3 0f 5c f0 f3 0f 11 73 ? f3 0f 10 7b ? 48 8b 0d)

newmem:
lamp_oil_bytes:
  //subss xmm6,xmm0
  //movss [rbx+64],xmm6
  readMem(hook, 9)
  jmp returnhere

lamp_oil_base_ptr:
  dq 0

lamp_oil_inf_toggle:
  db 0

code:
  mov [lamp_oil_base_ptr], rbx

  cmp byte ptr [lamp_oil_inf_toggle], 0
  jz lamp_oil_bytes
  xorps xmm0, xmm0

  jmp lamp_oil_bytes

hook:
lamp_oil_hook:
  jmp code
  nop
  nop
  nop
  nop
  returnhere:



[DISABLE]
lamp_oil_hook:
  //db F3 0F 5C F0 F3 0F 11 73 64
  readMem(lamp_oil_bytes, 9)

unregistersymbol(lamp_oil_hook)
unregistersymbol(lamp_oil_bytes)
unregistersymbol(lamp_oil_base_ptr)
unregistersymbol(lamp_oil_inf_toggle)
dealloc(newmem)

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8636</ID>
                  <Description>"Infinite Lantern Oil"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
lamp_oil_inf_toggle:
  db 01

[DISABLE]
lamp_oil_inf_toggle:
  db 00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8647</ID>
                  <Description>"Lantern Oil"</Description>
                  <LastState Value="0.9977201819" RealAddress="232C9072924"/>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>lamp_oil_base_ptr</Address>
                  <Offsets>
                    <Offset>64</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8768</ID>
              <Description>"Flare"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState Activated="1"/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.95 83861 S
  Date   : 2021-10-26
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(flare_burn_hook)
label(flare_burn_bytes)
label(flare_burn_base_ptr)
label(flare_burn_toggle)
label(flare_burn_value)
registersymbol(flare_burn_hook)
registersymbol(flare_burn_bytes)
registersymbol(flare_burn_base_ptr)
registersymbol(flare_burn_toggle)
registersymbol(flare_burn_value)
aobScanModule(hook,GameAssembly.dll,33 d2 48 8b cf e8 ? ? ? ? 45 33 c0 0f 28 c8 48 8b cb e8 ? ? ? ? 33 d2)

newmem:
flare_burn_bytes:
  //xor edx,edx
  //mov rcx,rdi
  readMem(hook, 5)
  jmp returnhere

flare_burn_base_ptr:
  dq 0

flare_burn_toggle:
  db 0

flare_burn_value:
  dd 0

code:
  mov [flare_burn_base_ptr], rdi

  cmp byte ptr [flare_burn_toggle], 0
  jz flare_burn_bytes
  mov ecx, [flare_burn_value]
  mov [rdi+9C], ecx
  jmp flare_burn_bytes

hook:
flare_burn_hook:
  jmp code
  returnhere:



[DISABLE]
flare_burn_hook:
  //db 33 D2 48 8B CF
  readMem(flare_burn_bytes, 5)

unregistersymbol(flare_burn_hook)
unregistersymbol(flare_burn_bytes)
unregistersymbol(flare_burn_base_ptr)
unregistersymbol(flare_burn_toggle)
unregistersymbol(flare_burn_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+10005BC

"GameAssembly.dll"+1000590: 48 8B CF                 -  mov rcx,rdi
"GameAssembly.dll"+1000593: E8 58 1E 8C 01           -  call GameAssembly.dll+28C23F0
"GameAssembly.dll"+1000598: 84 C0                    -  test al,al
"GameAssembly.dll"+100059A: 0F 84 E0 02 00 00        -  je GameAssembly.dll+1000880
"GameAssembly.dll"+10005A0: 80 7B 1C 00              -  cmp byte ptr [rbx+1C],00
"GameAssembly.dll"+10005A4: 74 2E                    -  je GameAssembly.dll+10005D4
"GameAssembly.dll"+10005A6: 48 85 FF                 -  test rdi,rdi
"GameAssembly.dll"+10005A9: 0F 84 17 03 00 00        -  je GameAssembly.dll+10008C6
"GameAssembly.dll"+10005AF: 83 BF 94 00 00 00 01     -  cmp dword ptr [rdi+00000094],01
"GameAssembly.dll"+10005B6: 0F 85 E1 02 00 00        -  jne GameAssembly.dll+100089D
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+10005BC: 33 D2                    -  xor edx,edx
"GameAssembly.dll"+10005BE: 48 8B CF                 -  mov rcx,rdi
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+10005C1: E8 EA 3A 00 00           -  call GameAssembly.dll+10040B0
"GameAssembly.dll"+10005C6: 45 33 C0                 -  xor r8d,r8d
"GameAssembly.dll"+10005C9: 0F 28 C8                 -  movaps xmm1,xmm0
"GameAssembly.dll"+10005CC: 48 8B CB                 -  mov rcx,rbx
"GameAssembly.dll"+10005CF: E8 4C 03 00 00           -  call GameAssembly.dll+1000920
"GameAssembly.dll"+10005D4: 33 D2                    -  xor edx,edx
"GameAssembly.dll"+10005D6: 48 8B CB                 -  mov rcx,rbx
"GameAssembly.dll"+10005D9: E8 12 04 00 00           -  call GameAssembly.dll+10009F0
"GameAssembly.dll"+10005DE: F3 0F 10 7B 18           -  movss xmm7,[rbx+18]
"GameAssembly.dll"+10005E3: 48 8B 0D CE 7B 4C 03     -  mov rcx,[GameAssembly.dll+44C81B8]
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8772</ID>
                  <Description>"Infinite Flare Burn Time"</Description>
                  <LastState Activated="1"/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
flare_burn_toggle:
  db 01

[DISABLE]
flare_burn_toggle:
  db 00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8773</ID>
                  <Description>"Flare Burn Time"</Description>
                  <LastState Value="0" RealAddress="23251C6ACFC"/>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>flare_burn_base_ptr</Address>
                  <Offsets>
                    <Offset>9C</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8777</ID>
              <Description>"Torch"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.95 83861 S
  Date   : 2021-10-26
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(torch_burn_hook)
label(torch_burn_bytes)
label(torch_burn_base_ptr)
label(torch_burn_toggle)
label(torch_burn_value)
registersymbol(torch_burn_hook)
registersymbol(torch_burn_bytes)
registersymbol(torch_burn_base_ptr)
registersymbol(torch_burn_toggle)
registersymbol(torch_burn_value)
aobScanModule(hook,GameAssembly.dll,f3 0f 58 93 ? ? ? ? f3 0f 11 93 ? ? ? ? 33 d2)

newmem:
torch_burn_bytes:
  //addss xmm2,dword ptr [rbx+000000AC]
  readMem(hook, 8)
  jmp returnhere

torch_burn_base_ptr:
  dq 0

torch_burn_toggle:
  db 0

torch_burn_value:
  dd 0

code:
  mov [torch_burn_base_ptr], rbx

  cmp byte ptr [torch_burn_toggle], 0
  jz torch_burn_bytes
  mov dword ptr [rbx+AC], 0
  jmp returnhere

hook:
torch_burn_hook:
  jmp code
  nop
  nop
  nop
  returnhere:



[DISABLE]
torch_burn_hook:
  //db F3 0F 58 93 AC 00 00 00
  readMem(torch_burn_bytes, 8)

unregistersymbol(torch_burn_hook)
unregistersymbol(torch_burn_bytes)
unregistersymbol(torch_burn_base_ptr)
unregistersymbol(torch_burn_toggle)
unregistersymbol(torch_burn_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+1531FE2

"GameAssembly.dll"+1531FAC: 48 85 FF                    -  test rdi,rdi
"GameAssembly.dll"+1531FAF: 0F 84 30 04 00 00           -  je GameAssembly.dll+15323E5
"GameAssembly.dll"+1531FB5: 48 8B 87 80 00 00 00        -  mov rax,[rdi+00000080]
"GameAssembly.dll"+1531FBC: 48 85 C0                    -  test rax,rax
"GameAssembly.dll"+1531FBF: 0F 84 1A 04 00 00           -  je GameAssembly.dll+15323DF
"GameAssembly.dll"+1531FC5: F3 0F 10 88 90 02 00 00     -  movss xmm1,[rax+00000290]
"GameAssembly.dll"+1531FCD: F3 0F 59 48 78              -  mulss xmm1,[rax+78]
"GameAssembly.dll"+1531FD2: F3 0F 10 15 F6 09 47 02     -  movss xmm2,[GameAssembly.dll+39A29D0]
"GameAssembly.dll"+1531FDA: F3 0F 5E D1                 -  divss xmm2,xmm1
"GameAssembly.dll"+1531FDE: F3 0F 59 D0                 -  mulss xmm2,xmm0
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+1531FE2: F3 0F 58 93 AC 00 00 00     -  addss xmm2,dword ptr [rbx+000000AC]
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+1531FEA: F3 0F 11 93 AC 00 00 00     -  movss [rbx+000000AC],xmm2
"GameAssembly.dll"+1531FF2: 33 D2                       -  xor edx,edx
"GameAssembly.dll"+1531FF4: 48 8B CB                    -  mov rcx,rbx
"GameAssembly.dll"+1531FF7: E8 24 45 00 00              -  call GameAssembly.dll+1536520
"GameAssembly.dll"+1531FFC: 48 8B F8                    -  mov rdi,rax
"GameAssembly.dll"+1531FFF: 48 85 C0                    -  test rax,rax
"GameAssembly.dll"+1532002: 0F 84 4C 04 00 00           -  je GameAssembly.dll+1532454
"GameAssembly.dll"+1532008: F3 44 0F 10 90 04 03 00 00  -  movss xmm10,[rax+00000304]
"GameAssembly.dll"+1532011: F3 0F 10 B3 AC 00 00 00     -  movss xmm6,[rbx+000000AC]
"GameAssembly.dll"+1532019: 33 D2                       -  xor edx,edx
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8778</ID>
                  <Description>"Infinite Torch Burn Time"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
torch_burn_toggle:
  db 01

[DISABLE]
torch_burn_toggle:
  db 00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8779</ID>
                  <Description>"Torch Burn Time"</Description>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>torch_burn_base_ptr</Address>
                  <Offsets>
                    <Offset>AC</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>8769</ID>
          <Description>"Navigation"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="1" RealAddress="00000000"/>
          <Color>C08000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8850</ID>
              <Description>"Map"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState Activated="1"/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-10-30
  Author : sub1to

  https://github.com/Perfare/Il2CppDumper

  // Namespace:
  [FlagsAttribute] // RVA: 0x12A50 Offset: 0x11E50 VA: 0x7FFB0B9E2A50
  private enum Panel_Map.ResetOpts // TypeDefIndex: 8834
  {
	  // Fields
	  public int value__; // 0x0
	  public const Panel_Map.ResetOpts None = 0;
	  public const Panel_Map.ResetOpts Zoomed = 1;
	  public const Panel_Map.ResetOpts CenterOnPlayer = 2;
	  public const Panel_Map.ResetOpts ShowPlayer = 4;

  public enum SurveyType // TypeDefIndex: 8825
  {
	  // Fields
	  public int value__; // 0x0
	  public const SurveyType Charcoal = 0;
	  public const SurveyType RockCache = 1;
	  public const SurveyType SprayPaint = 2;


  survey range per SurveyType:
  0:     rcx+F0
  1:     rcx+F4
  2:     rcx+F8
}

[ENABLE]
alloc(newmem,$400,GameAssembly.dll)
label(returnhere)
label(code)
label(code_survey)
label(code_resetopt)
label(rlock)
label(panel_map_reset_to_normal_hook)
label(panel_map_reset_to_normal_bytes)
label(panel_map_base_ptr)
label(panel_map_auto_survey_toggle)
label(panel_map_auto_survey_range)
label(panel_map_show_player_toggle)
registersymbol(panel_map_reset_to_normal_hook)
registersymbol(panel_map_reset_to_normal_bytes)
registersymbol(panel_map_base_ptr)
registersymbol(panel_map_auto_survey_toggle)
registersymbol(panel_map_auto_survey_range)
registersymbol(panel_map_show_player_toggle)

//  RVA: 0x109E300 Offset: 0x109D300 VA: 0x7FFB0CA6E300
//	private void ResetToNormal(Panel_Map.ResetOpts opts) { }
aobScanModule(hook,GameAssembly.dll,48 8b c4 55 57 41 54 41 56 41 57 48 8d 68 ? 48 81 ec ? ? ? ? 48 c7 45 ? ? ? ? ? 48 89 58 ? 48 89 70 ? 0f 29 70 ? 0f 29 78 ? 44 8b fa)

//	RVA: 0x108D420 Offset: 0x108C420 VA: 0x7FFB0CA5D420
//	public void DoDetailSurvey(SurveyType surveyType = 0) { }
aobScanModule(panel_map_do_detail_survey,GameAssembly.dll,4c 8b dc 57 48 81 ec 90 00 00 00 49 c7 43 A8 FE FF FF FF 49 89 5B 08 49 89 6B 10 49 89 73 18 41 0F 29 73 E8 8B F2)

newmem:
panel_map_reset_to_normal_bytes:
  //mov rax,rsp
  //push rbp
  //push rdi
  readMem(hook, 5)
  jmp returnhere

panel_map_base_ptr:
  dq 0

panel_map_auto_survey_toggle:
  db 0

panel_map_auto_survey_range:
  dd (float)9999

panel_map_show_player_toggle:
  db 0

rlock:
  db 0

code:
  mov [panel_map_base_ptr], rcx

code_survey:
  cmp byte ptr [panel_map_auto_survey_toggle], 0
  jz code_resetopt

  //recursion lock
  cmp byte ptr [rlock], 0
  jnz code_resetopt
  mov byte ptr [rlock], 1

  //save rcx, rdx and [rcx+F0]
  lea rsp, [rsp-48]
  mov [rsp+30], rcx
  mov [rsp+28], rdx
  mov edx, [rcx+F0]
  mov [rsp+38], edx

  //survey the map
  mov edx, [panel_map_auto_survey_range]
  mov dword ptr [rcx+F0], edx
  xor rdx, rdx
  xor r8, r8
  call panel_map_do_detail_survey

  //restore rcx, rdx and [rcx+F0]
  mov rcx, [rsp+30]
  mov edx, [rsp+38]
  mov [rcx+F0], edx
  mov rdx, [rsp+28]
  lea rsp, [rsp+48]

  //unlock
  mov byte ptr [rlock], 0

code_resetopt:
  cmp byte ptr [panel_map_show_player_toggle], 0
  jz panel_map_reset_to_normal_bytes
  or edx, 6

  jmp panel_map_reset_to_normal_bytes

hook:
panel_map_reset_to_normal_hook:
  jmp code
  returnhere:



[DISABLE]
panel_map_reset_to_normal_hook:
  //db 48 8B C4 55 57
  readMem(panel_map_reset_to_normal_bytes, 5)

unregistersymbol(panel_map_reset_to_normal_hook)
unregistersymbol(panel_map_reset_to_normal_bytes)
unregistersymbol(panel_map_base_ptr)
unregistersymbol(panel_map_auto_survey_toggle)
unregistersymbol(panel_map_auto_survey_range)
unregistersymbol(panel_map_show_player_toggle)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+109E300

"GameAssembly.dll"+109E2EE: CC                       -  int 3
"GameAssembly.dll"+109E2EF: E8 0C C1 02 FF           -  call GameAssembly.dll+CA400
"GameAssembly.dll"+109E2F4: CC                       -  int 3
"GameAssembly.dll"+109E2F5: E8 06 C1 02 FF           -  call GameAssembly.dll+CA400
"GameAssembly.dll"+109E2FA: CC                       -  int 3
"GameAssembly.dll"+109E2FB: CC                       -  int 3
"GameAssembly.dll"+109E2FC: CC                       -  int 3
"GameAssembly.dll"+109E2FD: CC                       -  int 3
"GameAssembly.dll"+109E2FE: CC                       -  int 3
"GameAssembly.dll"+109E2FF: CC                       -  int 3
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+109E300: 48 8B C4                 -  mov rax,rsp
"GameAssembly.dll"+109E303: 55                       -  push rbp
"GameAssembly.dll"+109E304: 57                       -  push rdi
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+109E305: 41 54                    -  push r12
"GameAssembly.dll"+109E307: 41 56                    -  push r14
"GameAssembly.dll"+109E309: 41 57                    -  push r15
"GameAssembly.dll"+109E30B: 48 8D 68 A1              -  lea rbp,[rax-5F]
"GameAssembly.dll"+109E30F: 48 81 EC A0 00 00 00     -  sub rsp,000000A0
"GameAssembly.dll"+109E316: 48 C7 45 C7 FE FF FF FF  -  mov qword ptr [rbp-39],FFFFFFFE
"GameAssembly.dll"+109E31E: 48 89 58 10              -  mov [rax+10],rbx
"GameAssembly.dll"+109E322: 48 89 70 18              -  mov [rax+18],rsi
"GameAssembly.dll"+109E326: 0F 29 70 C8              -  movaps [rax-38],xmm6
"GameAssembly.dll"+109E32A: 0F 29 78 B8              -  movaps [rax-48],xmm7
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8852</ID>
                  <Description>"Auto Survey (when map is opened)"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
panel_map_auto_survey_toggle:
  db 01

[DISABLE]
panel_map_auto_survey_toggle:
  db 00
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8859</ID>
                      <Description>"Range"</Description>
                      <LastState Value="9999" RealAddress="7FFF35800013"/>
                      <Color>800080</Color>
                      <VariableType>Float</VariableType>
                      <Address>panel_map_auto_survey_range</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8853</ID>
                  <Description>"Show Player Arrow"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
panel_map_show_player_toggle:
  db 01

[DISABLE]
panel_map_show_player_toggle:
  db 00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8854</ID>
                  <Description>"Base"</Description>
                  <LastState Value="0000023263F3CA80" RealAddress="7FFF3580000A"/>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>FF8080</Color>
                  <VariableType>8 Bytes</VariableType>
                  <Address>panel_map_base_ptr</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>8857</ID>
                  <Description>"Charcoal Survey Range"</Description>
                  <LastState Value="150" RealAddress="23263F3CB70"/>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>panel_map_base_ptr</Address>
                  <Offsets>
                    <Offset>F0</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8855</ID>
                  <Description>"Rock Cache Survey Range"</Description>
                  <LastState Value="5" RealAddress="23263F3CB74"/>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>panel_map_base_ptr</Address>
                  <Offsets>
                    <Offset>F4</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8856</ID>
                  <Description>"Spray Paint Survey Range"</Description>
                  <LastState Value="5" RealAddress="23263F3CB78"/>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>panel_map_base_ptr</Address>
                  <Offsets>
                    <Offset>F8</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8827</ID>
              <Description>"No Rope Required To Deploy A Rope (Requires at least one stackable item in inventory)"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-10-29
  Author : sub1to

  This script substitutes a mountaineering rope with any stackable item
  and increments the stack amount by 1, so nothing is lost.
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(item_loop_returnhere)
label(finalize_returnhere)
label(code_item_loop)
label(code_finalize)
label(rope_deploy_hook_item_loop)
label(rope_deploy_bytes_item_loop)
label(rope_deploy_hook_finalize)
label(rope_deploy_bytes_finalize)
registersymbol(rope_deploy_hook_item_loop)
registersymbol(rope_deploy_bytes_item_loop)
registersymbol(rope_deploy_hook_finalize)
registersymbol(rope_deploy_bytes_finalize)
aobScanModule(hook,GameAssembly.dll,48 8B 5C 24 28 48 8B CB E8 21)
aobScanModule(hook2,GameAssembly.dll,48 8B CF FF D0 48 85 F6 0F 84 A6)

newmem:
rope_deploy_bytes_item_loop:
  // mov rbx,[rsp+28]
  readMem(hook, 5)
  jmp code_item_loop

code_item_loop:
  // +230] +18 = stack amount
  // rdi = return value
  mov rcx, [rbx+230]
  test rcx, rcx
  jz item_loop_returnhere
  mov rdi, rbx
  jmp item_loop_returnhere



// make sure we don't lose 1 item.. increment the count
rope_deploy_bytes_finalize:
  // mov rcx,rdi
  // call rax
  readMem(hook2, 5)
  jmp finalize_returnhere

code_finalize:
  // +230] +18 = stack amount
  mov rdx, [rdi+230]
  test rdx, rdx
  jz rope_deploy_bytes_finalize
  inc dword ptr [rdx+18]
  jmp rope_deploy_bytes_finalize





hook:
rope_deploy_hook_item_loop:
  jmp rope_deploy_bytes_item_loop
  item_loop_returnhere:

hook2:
rope_deploy_hook_finalize:
  jmp code_finalize
  finalize_returnhere:


[DISABLE]
rope_deploy_hook_item_loop:
  //48 8B 5C 24 28
  readMem(rope_deploy_bytes_item_loop, 5)

rope_deploy_hook_finalize:
  //48 8B CF FF D0
  readMem(rope_deploy_bytes_finalize, 5)

unregistersymbol(rope_deploy_hook_item_loop)
unregistersymbol(rope_deploy_bytes_item_loop)
unregistersymbol(rope_deploy_hook_finalize)
unregistersymbol(rope_deploy_bytes_finalize)
dealloc(newmem)

{
hook / rope_deploy_hook_item_loop
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+176AF72

"GameAssembly.dll"+176AF44: 49 8B 47 10              -  mov rax,[r15+10]
"GameAssembly.dll"+176AF48: 42 0F 10 04 30           -  movups xmm0,[rax+r14]
"GameAssembly.dll"+176AF4D: 0F 11 44 24 28           -  movups [rsp+28],xmm0
"GameAssembly.dll"+176AF52: 48 8B 0D C7 4B D7 02     -  mov rcx,[GameAssembly.dll+44DFB20]
"GameAssembly.dll"+176AF59: F6 81 2F 01 00 00 02     -  test byte ptr [rcx+0000012F],02
"GameAssembly.dll"+176AF60: 74 0E                    -  je GameAssembly.dll+176AF70
"GameAssembly.dll"+176AF62: 83 B9 E0 00 00 00 00     -  cmp dword ptr [rcx+000000E0],00
"GameAssembly.dll"+176AF69: 75 05                    -  jne GameAssembly.dll+176AF70
"GameAssembly.dll"+176AF6B: E8 60 07 92 FE           -  call GameAssembly.dll+8B6D0
"GameAssembly.dll"+176AF70: 33 D2                    -  xor edx,edx
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+176AF72: 48 8B 5C 24 28           -  mov rbx,[rsp+28]
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+176AF77: 48 8B CB                 -  mov rcx,rbx
"GameAssembly.dll"+176AF7A: E8 21 8F 0D 01           -  call GameAssembly.dll+2843EA0
"GameAssembly.dll"+176AF7F: 84 C0                    -  test al,al
"GameAssembly.dll"+176AF81: 0F 84 C0 00 00 00        -  je GameAssembly.dll+176B047
"GameAssembly.dll"+176AF87: 48 85 DB                 -  test rbx,rbx
"GameAssembly.dll"+176AF8A: 0F 84 FF 00 00 00        -  je GameAssembly.dll+176B08F
"GameAssembly.dll"+176AF90: 48 8B AB 00 02 00 00     -  mov rbp,[rbx+00000200]
"GameAssembly.dll"+176AF97: 48 8B 0D 82 4B D7 02     -  mov rcx,[GameAssembly.dll+44DFB20]
"GameAssembly.dll"+176AF9E: F6 81 2F 01 00 00 02     -  test byte ptr [rcx+0000012F],02
"GameAssembly.dll"+176AFA5: 74 0E                    -  je GameAssembly.dll+176AFB5
}

{
hook2 / rope_deploy_hook_finalize
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+110CC16

"GameAssembly.dll"+110CBE5: 48 85 FF              -  test rdi,rdi
"GameAssembly.dll"+110CBE8: 0F 84 E2 00 00 00     -  je GameAssembly.dll+110CCD0
"GameAssembly.dll"+110CBEE: 48 8B 05 7B B7 35 03  -  mov rax,[GameAssembly.dll+4468370]
"GameAssembly.dll"+110CBF5: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+110CBF8: 75 1C                 -  jne GameAssembly.dll+110CC16
"GameAssembly.dll"+110CBFA: 48 8D 0D 47 B6 86 02  -  lea rcx,[GameAssembly.dll+3978248]
"GameAssembly.dll"+110CC01: E8 CA 08 F7 FE        -  call GameAssembly.dll+7D4D0
"GameAssembly.dll"+110CC06: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+110CC09: 0F 84 A4 00 00 00     -  je GameAssembly.dll+110CCB3
"GameAssembly.dll"+110CC0F: 48 89 05 5A B7 35 03  -  mov [GameAssembly.dll+4468370],rax
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+110CC16: 48 8B CF              -  mov rcx,rdi
"GameAssembly.dll"+110CC19: FF D0                 -  call rax
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+110CC1B: 48 85 F6              -  test rsi,rsi
"GameAssembly.dll"+110CC1E: 0F 84 A6 00 00 00     -  je GameAssembly.dll+110CCCA
"GameAssembly.dll"+110CC24: 45 33 C0              -  xor r8d,r8d
"GameAssembly.dll"+110CC27: 48 8B D0              -  mov rdx,rax
"GameAssembly.dll"+110CC2A: 48 8B CE              -  mov rcx,rsi
"GameAssembly.dll"+110CC2D: E8 7E 26 CD FF        -  call GameAssembly.dll+DDF2B0
"GameAssembly.dll"+110CC32: 45 33 C9              -  xor r9d,r9d
"GameAssembly.dll"+110CC35: 41 B0 01              -  mov r8l,01
"GameAssembly.dll"+110CC38: 41 0F B6 D0           -  movzx edx,r8l
"GameAssembly.dll"+110CC3C: 48 8B CB              -  mov rcx,rbx
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>8872</ID>
              <Description>"Ice Never Cracks"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-10-30
  Author : sub1to
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(fall_in_water_hook)
label(fall_in_water_bytes)
registersymbol(fall_in_water_hook)
registersymbol(fall_in_water_bytes)

//  class: IceCrackingTrigger
//  RVA: 0x10F6580 Offset: 0x10F5580 VA: 0x7FFB0CAC6580
//  public void FallInWater() { }
aobScanModule(hook,GameAssembly.dll,4c 8b dc 55 56 57 48 81 ec ? ? ? ? 48 c7 44 24 ? ? ? ? ? 49 89 5b ? 41 0f 29 73 ? 41 0f 29 7b ? 48 8b f1 33 ed 40 38 2d ? ? ? ? 75 ? 48 8b 05 ? ? ? ? 48 63 90 ? ? ? ? 48 8b 05 ? ? ? ? 8b 8c 02 ? ? ? ? 49 89 6b ? 49 89 6b ? 49 89 6b ? 4d 8d 43 ? 8b 94 02 ? ? ? ? e8 ? ? ? ? 90 33 c9 ff 15 ? ? ? ? 90 c6 05 ? ? ? ? ? 48 8b 05)

newmem:
fall_in_water_bytes:
  //mov r11,rsp
  //push rbp
  //push rsi
  readMem(hook, 5)
  jmp returnhere

code:
  xor rax, rax
  ret

hook:
fall_in_water_hook:
  jmp code
  returnhere:



[DISABLE]
fall_in_water_hook:
  //4C 8B DC 55 56
  readMem(fall_in_water_bytes, 5)

unregistersymbol(fall_in_water_hook)
unregistersymbol(fall_in_water_bytes)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+10F6580

"GameAssembly.dll"+10F6563: 48 8B C8                    -  mov rcx,rax
"GameAssembly.dll"+10F6566: 33 D2                       -  xor edx,edx
"GameAssembly.dll"+10F6568: E8 83 3E FD FE              -  call GameAssembly.dll+CA3F0
"GameAssembly.dll"+10F656D: CC                          -  int 3
"GameAssembly.dll"+10F656E: E8 8D 3E FD FE              -  call GameAssembly.dll+CA400
"GameAssembly.dll"+10F6573: CC                          -  int 3
"GameAssembly.dll"+10F6574: E8 87 3E FD FE              -  call GameAssembly.dll+CA400
"GameAssembly.dll"+10F6579: CC                          -  int 3
"GameAssembly.dll"+10F657A: E8 81 3E FD FE              -  call GameAssembly.dll+CA400
"GameAssembly.dll"+10F657F: CC                          -  int 3
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+10F6580: 4C 8B DC                    -  mov r11,rsp
"GameAssembly.dll"+10F6583: 55                          -  push rbp
"GameAssembly.dll"+10F6584: 56                          -  push rsi
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+10F6585: 57                          -  push rdi
"GameAssembly.dll"+10F6586: 48 81 EC B0 00 00 00        -  sub rsp,000000B0
"GameAssembly.dll"+10F658D: 48 C7 44 24 30 FE FF FF FF  -  mov qword ptr [rsp+30],FFFFFFFE
"GameAssembly.dll"+10F6596: 49 89 5B 08                 -  mov [r11+08],rbx
"GameAssembly.dll"+10F659A: 41 0F 29 73 D8              -  movaps [r11-28],xmm6
"GameAssembly.dll"+10F659F: 41 0F 29 7B C8              -  movaps [r11-38],xmm7
"GameAssembly.dll"+10F65A4: 48 8B F1                    -  mov rsi,rcx
"GameAssembly.dll"+10F65A7: 33 ED                       -  xor ebp,ebp
"GameAssembly.dll"+10F65A9: 40 38 2D 95 74 35 03        -  cmp [GameAssembly.dll+444DA45],bpl
"GameAssembly.dll"+10F65B0: 75 49                       -  jne GameAssembly.dll+10F65FB
}
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>8831</ID>
          <Description>"Guns"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="1" RealAddress="00000000"/>
          <Color>C08000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8594</ID>
              <Description>"Infinite Ammo"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-10-29
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(reload_dec_hook)
label(reload_dec_bytes)
registersymbol(reload_dec_hook)
registersymbol(reload_dec_bytes)
label(reload_batch_hook)
label(reload_batch_bytes)
registersymbol(reload_batch_hook)
registersymbol(reload_batch_bytes)
label(reload_arrow_hook)
label(reload_arrow_bytes)
registersymbol(reload_arrow_hook)
registersymbol(reload_arrow_bytes)
aobscanmodule(hook1,GameAssembly.dll,ff 48 ? 33 d2 48 8b cf)
aobscanmodule(hook2,GameAssembly.dll,29 71 ? 45 85 ed)
aobscanmodule(hook3,GameAssembly.dll,FF 48 18 48 8B 4F 58)



newmem:
reload_dec_bytes:
  readMem(hook1, 3)

reload_batch_bytes:
  readMem(hook2, 3)

reload_arrow_bytes:
  readMem(hook3, 3)


hook1:
reload_dec_hook:
  nop
  nop
  nop

hook2:
reload_batch_hook:
  nop
  nop
  nop

hook3:
reload_arrow_hook:
  nop
  nop
  nop


[DISABLE]
reload_dec_hook:
  //db FF 48 18
  readMem(reload_dec_bytes, 3)

reload_batch_hook:
  //db 29 71 18
  readMem(reload_batch_bytes, 3)

reload_arrow_hook:
  //db FF 48 18
  readMem(reload_arrow_bytes, 3)

unregistersymbol(reload_dec_hook)
unregistersymbol(reload_dec_bytes)
unregistersymbol(reload_batch_hook)
unregistersymbol(reload_batch_bytes)
unregistersymbol(reload_arrow_hook)
unregistersymbol(reload_arrow_bytes)
dealloc(newmem)

{
hook1 / reload_dec_hook
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+BB15BD

"GameAssembly.dll"+BB15A6: 41 5C                    -  pop r12
"GameAssembly.dll"+BB15A8: 5F                       -  pop rdi
"GameAssembly.dll"+BB15A9: 5E                       -  pop rsi
"GameAssembly.dll"+BB15AA: 5D                       -  pop rbp
"GameAssembly.dll"+BB15AB: C3                       -  ret
"GameAssembly.dll"+BB15AC: 48 85 F6                 -  test rsi,rsi
"GameAssembly.dll"+BB15AF: 74 49                    -  je GameAssembly.dll+BB15FA
"GameAssembly.dll"+BB15B1: 48 8B 86 20 02 00 00     -  mov rax,[rsi+00000220]
"GameAssembly.dll"+BB15B8: 48 85 C0                 -  test rax,rax
"GameAssembly.dll"+BB15BB: 74 37                    -  je GameAssembly.dll+BB15F4
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+BB15BD: FF 48 18                 -  dec [rax+18]
"GameAssembly.dll"+BB15C0: 33 D2                    -  xor edx,edx
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+BB15C2: 48 8B CE                 -  mov rcx,rsi
"GameAssembly.dll"+BB15C5: E8 C6 EB FB FF           -  call GameAssembly.dll+B70190
"GameAssembly.dll"+BB15CA: EB C9                    -  jmp GameAssembly.dll+BB1595
"GameAssembly.dll"+BB15CC: E8 1F 19 6E FF           -  call GameAssembly.dll+292EF0
"GameAssembly.dll"+BB15D1: 90                       -  nop
"GameAssembly.dll"+BB15D2: E8 19 19 6E FF           -  call GameAssembly.dll+292EF0
"GameAssembly.dll"+BB15D7: 90                       -  nop
"GameAssembly.dll"+BB15D8: E8 13 19 6E FF           -  call GameAssembly.dll+292EF0
"GameAssembly.dll"+BB15DD: E8 0E 19 6E FF           -  call GameAssembly.dll+292EF0
"GameAssembly.dll"+BB15E2: E8 09 19 6E FF           -  call GameAssembly.dll+292EF0
}

{
hook2 / reload_batch_hook
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+BB1DFB

"GameAssembly.dll"+BB1DD3: 44 89 7C 91 20        -  mov [rcx+rdx*4+20],r15d
"GameAssembly.dll"+BB1DD8: FF 43 1C              -  inc [rbx+1C]
"GameAssembly.dll"+BB1DDB: FF C7                 -  inc edi
"GameAssembly.dll"+BB1DDD: EB 91                 -  jmp GameAssembly.dll+BB1D70
"GameAssembly.dll"+BB1DDF: 44 2B EE              -  sub r13d,esi
"GameAssembly.dll"+BB1DE2: 4D 85 F6              -  test r14,r14
"GameAssembly.dll"+BB1DE5: 0F 84 F3 00 00 00     -  je GameAssembly.dll+BB1EDE
"GameAssembly.dll"+BB1DEB: 49 8B 8E 20 02 00 00  -  mov rcx,[r14+00000220]
"GameAssembly.dll"+BB1DF2: 48 85 C9              -  test rcx,rcx
"GameAssembly.dll"+BB1DF5: 0F 84 DE 00 00 00     -  je GameAssembly.dll+BB1ED9
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+BB1DFB: 29 71 18              -  sub [rcx+18],esi
"GameAssembly.dll"+BB1DFE: 45 85 ED              -  test r13d,r13d
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+BB1E01: 0F 85 F9 FE FF FF     -  jne GameAssembly.dll+BB1D00
"GameAssembly.dll"+BB1E07: 41 FF C4              -  inc r12d
"GameAssembly.dll"+BB1E0A: 44 89 A5 C0 00 00 00  -  mov [rbp+000000C0],r12d
"GameAssembly.dll"+BB1E11: 49 63 C4              -  movsxd  rax,r12d
"GameAssembly.dll"+BB1E14: 48 8B 7D 10           -  mov rdi,[rbp+10]
"GameAssembly.dll"+BB1E18: C7 04 87 2D 01 00 00  -  mov [rdi+rax*4],0000012D
"GameAssembly.dll"+BB1E1F: 48 8B 4D 00           -  mov rcx,[rbp+00]
"GameAssembly.dll"+BB1E23: EB 31                 -  jmp GameAssembly.dll+BB1E56
"GameAssembly.dll"+BB1E25: 41 FF C4              -  inc r12d
"GameAssembly.dll"+BB1E28: 44 89 A5 C0 00 00 00  -  mov [rbp+000000C0],r12d
}

{
hook3 / reload_arrow_hook
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+57868A

"GameAssembly.dll"+57865D: 48 85 C9              -  test rcx,rcx
"GameAssembly.dll"+578660: 0F 84 D8 03 00 00     -  je GameAssembly.dll+578A3E
"GameAssembly.dll"+578666: 33 D2                 -  xor edx,edx
"GameAssembly.dll"+578668: E8 D3 FF 7B 00        -  call GameAssembly.dll+D38640
"GameAssembly.dll"+57866D: 48 8B 47 58           -  mov rax,[rdi+58]
"GameAssembly.dll"+578671: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+578674: 0F 84 BE 03 00 00     -  je GameAssembly.dll+578A38
"GameAssembly.dll"+57867A: 48 8B 80 20 02 00 00  -  mov rax,[rax+00000220]
"GameAssembly.dll"+578681: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+578684: 0F 84 A8 03 00 00     -  je GameAssembly.dll+578A32
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+57868A: FF 48 18              -  dec [rax+18]
"GameAssembly.dll"+57868D: 48 8B 4F 58           -  mov rcx,[rdi+58]
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+578691: 48 85 C9              -  test rcx,rcx
"GameAssembly.dll"+578694: 0F 84 92 03 00 00     -  je GameAssembly.dll+578A2C
"GameAssembly.dll"+57869A: 48 8B 81 20 02 00 00  -  mov rax,[rcx+00000220]
"GameAssembly.dll"+5786A1: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+5786A4: 0F 84 7C 03 00 00     -  je GameAssembly.dll+578A26
"GameAssembly.dll"+5786AA: 83 78 18 00           -  cmp dword ptr [rax+18],00
"GameAssembly.dll"+5786AE: 74 73                 -  je GameAssembly.dll+578723
"GameAssembly.dll"+5786B0: 48 85 C9              -  test rcx,rcx
"GameAssembly.dll"+5786B3: 0F 84 49 03 00 00     -  je GameAssembly.dll+578A02
"GameAssembly.dll"+5786B9: 33 D2                 -  xor edx,edx
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>8834</ID>
              <Description>"Aim Fatigue (Rifle)"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-10-29
  Author : sub1to
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(aim_fatigue_hook)
label(aim_fatigue_bytes)
label(aim_fatigue_base_ptr)
label(aim_fatigue_toggle)
registersymbol(aim_fatigue_hook)
registersymbol(aim_fatigue_bytes)
registersymbol(aim_fatigue_base_ptr)
registersymbol(aim_fatigue_toggle)
aobScanModule(hook,GameAssembly.dll,f3 41 0f 58 f9 f3 0f 11 bb)

newmem:
aim_fatigue_bytes:
  //addss xmm7,xmm9
  readMem(hook, 5)
  jmp returnhere

aim_fatigue_base_ptr:
  dq 0

aim_fatigue_toggle:
  db 0

code:
  mov [aim_fatigue_base_ptr], rbx

  cmp byte ptr [aim_fatigue_toggle], 0
  jz aim_fatigue_bytes
  xorps xmm7, xmm7
  jmp returnhere

hook:
aim_fatigue_hook:
  jmp code
  returnhere:



[DISABLE]
aim_fatigue_hook:
  //F3 41 0F 58 F9
  readMem(aim_fatigue_bytes, 5)

unregistersymbol(aim_fatigue_hook)
unregistersymbol(aim_fatigue_bytes)
unregistersymbol(aim_fatigue_base_ptr)
unregistersymbol(aim_fatigue_toggle)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+7F3C68

"GameAssembly.dll"+7F3C40: F3 44 0F 11 83 F8 00 00 00  -  movss [rbx+000000F8],xmm8
"GameAssembly.dll"+7F3C49: 44 0F 28 C8                 -  movaps xmm9,xmm0
"GameAssembly.dll"+7F3C4D: 33 C9                       -  xor ecx,ecx
"GameAssembly.dll"+7F3C4F: E8 1C E0 24 02              -  call GameAssembly.dll+2A41C70
"GameAssembly.dll"+7F3C54: 0F 28 F0                    -  movaps xmm6,xmm0
"GameAssembly.dll"+7F3C57: 33 D2                       -  xor edx,edx
"GameAssembly.dll"+7F3C59: 48 8B CB                    -  mov rcx,rbx
"GameAssembly.dll"+7F3C5C: E8 BF F8 FF FF              -  call GameAssembly.dll+7F3520
"GameAssembly.dll"+7F3C61: 0F 28 F8                    -  movaps xmm7,xmm0
"GameAssembly.dll"+7F3C64: F3 0F 59 FE                 -  mulss xmm7,xmm6
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+7F3C68: F3 41 0F 58 F9              -  addss xmm7,xmm9
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+7F3C6D: F3 0F 11 BB F8 00 00 00     -  movss [rbx+000000F8],xmm7
"GameAssembly.dll"+7F3C75: 48 8B 0D 8C 1D 46 03        -  mov rcx,[GameAssembly.dll+3C55A08]
"GameAssembly.dll"+7F3C7C: F6 81 27 01 00 00 02        -  test byte ptr [rcx+00000127],02
"GameAssembly.dll"+7F3C83: 74 0E                       -  je GameAssembly.dll+7F3C93
"GameAssembly.dll"+7F3C85: 83 B9 D8 00 00 00 00        -  cmp dword ptr [rcx+000000D8],00
"GameAssembly.dll"+7F3C8C: 75 05                       -  jne GameAssembly.dll+7F3C93
"GameAssembly.dll"+7F3C8E: E8 ED E2 A7 FF              -  call GameAssembly.dll+271F80
"GameAssembly.dll"+7F3C93: F3 0F 10 35 49 67 B4 02     -  movss xmm6,[GameAssembly.dll+333A3E4]
"GameAssembly.dll"+7F3C9B: 44 0F 2F C7                 -  comiss xmm8,xmm7
"GameAssembly.dll"+7F3C9F: 77 0A                       -  ja GameAssembly.dll+7F3CAB
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8835</ID>
                  <Description>"No Aim Fatigue"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
aim_fatigue_toggle:
  db 01

[DISABLE]
aim_fatigue_toggle:
  db 00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8836</ID>
                  <Description>"Aim Fatigue"</Description>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>aim_fatigue_base_ptr</Address>
                  <Offsets>
                    <Offset>F8</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8992</ID>
              <Description>"Aim Fatigue (Bow)"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-11-01
  Author : sub1to

  public class BowItem : MonoBehaviour // TypeDefIndex: 8295
	// Fields
	public string m_DrawAudio; // 0x18
	public string m_HoldAudio; // 0x20
	public string m_ReleaseAudio; // 0x28
	public string m_ArrowNockAudio; // 0x30
	public string m_GearArrowPrefabName; // 0x38
	[RangeAttribute] // RVA: 0x151200 Offset: 0x150600 VA: 0x7FFB0BB21200
	public float m_SwayValueZeroFatigue; // 0x40
	[RangeAttribute] // RVA: 0x151200 Offset: 0x150600 VA: 0x7FFB0BB21200
	public float m_SwayValueMaxFatigue; // 0x44
	[RangeAttribute] // RVA: 0x1835F0 Offset: 0x1829F0 VA: 0x7FFB0BB535F0
	[TooltipAttribute] // RVA: 0x1835F0 Offset: 0x1829F0 VA: 0x7FFB0BB535F0
	public float m_SwayIncreasePerSecond; // 0x48
	[RangeAttribute] // RVA: 0x183670 Offset: 0x182A70 VA: 0x7FFB0BB53670
	[TooltipAttribute] // RVA: 0x183670 Offset: 0x182A70 VA: 0x7FFB0BB53670
	public float m_SwayDecreasePerSecond; // 0x4C
	[TooltipAttribute] // RVA: 0x1836F0 Offset: 0x182AF0 VA: 0x7FFB0BB536F0
	[RangeAttribute] // RVA: 0x1836F0 Offset: 0x182AF0 VA: 0x7FFB0BB536F0
	public float m_SwayEnergyBoostBonus; // 0x50
	[TooltipAttribute] // RVA: 0x1836F0 Offset: 0x182AF0 VA: 0x7FFB0BB536F0
	[RangeAttribute] // RVA: 0x1836F0 Offset: 0x182AF0 VA: 0x7FFB0BB536F0
	public float m_SwayEnergyStimBonus; // 0x54
	private GearItem m_GearArrow; // 0x58
	private GearItem m_GearBow; // 0x60
	private BowState m_BowState; // 0x68
	private uint m_HoldAudioInstance; // 0x6C
	private float m_SwayValue; // 0x70
	public float m_AimingSwayDropThresholdPercent; // 0x74
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(aim_fatigue_bow_hook)
label(aim_fatigue_bow_bytes)
label(aim_fatigue_bow_base_ptr)
label(aim_fatigue_bow_toggle)
registersymbol(aim_fatigue_bow_hook)
registersymbol(aim_fatigue_bow_bytes)
registersymbol(aim_fatigue_bow_base_ptr)
registersymbol(aim_fatigue_bow_toggle)
aobScanModule(hook,GameAssembly.dll,f3 41 0f 58 f9 f3 0f 11 7b)

newmem:
aim_fatigue_bow_bytes:
  //addss xmm7,xmm9
  readMem(hook, 5)
  jmp returnhere

aim_fatigue_bow_base_ptr:
  dq 0

aim_fatigue_bow_toggle:
  db 0

code:
  mov [aim_fatigue_bow_base_ptr], rbx

  cmp byte ptr [aim_fatigue_bow_toggle], 0
  jz aim_fatigue_bow_bytes
  xorps xmm7, xmm7
  jmp returnhere

hook:
aim_fatigue_bow_hook:
  jmp code
  returnhere:



[DISABLE]
aim_fatigue_bow_hook:
  //F3 41 0F 58 F9
  readMem(aim_fatigue_bow_bytes, 5)

unregistersymbol(aim_fatigue_bow_hook)
unregistersymbol(aim_fatigue_bow_bytes)
unregistersymbol(aim_fatigue_bow_base_ptr)
unregistersymbol(aim_fatigue_bow_toggle)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+128F9B8

GameAssembly.dll+128F992: 48 85 C0                 - test rax,rax
GameAssembly.dll+128F995: 0F 84 57 01 00 00        - je GameAssembly.dll+128FAF2
GameAssembly.dll+128F99B: 48 89 05 66 85 1D 03     - mov [GameAssembly.dll+4467F08],rax
GameAssembly.dll+128F9A2: FF D0                    - call rax
GameAssembly.dll+128F9A4: 0F 28 F0                 - movaps xmm6,xmm0
GameAssembly.dll+128F9A7: 33 D2                    - xor edx,edx
GameAssembly.dll+128F9A9: 48 8B CB                 - mov rcx,rbx
GameAssembly.dll+128F9AC: E8 9F F7 FF FF           - call GameAssembly.dll+128F150
GameAssembly.dll+128F9B1: 0F 28 F8                 - movaps xmm7,xmm0
GameAssembly.dll+128F9B4: F3 0F 59 FE              - mulss xmm7,xmm6
// ---------- INJECTING HERE ----------
GameAssembly.dll+128F9B8: F3 41 0F 58 F9           - addss xmm7,xmm9
// ---------- DONE INJECTING  ----------
GameAssembly.dll+128F9BD: F3 0F 11 7B 70           - movss [rbx+70],xmm7
GameAssembly.dll+128F9C2: 48 8B 0D 1F A0 24 03     - mov rcx,[GameAssembly.dll+44D99E8]
GameAssembly.dll+128F9C9: F6 81 2F 01 00 00 02     - test byte ptr [rcx+0000012F],02
GameAssembly.dll+128F9D0: 74 0E                    - je GameAssembly.dll+128F9E0
GameAssembly.dll+128F9D2: 83 B9 E0 00 00 00 00     - cmp dword ptr [rcx+000000E0],00
GameAssembly.dll+128F9D9: 75 05                    - jne GameAssembly.dll+128F9E0
GameAssembly.dll+128F9DB: E8 F0 BC DF FE           - call GameAssembly.dll+8B6D0
GameAssembly.dll+128F9E0: F3 0F 10 35 58 4F 71 02  - movss xmm6,[GameAssembly.dll+39A4940]
GameAssembly.dll+128F9E8: 44 0F 2F C7              - comiss xmm8,xmm7
GameAssembly.dll+128F9EC: 77 0A                    - ja GameAssembly.dll+128F9F8
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8993</ID>
                  <Description>"No Aim Fatigue"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
aim_fatigue_bow_toggle:
  db 01

[DISABLE]
aim_fatigue_bow_toggle:
  db 00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8994</ID>
                  <Description>"Aim Fatigue"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>aim_fatigue_bow_base_ptr</Address>
                  <Offsets>
                    <Offset>70</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>8707</ID>
          <Description>"Inventory"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="1" RealAddress="00000000"/>
          <Color>C08000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8555</ID>
              <Description>"Item Degrade"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.95 83861 S
  Date   : 2021-10-18
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(code_pause)
label(code_max)
label(item_degrade_hook)
label(item_degrade_bytes)
label(item_degrade_base_ptr)
label(item_degrade_pause_toggle)
label(item_degrade_max_toggle)
registersymbol(item_degrade_hook)
registersymbol(item_degrade_bytes)
registersymbol(item_degrade_base_ptr)
registersymbol(item_degrade_pause_toggle)
registersymbol(item_degrade_max_toggle)
aobScanModule(hook,GameAssembly.dll,f3 0f 5c f7 f3 0f 11 b3 ? ? ? ? f3 0f 10 bb ? ? ? ? 48 8b 0d ? ? ? ? f6 81 ? ? ? ? ? 74 ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? 0f 57 c0 0f 2f c6 77 ? 0f 2f f7 76 ? 0f 28 f7 eb ? 0f 57 f6 f3 0f 11 b3 ? ? ? ? 48 8b 0d)

newmem:
item_degrade_bytes:
  //subss xmm6,xmm7
  //movss [rbx+00000300],xmm6
  readMem(hook, $C)
  jmp returnhere

item_degrade_base_ptr:
  dq 0

item_degrade_pause_toggle:
  db 0

item_degrade_max_toggle:
  db 0

code:
  mov [item_degrade_base_ptr], rbx

code_pause:
  cmp byte ptr [item_degrade_pause_toggle], 0
  jz code_max
  jmp item_degrade_bytes+4


code_max:
  cmp byte ptr [item_degrade_max_toggle], 0
  jz item_degrade_bytes
  movss xmm6, [rbx+314]
  mov byte ptr [rbx+399], 0       // item ruined byte
  jmp item_degrade_bytes+4

hook:
item_degrade_hook:
  jmp code
  nop
  nop
  nop
  nop
  nop
  nop
  nop
  returnhere:



[DISABLE]
item_degrade_hook:
  //db F3 0F 5C F7 F3 0F 11 B3 00 03 00 00
  readMem(item_degrade_bytes, $C)

unregistersymbol(item_degrade_hook)
unregistersymbol(item_degrade_bytes)
unregistersymbol(item_degrade_base_ptr)
unregistersymbol(item_degrade_pause_toggle)
unregistersymbol(item_degrade_max_toggle)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+B6AA00

"GameAssembly.dll"+B6A9D1: 4C 89 44 24 38              -  mov [rsp+38],r8
"GameAssembly.dll"+B6A9D6: 4C 8D 44 24 28              -  lea r8,[rsp+28]
"GameAssembly.dll"+B6A9DB: 8B 94 02 34 80 03 00        -  mov edx,[rdx+rax+00038034]
"GameAssembly.dll"+B6A9E2: E8 C9 4D 6F FF              -  call GameAssembly.dll+25F7B0
"GameAssembly.dll"+B6A9E7: 90                          -  nop
"GameAssembly.dll"+B6A9E8: 33 C9                       -  xor ecx,ecx
"GameAssembly.dll"+B6A9EA: FF 15 08 B7 06 03           -  call qword ptr [GameAssembly.dll+3BD60F8]
"GameAssembly.dll"+B6A9F0: 90                          -  nop
"GameAssembly.dll"+B6A9F1: C6 05 DB 09 13 03 01        -  mov byte ptr [GameAssembly.dll+3C9B3D3],01
"GameAssembly.dll"+B6A9F8: F3 0F 10 B3 E8 02 00 00     -  movss xmm6,[rbx+000002E8]
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+B6AA00: F3 0F 5C F7                 -  subss xmm6,xmm7
"GameAssembly.dll"+B6AA04: F3 0F 11 B3 E8 02 00 00     -  movss [rbx+000002E8],xmm6
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+B6AA0C: F3 0F 10 BB EC 02 00 00     -  movss xmm7,[rbx+000002EC]
"GameAssembly.dll"+B6AA14: 48 8B 0D ED AF 0E 03        -  mov rcx,[GameAssembly.dll+3C55A08]
"GameAssembly.dll"+B6AA1B: F6 81 27 01 00 00 02        -  test byte ptr [rcx+00000127],02
"GameAssembly.dll"+B6AA22: 74 0E                       -  je GameAssembly.dll+B6AA32
"GameAssembly.dll"+B6AA24: 83 B9 D8 00 00 00 00        -  cmp dword ptr [rcx+000000D8],00
"GameAssembly.dll"+B6AA2B: 75 05                       -  jne GameAssembly.dll+B6AA32
"GameAssembly.dll"+B6AA2D: E8 4E 75 70 FF              -  call GameAssembly.dll+271F80
"GameAssembly.dll"+B6AA32: 0F 57 C0                    -  xorps xmm0,xmm0
"GameAssembly.dll"+B6AA35: 0F 2F C6                    -  comiss xmm0,xmm6
"GameAssembly.dll"+B6AA38: 77 0A                       -  ja GameAssembly.dll+B6AA44
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8651</ID>
                  <Description>"Pause Degrade"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
item_degrade_pause_toggle:
  db 01

[DISABLE]
item_degrade_pause_toggle:
  db 00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8652</ID>
                  <Description>"Max Quality"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
item_degrade_max_toggle:
  db 01

[DISABLE]
item_degrade_max_toggle:
  db 00
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8751</ID>
              <Description>"Items Never Wet/Frozen"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.95 83861 S
  Date   : 2021-10-26
  Author : sub1to

  This script does blah blah blah

  +B0]
      +74  wet percent
      +78  frozen percent
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(item_wet_hook)
label(item_wet_bytes)
label(item_wet_base_ptr)
label(item_wet_toggle)
label(item_wet_value)
registersymbol(item_wet_hook)
registersymbol(item_wet_bytes)
registersymbol(item_wet_base_ptr)
registersymbol(item_wet_toggle)
registersymbol(item_wet_value)
aobScanModule(hook,GameAssembly.dll,f3 0f 10 40 ? 0f 2e c6 7a ? 74 ? 41 ff c6)

newmem:
item_wet_bytes:
  //movss xmm0,[rax+74]
  readMem(hook, 5)
  jmp returnhere

item_wet_base_ptr:
  dq 0

item_wet_toggle:
  db 1

item_wet_value:
  dd 0

code:
  mov [item_wet_base_ptr], rax

  cmp byte ptr [item_wet_toggle], 0
  jz item_wet_bytes
  //movss xmm6, [item_wet_value]
  //movss [rax+74], xmm6
  //movss [rax+78], xmm6
  //jmp returnhere
  mov qword ptr [rax+74], 0
  jmp item_wet_bytes

hook:
item_wet_hook:
  jmp code
  returnhere:



[DISABLE]
item_wet_hook:
  //db F3 0F 10 40 74
  readMem(item_wet_bytes, 5)

unregistersymbol(item_wet_hook)
unregistersymbol(item_wet_bytes)
unregistersymbol(item_wet_base_ptr)
unregistersymbol(item_wet_toggle)
unregistersymbol(item_wet_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+1020E13

"GameAssembly.dll"+1020DE9: E8 E2 63 00 FF              -  call GameAssembly.dll+271D0
"GameAssembly.dll"+1020DEE: 48 85 C0                    -  test rax,rax
"GameAssembly.dll"+1020DF1: 0F 84 2E 04 00 00           -  je GameAssembly.dll+1021225
"GameAssembly.dll"+1020DF7: 48 8B 80 B0 00 00 00        -  mov rax,[rax+000000B0]
"GameAssembly.dll"+1020DFE: 48 85 C0                    -  test rax,rax
"GameAssembly.dll"+1020E01: 0F 84 18 04 00 00           -  je GameAssembly.dll+102121F
"GameAssembly.dll"+1020E07: F3 0F 10 40 78              -  movss xmm0,[rax+78]
"GameAssembly.dll"+1020E0C: 0F 2E C6                    -  ucomiss xmm0,xmm6
"GameAssembly.dll"+1020E0F: 7A 0E                       -  jp GameAssembly.dll+1020E1F
"GameAssembly.dll"+1020E11: 75 0C                       -  jne GameAssembly.dll+1020E1F
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+1020E13: F3 0F 10 40 74              -  movss xmm0,[rax+74]
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+1020E18: 0F 2E C6                    -  ucomiss xmm0,xmm6
"GameAssembly.dll"+1020E1B: 7A 02                       -  jp GameAssembly.dll+1020E1F
"GameAssembly.dll"+1020E1D: 74 03                       -  je GameAssembly.dll+1020E22
"GameAssembly.dll"+1020E1F: 41 FF C6                    -  inc r14d
"GameAssembly.dll"+1020E22: FF C3                       -  inc ebx
"GameAssembly.dll"+1020E24: 83 FB 04                    -  cmp ebx,04
"GameAssembly.dll"+1020E27: 0F 8C 53 FF FF FF           -  jl GameAssembly.dll+1020D80
"GameAssembly.dll"+1020E2D: 41 FF C4                    -  inc r12d
"GameAssembly.dll"+1020E30: 41 83 FC 08                 -  cmp r12d,08
"GameAssembly.dll"+1020E34: 7D 07                       -  jnl GameAssembly.dll+1020E3D
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>8617</ID>
              <Description>"Select Item Hook"</Description>
              <LastState Activated="1"/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.95 83861 S
  Date   : 2021-10-18
  Author : sub1to

}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(item_select_hook)
label(item_select_bytes)
label(item_select_base_ptr)
registersymbol(item_select_hook)
registersymbol(item_select_bytes)
registersymbol(item_select_base_ptr)
aobScanModule(hook,GameAssembly.dll,48 8b e8 33 d2 48 8b c8 e8 ? ? ? ? 4c 8b f8)

newmem:
item_select_bytes:
  //mov rbp,rax
  //xor edx,edx
  readMem(hook, 5)
  jmp returnhere

item_select_base_ptr:
  dq 0

code:
  mov [item_select_base_ptr], rax
  jmp item_select_bytes

hook:
item_select_hook:
  jmp code
  returnhere:



[DISABLE]
item_select_hook:
  //db 48 8B E8 33 D2
  readMem(item_select_bytes, 5)

unregistersymbol(item_select_hook)
unregistersymbol(item_select_bytes)
unregistersymbol(item_select_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+7038CE

"GameAssembly.dll"+7038AA: 33 C9                    -  xor ecx,ecx
"GameAssembly.dll"+7038AC: FF 15 46 28 4D 03        -  call qword ptr [GameAssembly.dll+3BD60F8]
"GameAssembly.dll"+7038B2: 90                       -  nop
"GameAssembly.dll"+7038B3: C6 05 30 60 59 03 01     -  mov byte ptr [GameAssembly.dll+3C998EA],01
"GameAssembly.dll"+7038BA: 33 D2                    -  xor edx,edx
"GameAssembly.dll"+7038BC: 48 8B CF                 -  mov rcx,rdi
"GameAssembly.dll"+7038BF: E8 5C 7F 00 00           -  call GameAssembly.dll+70B820
"GameAssembly.dll"+7038C4: 33 D2                    -  xor edx,edx
"GameAssembly.dll"+7038C6: 48 8B CF                 -  mov rcx,rdi
"GameAssembly.dll"+7038C9: E8 52 54 00 00           -  call GameAssembly.dll+708D20
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+7038CE: 48 8B E8                 -  mov rbp,rax
"GameAssembly.dll"+7038D1: 33 D2                    -  xor edx,edx
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+7038D3: 48 8B C8                 -  mov rcx,rax
"GameAssembly.dll"+7038D6: E8 B5 75 ED FF           -  call GameAssembly.dll+5DAE90
"GameAssembly.dll"+7038DB: 4C 8B F8                 -  mov r15,rax
"GameAssembly.dll"+7038DE: 48 8B 15 AB 15 59 03     -  mov rdx,[GameAssembly.dll+3C94E90]
"GameAssembly.dll"+7038E5: 48 3B C2                 -  cmp rax,rdx
"GameAssembly.dll"+7038E8: 74 27                    -  je GameAssembly.dll+703911
"GameAssembly.dll"+7038EA: 48 85 C0                 -  test rax,rax
"GameAssembly.dll"+7038ED: 74 1D                    -  je GameAssembly.dll+70390C
"GameAssembly.dll"+7038EF: 48 85 D2                 -  test rdx,rdx
"GameAssembly.dll"+7038F2: 74 18                    -  je GameAssembly.dll+70390C
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8748</ID>
                  <Description>"Base"</Description>
                  <LastState Value="00000232C90C6540" RealAddress="7FFF3585000A"/>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>808080</Color>
                  <VariableType>8 Bytes</VariableType>
                  <Address>item_select_base_ptr</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>8797</ID>
                  <Description>"Display Name"</Description>
                  <LastState RealAddress="23285D91854"/>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>String</VariableType>
                  <Length>32</Length>
                  <Unicode>1</Unicode>
                  <CodePage>0</CodePage>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>item_select_base_ptr</Address>
                  <Offsets>
                    <Offset>14</Offset>
                    <Offset>10</Offset>
                    <Offset>0x2F8</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>9005</ID>
                  <Description>"Description"</Description>
                  <LastState RealAddress="2325151CF74"/>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>String</VariableType>
                  <Length>32</Length>
                  <Unicode>1</Unicode>
                  <CodePage>0</CodePage>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>item_select_base_ptr</Address>
                  <Offsets>
                    <Offset>14</Offset>
                    <Offset>10</Offset>
                    <Offset>0x300</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>9004</ID>
                  <Description>"Gear Name"</Description>
                  <LastState RealAddress="23285D91714"/>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>String</VariableType>
                  <Length>32</Length>
                  <Unicode>1</Unicode>
                  <CodePage>0</CodePage>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>item_select_base_ptr</Address>
                  <Offsets>
                    <Offset>14</Offset>
                    <Offset>390</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>9003</ID>
                  <Description>"Stack Count"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>item_select_base_ptr</Address>
                  <Offsets>
                    <Offset>18</Offset>
                    <Offset>238</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8750</ID>
                  <Description>"Wet %"</Description>
                  <LastState Value="0" RealAddress="232517D0934"/>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>item_select_base_ptr</Address>
                  <Offsets>
                    <Offset>74</Offset>
                    <Offset>B8</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8753</ID>
                  <Description>"Frozen %"</Description>
                  <LastState Value="0" RealAddress="232517D0938"/>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>item_select_base_ptr</Address>
                  <Offsets>
                    <Offset>78</Offset>
                    <Offset>B8</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8619</ID>
                  <Description>"Quality"</Description>
                  <LastState Value="99.99819946" RealAddress="232C90C6850"/>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>item_select_base_ptr</Address>
                  <Offsets>
                    <Offset>310</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8620</ID>
                  <Description>"Quality Max"</Description>
                  <LastState Value="100" RealAddress="232C90C6854"/>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>item_select_base_ptr</Address>
                  <Offsets>
                    <Offset>314</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8791</ID>
                  <Description>"Ruined"</Description>
                  <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:No
1:yes
</DropDownList>
                  <LastState Value="0" RealAddress="232C90C68D9"/>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Byte</VariableType>
                  <Address>item_select_base_ptr</Address>
                  <Offsets>
                    <Offset>399</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>9073</ID>
                  <Description>"EvolveItem (curing)"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>C08000</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>9074</ID>
                      <Description>"Time To Evolve (Game Days)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF8080</Color>
                      <VariableType>Float</VariableType>
                      <Address>item_select_base_ptr</Address>
                      <Offsets>
                        <Offset>24</Offset>
                        <Offset>F8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>9075</ID>
                      <Description>"Require Indoors"</Description>
                      <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF8080</Color>
                      <VariableType>Byte</VariableType>
                      <Address>item_select_base_ptr</Address>
                      <Offsets>
                        <Offset>28</Offset>
                        <Offset>F8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>9076</ID>
                      <Description>"Time Spent Evolving (Game Hours)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF8080</Color>
                      <VariableType>Float</VariableType>
                      <Address>item_select_base_ptr</Address>
                      <Offsets>
                        <Offset>2C</Offset>
                        <Offset>F8</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8795</ID>
                  <Description>"Contents"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>C08000</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8796</ID>
                      <Description>"Water"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF8080</Color>
                      <VariableType>Float</VariableType>
                      <Address>item_select_base_ptr</Address>
                      <Offsets>
                        <Offset>1C</Offset>
                        <Offset>260</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>8800</ID>
                      <Description>"Calories"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF8080</Color>
                      <VariableType>Float</VariableType>
                      <Address>item_select_base_ptr</Address>
                      <Offsets>
                        <Offset>20</Offset>
                        <Offset>138</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>8799</ID>
                      <Description>"Antiseptic / Jerry Can"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF8080</Color>
                      <VariableType>Float</VariableType>
                      <Address>item_select_base_ptr</Address>
                      <Offsets>
                        <Offset>18</Offset>
                        <Offset>1A8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>8798</ID>
                      <Description>"Gunpowder"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF8080</Color>
                      <VariableType>Float</VariableType>
                      <Address>item_select_base_ptr</Address>
                      <Offsets>
                        <Offset>1C</Offset>
                        <Offset>1E8</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8845</ID>
              <Description>"Auto Crack Safe"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-10-30
  Author : sub1to

  +1C    = cracked (byte)
  +98    = rotation (float)
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(safe_open_hook)
label(safe_open_bytes)
label(safe_open_base_ptr)
label(safe_open_toggle)
registersymbol(safe_open_hook)
registersymbol(safe_open_bytes)
registersymbol(safe_open_base_ptr)
registersymbol(safe_open_toggle)
aobScanModule(hook,GameAssembly.dll,48 8b 83 ? ? ? ? 48 85 c0 0f 84 ? ? ? ? 80 78 ? ? 75 ? b0)

newmem:
safe_open_bytes:
  //mov rax,[rbx+000000F8]
  readMem(hook, 7)
  jmp code

safe_open_base_ptr:
  dq 0

safe_open_toggle:
  db 1

code:
  test rax, rax
  jz returnhere

  mov [safe_open_base_ptr], rax

  cmp byte ptr [safe_open_toggle], 0
  jz returnhere
  mov byte ptr [rax+1C], 1
  jmp returnhere

hook:
safe_open_hook:
  jmp safe_open_bytes
  nop
  nop
  returnhere:



[DISABLE]
safe_open_hook:
  //48 8B 83 F8 00 00 00
  readMem(safe_open_bytes, 7)

unregistersymbol(safe_open_hook)
unregistersymbol(safe_open_bytes)
unregistersymbol(safe_open_base_ptr)
unregistersymbol(safe_open_toggle)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+12D4CF4

"GameAssembly.dll"+12D4CCD: 75 1C                 -  jne GameAssembly.dll+12D4CEB
"GameAssembly.dll"+12D4CCF: 48 8D 0D 1A 0B 6A 02  -  lea rcx,[GameAssembly.dll+39757F0]
"GameAssembly.dll"+12D4CD6: E8 F5 87 DA FE        -  call GameAssembly.dll+7D4D0
"GameAssembly.dll"+12D4CDB: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+12D4CDE: 0F 84 98 00 00 00     -  je GameAssembly.dll+12D4D7C
"GameAssembly.dll"+12D4CE4: 48 89 05 D5 3A 19 03  -  mov [GameAssembly.dll+44687C0],rax
"GameAssembly.dll"+12D4CEB: 48 8B CF              -  mov rcx,rdi
"GameAssembly.dll"+12D4CEE: FF D0                 -  call rax
"GameAssembly.dll"+12D4CF0: 84 C0                 -  test al,al
"GameAssembly.dll"+12D4CF2: 74 23                 -  je GameAssembly.dll+12D4D17
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+12D4CF4: 48 8B 83 F8 00 00 00  -  mov rax,[rbx+000000F8]
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+12D4CFB: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+12D4CFE: 0F 84 8F 00 00 00     -  je GameAssembly.dll+12D4D93
"GameAssembly.dll"+12D4D04: 80 78 1C 00           -  cmp byte ptr [rax+1C],00
"GameAssembly.dll"+12D4D08: 75 0D                 -  jne GameAssembly.dll+12D4D17
"GameAssembly.dll"+12D4D0A: B0 01                 -  mov al,01
"GameAssembly.dll"+12D4D0C: 48 8B 5C 24 50        -  mov rbx,[rsp+50]
"GameAssembly.dll"+12D4D11: 48 83 C4 40           -  add rsp,40
"GameAssembly.dll"+12D4D15: 5F                    -  pop rdi
"GameAssembly.dll"+12D4D16: C3                    -  ret
"GameAssembly.dll"+12D4D17: 48 8B BB F0 00 00 00  -  mov rdi,[rbx+000000F0]
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>8956</ID>
              <Description>"Auto Unlock Locker"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-10-30
  Author : sub1to
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(container_is_locked_hook)
label(container_is_locked_bytes)
label(container_is_locked_base_ptr)
registersymbol(container_is_locked_hook)
registersymbol(container_is_locked_bytes)
registersymbol(container_is_locked_base_ptr)
aobScanModule(hook,GameAssembly.dll,48 8B 83 F0 00 00 00 48 85 C0 74 12)

newmem:
container_is_locked_bytes:
  //mov rax,[rbx+000000F0]
  readMem(hook, 7)
  jmp code

container_is_locked_base_ptr:
  dq 0

code:
  mov [container_is_locked_base_ptr], rax
  mov dword ptr [rax+78],1  // m_LockState = LockState.Unlocked;
  jmp returnhere

hook:
container_is_locked_hook:
  jmp container_is_locked_bytes
  nop
  nop
  returnhere:



[DISABLE]
container_is_locked_hook:
  //48 8B 83 F0 00 00 00
  readMem(container_is_locked_bytes, 7)

unregistersymbol(container_is_locked_hook)
unregistersymbol(container_is_locked_bytes)
unregistersymbol(container_is_locked_progress_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+12D4E4E

GameAssembly.dll+12D4E30: E8 9B 68 DB FE        - call GameAssembly.dll+8B6D0
GameAssembly.dll+12D4E35: 33 D2                 - xor edx,edx
GameAssembly.dll+12D4E37: 48 8B CF              - mov rcx,rdi
GameAssembly.dll+12D4E3A: E8 61 F0 56 01        - call GameAssembly.dll+2843EA0
GameAssembly.dll+12D4E3F: 84 C0                 - test al,al
GameAssembly.dll+12D4E41: 75 0B                 - jne GameAssembly.dll+12D4E4E
GameAssembly.dll+12D4E43: 48 8B 5C 24 50        - mov rbx,[rsp+50]
GameAssembly.dll+12D4E48: 48 83 C4 40           - add rsp,40
GameAssembly.dll+12D4E4C: 5F                    - pop rdi
GameAssembly.dll+12D4E4D: C3                    - ret
// ---------- INJECTING HERE ----------
GameAssembly.dll+12D4E4E: 48 8B 83 F0 00 00 00  - mov rax,[rbx+000000F0]
// ---------- DONE INJECTING  ----------
GameAssembly.dll+12D4E55: 48 85 C0              - test rax,rax
GameAssembly.dll+12D4E58: 74 12                 - je GameAssembly.dll+12D4E6C
GameAssembly.dll+12D4E5A: 83 78 78 00           - cmp dword ptr [rax+78],00
GameAssembly.dll+12D4E5E: 0F 94 C0              - sete al
GameAssembly.dll+12D4E61: 48 8B 5C 24 50        - mov rbx,[rsp+50]
GameAssembly.dll+12D4E66: 48 83 C4 40           - add rsp,40
GameAssembly.dll+12D4E6A: 5F                    - pop rdi
GameAssembly.dll+12D4E6B: C3                    - ret
GameAssembly.dll+12D4E6C: E8 8F 55 DF FE        - call GameAssembly.dll+CA400
GameAssembly.dll+12D4E71: CC                    - int 3
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>8954</ID>
              <Description>"Instant Search/Open Containers"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-10-30
  Author : sub1to

  private float m_SearchTimeRemaining; // 0x12C
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(container_open_progress_hook)
label(container_open_progress_bytes)
label(container_open_progress_base_ptr)
registersymbol(container_open_progress_hook)
registersymbol(container_open_progress_bytes)
registersymbol(container_open_progress_base_ptr)
aobScanModule(hook,GameAssembly.dll,f3 0f 11 b6 ? ? ? ? 48 8b 0d ? ? ? ? f6 81 ? ? ? ? ? 74 ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? e8)

newmem:
container_open_progress_bytes:
  //movss [rsi+0000012C],xmm6
  readMem(hook, 8)
  jmp returnhere

container_open_progress_base_ptr:
  dq 0

code:
  mov [container_open_progress_base_ptr], rbx
  xorps xmm6, xmm6
  jmp container_open_progress_bytes

hook:
container_open_progress_hook:
  jmp code
  nop
  nop
  nop
  returnhere:



[DISABLE]
container_open_progress_hook:
  //F3 0F 11 B6 2C 01 00 00
  readMem(container_open_progress_bytes, 8)

unregistersymbol(container_open_progress_hook)
unregistersymbol(container_open_progress_bytes)
unregistersymbol(container_open_progress_progress_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+12D9A23

GameAssembly.dll+12D99FA: 4D 89 7B C0              - mov [r11-40],r15
GameAssembly.dll+12D99FE: 4D 89 7B C8              - mov [r11-38],r15
GameAssembly.dll+12D9A02: 4D 8D 43 B8              - lea r8,[r11-48]
GameAssembly.dll+12D9A06: 8B 94 02 14 0E 02 00     - mov edx,[rdx+rax+00020E14]
GameAssembly.dll+12D9A0D: E8 2E 81 DA FE           - call GameAssembly.DllCanUnloadNow+CFC0
GameAssembly.dll+12D9A12: 90                       - nop
GameAssembly.dll+12D9A13: 33 C9                    - xor ecx,ecx
GameAssembly.dll+12D9A15: FF 15 15 17 E8 02        - call qword ptr [GameAssembly.dll+415B130]
GameAssembly.dll+12D9A1B: 90                       - nop
GameAssembly.dll+12D9A1C: C6 05 47 9B 17 03 01     - mov byte ptr [GameAssembly.dll+445356A],01
// ---------- INJECTING HERE ----------
GameAssembly.dll+12D9A23: F3 0F 11 B6 2C 01 00 00  - movss [rsi+0000012C],xmm6
// ---------- DONE INJECTING  ----------
GameAssembly.dll+12D9A2B: 48 8B 0D D6 7D 1E 03     - mov rcx,[GameAssembly.dll+44C1808]
GameAssembly.dll+12D9A32: F6 81 2F 01 00 00 02     - test byte ptr [rcx+0000012F],02
GameAssembly.dll+12D9A39: 74 0E                    - je GameAssembly.dll+12D9A49
GameAssembly.dll+12D9A3B: 83 B9 E0 00 00 00 00     - cmp dword ptr [rcx+000000E0],00
GameAssembly.dll+12D9A42: 75 05                    - jne GameAssembly.dll+12D9A49
GameAssembly.dll+12D9A44: E8 87 1C DB FE           - call GameAssembly.dll+8B6D0
GameAssembly.dll+12D9A49: E8 82 A3 B3 FF           - call GameAssembly.dll+E13DD0
GameAssembly.dll+12D9A4E: 48 85 C0                 - test rax,rax
GameAssembly.dll+12D9A51: 0F 84 69 02 00 00        - je GameAssembly.dll+12D9CC0
GameAssembly.dll+12D9A57: 33 D2                    - xor edx,edx
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>8941</ID>
              <Description>"Container (Open a container to activate)"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-10-30
  Author : sub1to

}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(code_searched)
label(code_capacity)
label(container_open_hook)
label(container_open_bytes)
label(container_open_base_ptr)
label(container_open_always_searched_toggle)
label(container_open_capacity_toggle)
label(container_open_capacity_value)
registersymbol(container_open_hook)
registersymbol(container_open_bytes)
registersymbol(container_open_base_ptr)
registersymbol(container_open_always_searched_toggle)
registersymbol(container_open_capacity_toggle)
registersymbol(container_open_capacity_value)
aobScanModule(hook,GameAssembly.dll,80 bb ? ? ? ? ? 75 ? f3 0f 10 4b)

newmem:
container_open_bytes:
  //cmp byte ptr [rbx+000000E8],00
  readMem(hook, 7)
  jmp returnhere

container_open_base_ptr:
  dq 0

container_open_always_searched_toggle:
  db 0

container_open_capacity_toggle:
  db 0

container_open_capacity_value:
  dd (float)999

code:
  mov [container_open_base_ptr], rbx

code_searched:
  cmp byte ptr [container_open_always_searched_toggle], 0
  jz code_capacity
  mov byte ptr [rbx+E8], 1	// protected bool m_Inspected; // 0xE8

code_capacity:
  cmp byte ptr [container_open_capacity_toggle], 0
  jz container_open_bytes
  // m_CapacityKG = container_open_capacity_value;
  movss xmm1, [container_open_capacity_value]
  movss [rbx+50], xmm1
  jmp container_open_bytes

hook:
container_open_hook:
  jmp code
  nop
  nop
  returnhere:



[DISABLE]
container_open_hook:
  //80 BB E8 00 00 00 00
  readMem(container_open_bytes, 7)

unregistersymbol(container_open_hook)
unregistersymbol(container_open_bytes)
unregistersymbol(container_open_base_ptr)
unregistersymbol(container_open_always_searched_toggle)
unregistersymbol(container_open_capacity_toggle)
unregistersymbol(container_open_capacity_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+12D434D

GameAssembly.dll+12D4321: 48 8B 0D 20 B9 19 03  - mov rcx,[GameAssembly.dll+446FC48]
GameAssembly.dll+12D4328: F6 81 2F 01 00 00 02  - test byte ptr [rcx+0000012F],02
GameAssembly.dll+12D432F: 74 0E                 - je GameAssembly.dll+12D433F
GameAssembly.dll+12D4331: 83 B9 E0 00 00 00 00  - cmp dword ptr [rcx+000000E0],00
GameAssembly.dll+12D4338: 75 05                 - jne GameAssembly.dll+12D433F
GameAssembly.dll+12D433A: E8 91 73 DB FE        - call GameAssembly.dll+8B6D0
GameAssembly.dll+12D433F: 45 33 C0              - xor r8d,r8d
GameAssembly.dll+12D4342: 48 8B D6              - mov rdx,rsi
GameAssembly.dll+12D4345: 48 8B CF              - mov rcx,rdi
GameAssembly.dll+12D4348: E8 63 45 B8 FF        - call GameAssembly.dll+E588B0
// ---------- INJECTING HERE ----------
GameAssembly.dll+12D434D: 80 BB E8 00 00 00 00  - cmp byte ptr [rbx+000000E8],00
// ---------- DONE INJECTING  ----------
GameAssembly.dll+12D4354: 75 1D                 - jne GameAssembly.dll+12D4373
GameAssembly.dll+12D4356: F3 0F 10 4B 54        - movss xmm1,[rbx+54]
GameAssembly.dll+12D435B: 0F 57 C0              - xorps xmm0,xmm0
GameAssembly.dll+12D435E: 0F 2F C8              - comiss xmm1,xmm0
GameAssembly.dll+12D4361: 77 64                 - ja GameAssembly.dll+12D43C7
GameAssembly.dll+12D4363: 80 7B 60 00           - cmp byte ptr [rbx+60],00
GameAssembly.dll+12D4367: 75 0A                 - jne GameAssembly.dll+12D4373
GameAssembly.dll+12D4369: 33 D2                 - xor edx,edx
GameAssembly.dll+12D436B: 48 8B CB              - mov rcx,rbx
GameAssembly.dll+12D436E: E8 ED 42 00 00        - call GameAssembly.dll+12D8660
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8943</ID>
                  <Description>"Always Searched"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
container_open_always_searched_toggle:
  db 01

[DISABLE]
container_open_always_searched_toggle:
  db 00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8957</ID>
                  <Description>"Overwrite Capacity"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
container_open_capacity_toggle:
  db 01

[DISABLE]
container_open_capacity_toggle:
  db 00
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8958</ID>
                      <Description>"Capacity"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>800080</Color>
                      <VariableType>Float</VariableType>
                      <Address>container_open_capacity_value</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8944</ID>
                  <Description>"Capacity (KG)"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>container_open_base_ptr</Address>
                  <Offsets>
                    <Offset>50</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8946</ID>
                  <Description>"Search Time (Seconds)"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>container_open_base_ptr</Address>
                  <Offsets>
                    <Offset>54</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8947</ID>
                  <Description>"Open Delay (Seconds)"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>container_open_base_ptr</Address>
                  <Offsets>
                    <Offset>58</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8945</ID>
                  <Description>"Searched"</Description>
                  <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Byte</VariableType>
                  <Address>container_open_base_ptr</Address>
                  <Offsets>
                    <Offset>E8</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8951</ID>
                  <Description>"Search Time Remaining"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>container_open_base_ptr</Address>
                  <Offsets>
                    <Offset>12C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8950</ID>
                  <Description>"Safe (If container is a safe)"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>C08000</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8949</ID>
                      <Description>"Safe Cracked"</Description>
                      <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF8080</Color>
                      <VariableType>Byte</VariableType>
                      <Address>container_open_base_ptr</Address>
                      <Offsets>
                        <Offset>1C</Offset>
                        <Offset>F8</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8960</ID>
                  <Description>"Lock (If container has a lock)"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>C08000</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8961</ID>
                      <Description>"Lock State"</Description>
                      <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:Locked
1:Unlocked
2:Broken
</DropDownList>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF8080</Color>
                      <VariableType>Byte</VariableType>
                      <Address>container_open_base_ptr</Address>
                      <Offsets>
                        <Offset>78</Offset>
                        <Offset>F0</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>9064</ID>
              <Description>"Item Spawner"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-11-02
  Author : sub1to

  public sealed class String : IComparable, ICloneable, IConvertible, IEnumerable, IComparable&lt;string&gt;, IEnumerable&lt;char&gt;, IEquatable&lt;string&gt; // TypeDefIndex: 289
	// Fields
	private int m_stringLength; // 0x10
	private char m_firstChar; // 0x14
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
alloc(string,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(code_strlen_next)
label(code_strlen_end)
label(playermanager_update_hook)
label(playermanager_update_bytes)
label(item_spawn_toggle)
label(item_spawn_count)
label(item_spawn_string)
registersymbol(playermanager_update_hook)
registersymbol(playermanager_update_bytes)
registersymbol(item_spawn_toggle)
registersymbol(item_spawn_count)
registersymbol(item_spawn_string)

//  class: PlayerManager
//  RVA: 0x15A7EC0 Offset: 0x15A6AC0 VA: 0x7FFB684A7EC0
//  public void Update() { }
aobScanModule(hook,GameAssembly.dll,40 55 48 8b ec 48 83 ec ? 48 c7 45 ? ? ? ? ? 48 89 5c 24 ? 48 89 74 24 ? 48 89 7c 24 ? 4c 89 74 24 ? 48 8b d9 45 33 f6 44 38 35 ? ? ? ? 75 ? 48 8b 05)

//  class: PlayerManager
//  RVA: 0xDDC160 Offset: 0xDDB160 VA: 0x7FFB0C7AC160
//  public GearItem InstantiateItemAtPlayersFeet(string itemName, int numUnits) { }
aobScanModule(PlayerManager_InstantiateItemAtPlayersFeet,GameAssembly.dll,41 5E C3 4C 8B DC 41 56 48 83)

string:
item_spawn_string:
  dq 00 // +00 ptr
  dq 00 // +08 padding
  dd 16 // +10 len
  db 'G' 0 'E' 0 'A' 0 'R' 0 '_' 0 'T' 0 'e' 0 'c' 0 'h' 0 'n' 0 'i' 0 'c' 0 'a' 0 'l' 0 'B' 0 'a' 0 'c' 0 'k' 0 'p' 0 'a' 0 'c' 0 'k' 0 0
  //db 0 // +14 first byte

newmem:
playermanager_update_bytes:
  //push rbp
  //mov rbp,rsp
  readMem(hook, 5)
  jmp returnhere

item_spawn_toggle:
  db 0

item_spawn_count:
  dd 1

code:
  cmp byte ptr [item_spawn_toggle], 0
  jz playermanager_update_bytes
  mov byte ptr [item_spawn_toggle], 0

  //get strlen
  xor r8d, r8d
  lea rdx, [item_spawn_string+14]
code_strlen_next:
  mov r9w, [rdx]
  test r9w, r9w
  jz code_strlen_end
  inc r8d
  lea rdx, [rdx+2]
  jmp code_strlen_next

code_strlen_end:
  mov [item_spawn_string+10], r8d

  // spawn item
  lea rsp, [rsp-28]
  mov [rsp+20], rcx
  lea rdx, [string]
  mov r8d, [item_spawn_count]
  call PlayerManager_InstantiateItemAtPlayersFeet+3
  mov rcx, [rsp+20]
  lea rsp, [rsp+28]
  jmp playermanager_update_bytes

hook:
playermanager_update_hook:
  jmp code
  returnhere:



[DISABLE]
playermanager_update_hook:
  //40 55 48 8B EC
  readMem(playermanager_update_bytes, 5)

unregistersymbol(playermanager_update_hook)
unregistersymbol(playermanager_update_bytes)
unregistersymbol(item_spawn_toggle)
unregistersymbol(item_spawn_count)
unregistersymbol(item_spawn_string)
dealloc(newmem)
dealloc(string)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+E05AF0

GameAssembly.dll+E05AD1: 74 17                    - je GameAssembly.dll+E05AEA
GameAssembly.dll+E05AD3: 33 D2                    - xor edx,edx
GameAssembly.dll+E05AD5: 48 8B C8                 - mov rcx,rax
GameAssembly.dll+E05AD8: E8 23 2A 55 00           - call GameAssembly.dll+1358500
GameAssembly.dll+E05ADD: C6 83 38 05 00 00 00     - mov byte ptr [rbx+00000538],00
GameAssembly.dll+E05AE4: 48 83 C4 40              - add rsp,40
GameAssembly.dll+E05AE8: 5B                       - pop rbx
GameAssembly.dll+E05AE9: C3                       - ret
GameAssembly.dll+E05AEA: E8 11 49 2C FF           - call GameAssembly.dll+CA400
GameAssembly.dll+E05AEF: CC                       - int 3
// ---------- INJECTING HERE ----------
GameAssembly.dll+E05AF0: 40 55                    - push rbp
GameAssembly.dll+E05AF2: 48 8B EC                 - mov rbp,rsp
// ---------- DONE INJECTING  ----------
GameAssembly.dll+E05AF5: 48 83 EC 40              - sub rsp,40
GameAssembly.dll+E05AF9: 48 C7 45 E0 FE FF FF FF  - mov qword ptr [rbp-20],FFFFFFFFFFFFFFFE
GameAssembly.dll+E05B01: 48 89 5C 24 50           - mov [rsp+50],rbx
GameAssembly.dll+E05B06: 48 89 74 24 58           - mov [rsp+58],rsi
GameAssembly.dll+E05B0B: 48 89 7C 24 60           - mov [rsp+60],rdi
GameAssembly.dll+E05B10: 4C 89 74 24 68           - mov [rsp+68],r14
GameAssembly.dll+E05B15: 48 8B D9                 - mov rbx,rcx
GameAssembly.dll+E05B18: 45 33 F6                 - xor r14d,r14d
GameAssembly.dll+E05B1B: 44 38 35 9F 6C 64 03     - cmp [GameAssembly.dll+444C7C1],r14l
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>9065</ID>
                  <Description>"State"</Description>
                  <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:Idle/Done
1:Spawn Item
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>800080</Color>
                  <VariableType>Byte</VariableType>
                  <Address>item_spawn_toggle</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>9066</ID>
                  <Description>"Count (Stackable Items)"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>800080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>item_spawn_count</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>9067</ID>
                  <Description>"Item Name"</Description>
                  <DropDownList>GEAR_Accelerant:GEAR_Accelerant
GEAR_AccelerantGunpowder:GEAR_AccelerantGunpowder
GEAR_AccelerantKerosene:GEAR_AccelerantKerosene
GEAR_AccelerantMedium:GEAR_AccelerantMedium
GEAR_AirlineFoodChick:GEAR_AirlineFoodChick
GEAR_AirlineFoodVeg:GEAR_AirlineFoodVeg
GEAR_Arrow:GEAR_Arrow
GEAR_ArrowHead:GEAR_ArrowHead
GEAR_ArrowShaft:GEAR_ArrowShaft
GEAR_AstridBackPack_hangar:GEAR_AstridBackPack_hangar
GEAR_AstridBoots:GEAR_AstridBoots
GEAR_AstridGloves:GEAR_AstridGloves
GEAR_AstridJacket:GEAR_AstridJacket
GEAR_AstridJeans:GEAR_AstridJeans
GEAR_AstridSweater:GEAR_AstridSweater
GEAR_AstridToque:GEAR_AstridToque
GEAR_AuroraHatchCode:GEAR_AuroraHatchCode
GEAR_AuroraObservationNote:GEAR_AuroraObservationNote
GEAR_Balaclava:GEAR_Balaclava
GEAR_BankManagerHouseKey:GEAR_BankManagerHouseKey
GEAR_BankVaultCode:GEAR_BankVaultCode
GEAR_BarkTinder:GEAR_BarkTinder
GEAR_BaseballCap:GEAR_BaseballCap
GEAR_BasicBoots:GEAR_BasicBoots
GEAR_BasicGloves:GEAR_BasicGloves
GEAR_BasicShoes:GEAR_BasicShoes
GEAR_BasicWinterCoat:GEAR_BasicWinterCoat
GEAR_BasicWoolHat:GEAR_BasicWoolHat
GEAR_BasicWoolScarf:GEAR_BasicWoolScarf
GEAR_BearEar:GEAR_BearEar
GEAR_BearHide:GEAR_BearHide
GEAR_BearHideDried:GEAR_BearHideDried
GEAR_BearQuarter:GEAR_BearQuarter
GEAR_BearSkinBedRoll:GEAR_BearSkinBedRoll
GEAR_BearSkinCoat:GEAR_BearSkinCoat
GEAR_BearSpear:GEAR_BearSpear
GEAR_BearSpearBroken:GEAR_BearSpearBroken
GEAR_BearSpearBrokenStory:GEAR_BearSpearBrokenStory
GEAR_BearSpearRelic:GEAR_BearSpearRelic
GEAR_BearSpearStory:GEAR_BearSpearStory
GEAR_BedRoll:GEAR_BedRoll
GEAR_BeefJerky:GEAR_BeefJerky
GEAR_BirchbarkPrepared:GEAR_BirchbarkPrepared
GEAR_BirchbarkTea:GEAR_BirchbarkTea
GEAR_BirchSapling:GEAR_BirchSapling
GEAR_BirchSaplingDried:GEAR_BirchSaplingDried
GEAR_BlackrockConvictNote1:GEAR_BlackrockConvictNote1
GEAR_BlackrockConvictNote2:GEAR_BlackrockConvictNote2
GEAR_BlackrockConvictNote3:GEAR_BlackrockConvictNote3
GEAR_BlackrockMemo:GEAR_BlackrockMemo
GEAR_BlueFlare:GEAR_BlueFlare
GEAR_BoltCutters:GEAR_BoltCutters
GEAR_BookA:GEAR_BookA
GEAR_BookArchery:GEAR_BookArchery
GEAR_BookB:GEAR_BookB
GEAR_BookBopen:GEAR_BookBopen
GEAR_BookC:GEAR_BookC
GEAR_BookCarcassHarvesting:GEAR_BookCarcassHarvesting
GEAR_BookCooking:GEAR_BookCooking
GEAR_BookD:GEAR_BookD
GEAR_BookE:GEAR_BookE
GEAR_BookEopen:GEAR_BookEopen
GEAR_BookF:GEAR_BookF
GEAR_BookFireStarting:GEAR_BookFireStarting
GEAR_BookFopen:GEAR_BookFopen
GEAR_BookG:GEAR_BookG
GEAR_BookGunsmithing:GEAR_BookGunsmithing
GEAR_BookH:GEAR_BookH
GEAR_BookHopen:GEAR_BookHopen
GEAR_BookI:GEAR_BookI
GEAR_BookIceFishing:GEAR_BookIceFishing
GEAR_BookLabE_01:GEAR_BookLabE_01
GEAR_BookLabE_02:GEAR_BookLabE_02
GEAR_BookLabE_03:GEAR_BookLabE_03
GEAR_BookLabE_Open_01:GEAR_BookLabE_Open_01
GEAR_BookManual:GEAR_BookManual
GEAR_BookMending:GEAR_BookMending
GEAR_BookRevolverFirearm:GEAR_BookRevolverFirearm
GEAR_BookRifleFirearm:GEAR_BookRifleFirearm
GEAR_BookRifleFirearmAdvanced:GEAR_BookRifleFirearmAdvanced
GEAR_BookTallTalesFishing:GEAR_BookTallTalesFishing
GEAR_BookTallTalesGlowCave:GEAR_BookTallTalesGlowCave
GEAR_BookTallTalesStag:GEAR_BookTallTalesStag
GEAR_BookTallTalesYeti:GEAR_BookTallTalesYeti
GEAR_BottleAntibiotics:GEAR_BottleAntibiotics
GEAR_BottleHydrogenPeroxide:GEAR_BottleHydrogenPeroxide
GEAR_BottlePainKillers:GEAR_BottlePainKillers
GEAR_Bow:GEAR_Bow
GEAR_Brand:GEAR_Brand
GEAR_BrokenArrow:GEAR_BrokenArrow
GEAR_BrokenRifle:GEAR_BrokenRifle
GEAR_Bullet:GEAR_Bullet
GEAR_CacheNote_ChurchMarshDir:GEAR_CacheNote_ChurchMarshDir
GEAR_CampOfficeCollectible:GEAR_CampOfficeCollectible
GEAR_CandyBar:GEAR_CandyBar
GEAR_CannedBeans:GEAR_CannedBeans
GEAR_CannedSardines:GEAR_CannedSardines
GEAR_CanOpener:GEAR_CanOpener
GEAR_CarBattery:GEAR_CarBattery
GEAR_CargoPants:GEAR_CargoPants
GEAR_CashBundle:GEAR_CashBundle
GEAR_CattailPlant:GEAR_CattailPlant
GEAR_CattailStalk:GEAR_CattailStalk
GEAR_CattailTinder:GEAR_CattailTinder
GEAR_CaveCacheNote:GEAR_CaveCacheNote
GEAR_Charcoal:GEAR_Charcoal
GEAR_ChurchHymn:GEAR_ChurchHymn
GEAR_ChurchNoteEP1:GEAR_ChurchNoteEP1
GEAR_ClimbingSocks:GEAR_ClimbingSocks
GEAR_Cloth:GEAR_Cloth
GEAR_ClothSheet:GEAR_ClothSheet
GEAR_Coal:GEAR_Coal
GEAR_CombatBoots:GEAR_CombatBoots
GEAR_CombatPants:GEAR_CombatPants
GEAR_CompressionBandage:GEAR_CompressionBandage
GEAR_CondensedMilk:GEAR_CondensedMilk
GEAR_ConvictCorpseNote:GEAR_ConvictCorpseNote
GEAR_CookedMeatBear:GEAR_CookedMeatBear
GEAR_CookedMeatDeer:GEAR_CookedMeatDeer
GEAR_CookedMeatMoose:GEAR_CookedMeatMoose
GEAR_CookedMeatRabbit:GEAR_CookedMeatRabbit
GEAR_CookedMeatWolf:GEAR_CookedMeatWolf
GEAR_CookingPot:GEAR_CookingPot
GEAR_CookingPotDummy:GEAR_CookingPotDummy
GEAR_CottonHoodie:GEAR_CottonHoodie
GEAR_CottonScarf:GEAR_CottonScarf
GEAR_CottonShirt:GEAR_CottonShirt
GEAR_CottonSocks:GEAR_CottonSocks
GEAR_CottonSocksStart:GEAR_CottonSocksStart
GEAR_CowichanSweater:GEAR_CowichanSweater
GEAR_Crackers:GEAR_Crackers
GEAR_Crampons:GEAR_Crampons
GEAR_CrowFeather:GEAR_CrowFeather
GEAR_DamCollectible1:GEAR_DamCollectible1
GEAR_DamControlRoomCodeNote:GEAR_DamControlRoomCodeNote
GEAR_DamElevatorNotice:GEAR_DamElevatorNotice
GEAR_DamExitCodeNote:GEAR_DamExitCodeNote
GEAR_DamFenceKey:GEAR_DamFenceKey
GEAR_DamGarbageLetter:GEAR_DamGarbageLetter
GEAR_DamLockerKey:GEAR_DamLockerKey
GEAR_DamOfficeKey:GEAR_DamOfficeKey
GEAR_DamTrailerBCrewNote:GEAR_DamTrailerBCrewNote
GEAR_DarkwalkerDiary1:GEAR_DarkwalkerDiary1
GEAR_DarkwalkerDiary10:GEAR_DarkwalkerDiary10
GEAR_DarkwalkerDiary11:GEAR_DarkwalkerDiary11
GEAR_DarkwalkerDiary2:GEAR_DarkwalkerDiary2
GEAR_DarkwalkerDiary3:GEAR_DarkwalkerDiary3
GEAR_DarkwalkerDiary4:GEAR_DarkwalkerDiary4
GEAR_DarkwalkerDiary5:GEAR_DarkwalkerDiary5
GEAR_DarkwalkerDiary6:GEAR_DarkwalkerDiary6
GEAR_DarkwalkerDiary7:GEAR_DarkwalkerDiary7
GEAR_DarkwalkerDiary8:GEAR_DarkwalkerDiary8
GEAR_DarkwalkerDiary9:GEAR_DarkwalkerDiary9
GEAR_DarkwalkerID:GEAR_DarkwalkerID
GEAR_DeadmanNote1:GEAR_DeadmanNote1
GEAR_DeadmanNote2:GEAR_DeadmanNote2
GEAR_DeadmanNote3:GEAR_DeadmanNote3
GEAR_DeadmanNote4:GEAR_DeadmanNote4
GEAR_DeadmanNote5:GEAR_DeadmanNote5
GEAR_DeerSkinBoots:GEAR_DeerSkinBoots
GEAR_DeerSkinPants:GEAR_DeerSkinPants
GEAR_DogFood:GEAR_DogFood
GEAR_DownParka:GEAR_DownParka
GEAR_DownSkiJacket:GEAR_DownSkiJacket
GEAR_DownVest:GEAR_DownVest
GEAR_DustingSulfur:GEAR_DustingSulfur
GEAR_EarMuffs:GEAR_EarMuffs
GEAR_ElevatorCrank:GEAR_ElevatorCrank
GEAR_ElevatorParts:GEAR_ElevatorParts
GEAR_ElevatorPartsDead:GEAR_ElevatorPartsDead
GEAR_EmergencyKitNote:GEAR_EmergencyKitNote
GEAR_EmergencyStim:GEAR_EmergencyStim
GEAR_EnergyBar:GEAR_EnergyBar
GEAR_Ep3ForestTalkers_FTCollectible1:GEAR_Ep3ForestTalkers_FTCollectible1
GEAR_Ep3ForestTalkers_FTCollectible2:GEAR_Ep3ForestTalkers_FTCollectible2
GEAR_Ep3ForestTalkers_FTCollectible3:GEAR_Ep3ForestTalkers_FTCollectible3
GEAR_Ep3ForestTalkers_PVCollectible1:GEAR_Ep3ForestTalkers_PVCollectible1
GEAR_Ep3ForestTalkers_PVCollectible2:GEAR_Ep3ForestTalkers_PVCollectible2
GEAR_Ep3ForestTalkers_PVCollectible3:GEAR_Ep3ForestTalkers_PVCollectible3
GEAR_Ep3HallFlyer:GEAR_Ep3HallFlyer
GEAR_Ep3Rosary:GEAR_Ep3Rosary
GEAR_Ep3TomsMap:GEAR_Ep3TomsMap
GEAR_Ep3_ChurchArtifact:GEAR_Ep3_ChurchArtifact
GEAR_Ep3_ChurchFlyer:GEAR_Ep3_ChurchFlyer
GEAR_Ep3_ChurchMotelLetter:GEAR_Ep3_ChurchMotelLetter
GEAR_Ep3_ChurchNewsClipping:GEAR_Ep3_ChurchNewsClipping
GEAR_Ep3_ChurchThankyouLetter:GEAR_Ep3_ChurchThankyouLetter
GEAR_Ep3_ChurchTheftReport:GEAR_Ep3_ChurchTheftReport
GEAR_EP3_JoplinBunkerNote:GEAR_EP3_JoplinBunkerNote
GEAR_EP3_JoplinBunkerNote2:GEAR_EP3_JoplinBunkerNote2
GEAR_EP3_JoplinCacheNote:GEAR_EP3_JoplinCacheNote
GEAR_EP3_PatientHistory01:GEAR_EP3_PatientHistory01
GEAR_EP3_PatientHistory02:GEAR_EP3_PatientHistory02
GEAR_EP3_PatientHistory03:GEAR_EP3_PatientHistory03
GEAR_EP3_PatientHistory04:GEAR_EP3_PatientHistory04
GEAR_EP3_PatientHistory05:GEAR_EP3_PatientHistory05
GEAR_EP3_PatientHistory06:GEAR_EP3_PatientHistory06
GEAR_FarmerDepositBoxKey:GEAR_FarmerDepositBoxKey
GEAR_FireAxe:GEAR_FireAxe
GEAR_Firelog:GEAR_Firelog
GEAR_Firestriker:GEAR_Firestriker
GEAR_FishermanSweater:GEAR_FishermanSweater
GEAR_FishingLine:GEAR_FishingLine
GEAR_FixedRifle:GEAR_FixedRifle
GEAR_FlareA:GEAR_FlareA
GEAR_FlareGun:GEAR_FlareGun
GEAR_FlareGunAmmoSingle:GEAR_FlareGunAmmoSingle
GEAR_FlareGunAmmoSingle_SurvivorMission:GEAR_FlareGunAmmoSingle_SurvivorMission
GEAR_FlareGunCase_hangar:GEAR_FlareGunCase_hangar
GEAR_Flashlight:GEAR_Flashlight
GEAR_FleeceMittens:GEAR_FleeceMittens
GEAR_FleeceSweater:GEAR_FleeceSweater
GEAR_FlintAndSteel:GEAR_FlintAndSteel
GEAR_FoodSupplies_hangar:GEAR_FoodSupplies_hangar
GEAR_ForestTalkerBloodyItem:GEAR_ForestTalkerBloodyItem
GEAR_ForestTalkerDamNote:GEAR_ForestTalkerDamNote
GEAR_ForestTalkerFlyer:GEAR_ForestTalkerFlyer
GEAR_ForestTalkerHiddenItem:GEAR_ForestTalkerHiddenItem
GEAR_ForestTalkerMap:GEAR_ForestTalkerMap
GEAR_ForestTalkerThankyou:GEAR_ForestTalkerThankyou
GEAR_ForestTalkerThankyou2:GEAR_ForestTalkerThankyou2
GEAR_ForgeBlueprints:GEAR_ForgeBlueprints
GEAR_ForgeCacheNote:GEAR_ForgeCacheNote
GEAR_Gauntlets:GEAR_Gauntlets
GEAR_GMExtraSuppliesNote:GEAR_GMExtraSuppliesNote
GEAR_GranolaBar:GEAR_GranolaBar
GEAR_GreyMotherBoots:GEAR_GreyMotherBoots
GEAR_GreyMotherPearls:GEAR_GreyMotherPearls
GEAR_GreyMotherTrunkKey:GEAR_GreyMotherTrunkKey
GEAR_GunpowderCan:GEAR_GunpowderCan
GEAR_Gut:GEAR_Gut
GEAR_GutDried:GEAR_GutDried
GEAR_Hacksaw:GEAR_Hacksaw
GEAR_Hammer:GEAR_Hammer
GEAR_HandheldShortwave:GEAR_HandheldShortwave
GEAR_HankHatchCode:GEAR_HankHatchCode
GEAR_HankJournal1:GEAR_HankJournal1
GEAR_HankJournal2:GEAR_HankJournal2
GEAR_HankLockboxKey:GEAR_HankLockboxKey
GEAR_HankNeiceLetter:GEAR_HankNeiceLetter
GEAR_HardCase:GEAR_HardCase
GEAR_HardCase_hangar:GEAR_HardCase_hangar
GEAR_Hardwood:GEAR_Hardwood
GEAR_Hatchet:GEAR_Hatchet
GEAR_HatchetImprovised:GEAR_HatchetImprovised
GEAR_HC_EP1_FM_TreeRoots_Dir:GEAR_HC_EP1_FM_TreeRoots_Dir
GEAR_HC_EP1_ML_AlansCave_Dir:GEAR_HC_EP1_ML_AlansCave_Dir
GEAR_HC_EP1_ML_ClearCut_Dir:GEAR_HC_EP1_ML_ClearCut_Dir
GEAR_HC_EP1_ML_TracksEnt_Dir:GEAR_HC_EP1_ML_TracksEnt_Dir
GEAR_HC_EP1_RW_HunterLodge_Dir:GEAR_HC_EP1_RW_HunterLodge_Dir
GEAR_HC_EP1_RW_RavineEnd_Dir:GEAR_HC_EP1_RW_RavineEnd_Dir
GEAR_HeavyBandage:GEAR_HeavyBandage
GEAR_HeavyParka:GEAR_HeavyParka
GEAR_HeavyWoolSweater:GEAR_HeavyWoolSweater
GEAR_HighQualityTools:GEAR_HighQualityTools
GEAR_HomeMadeSoup:GEAR_HomeMadeSoup
GEAR_Hook:GEAR_Hook
GEAR_HookAndLine:GEAR_HookAndLine
GEAR_ImprovisedHat:GEAR_ImprovisedHat
GEAR_ImprovisedMittens:GEAR_ImprovisedMittens
GEAR_InsulatedBoots:GEAR_InsulatedBoots
GEAR_InsulatedPants:GEAR_InsulatedPants
GEAR_InsulatedVest:GEAR_InsulatedVest
GEAR_Insulin:GEAR_Insulin
GEAR_Jeans:GEAR_Jeans
GEAR_JeremiahKnife:GEAR_JeremiahKnife
GEAR_JeremiahsCoat:GEAR_JeremiahsCoat
GEAR_JerrycanRusty:GEAR_JerrycanRusty
GEAR_KeroseneLampB:GEAR_KeroseneLampB
GEAR_KetchupChips:GEAR_KetchupChips
GEAR_Knife:GEAR_Knife
GEAR_KnifeImprovised:GEAR_KnifeImprovised
GEAR_KnifeScrapMetal:GEAR_KnifeScrapMetal
GEAR_KnowledgeCarterDam:GEAR_KnowledgeCarterDam
GEAR_KnowledgeCollapse1:GEAR_KnowledgeCollapse1
GEAR_KnowledgeCollapse2:GEAR_KnowledgeCollapse2
GEAR_KnowledgeCollapse3:GEAR_KnowledgeCollapse3
GEAR_KnowledgeCollapse4:GEAR_KnowledgeCollapse4
GEAR_KnowledgeMilton:GEAR_KnowledgeMilton
GEAR_KnowledgeMysteryLake:GEAR_KnowledgeMysteryLake
GEAR_KnowledgePVbook1:GEAR_KnowledgePVbook1
GEAR_KnowledgePVbook2:GEAR_KnowledgePVbook2
GEAR_KnowledgePVbook3:GEAR_KnowledgePVbook3
GEAR_LakeCabinKey1:GEAR_LakeCabinKey1
GEAR_LakeCabinKey2:GEAR_LakeCabinKey2
GEAR_LakeCabinKey3:GEAR_LakeCabinKey3
GEAR_LakeDeerHuntNote:GEAR_LakeDeerHuntNote
GEAR_LakeIncidentNote:GEAR_LakeIncidentNote
GEAR_LakeLetter1:GEAR_LakeLetter1
GEAR_LakesFlareCacheNote:GEAR_LakesFlareCacheNote
GEAR_LakeTrailerKey1:GEAR_LakeTrailerKey1
GEAR_LakeWolfCullNote:GEAR_LakeWolfCullNote
GEAR_LampFuel:GEAR_LampFuel
GEAR_LampFuelFull:GEAR_LampFuelFull
GEAR_Leather:GEAR_Leather
GEAR_LeatherDried:GEAR_LeatherDried
GEAR_LeatherHide:GEAR_LeatherHide
GEAR_LeatherHideDried:GEAR_LeatherHideDried
GEAR_LeatherShoes:GEAR_LeatherShoes
GEAR_LeatherStrips:GEAR_LeatherStrips
GEAR_LetterBundle:GEAR_LetterBundle
GEAR_LightParka:GEAR_LightParka
GEAR_LilyClimbMap:GEAR_LilyClimbMap
GEAR_Line:GEAR_Line
GEAR_LongUnderwear:GEAR_LongUnderwear
GEAR_LongUnderwearStart:GEAR_LongUnderwearStart
GEAR_LongUnderwearWool:GEAR_LongUnderwearWool
GEAR_MackinawJacket:GEAR_MackinawJacket
GEAR_MagnifyingLens:GEAR_MagnifyingLens
GEAR_MapleSapling:GEAR_MapleSapling
GEAR_MapleSaplingDried:GEAR_MapleSaplingDried
GEAR_MapleSyrup:GEAR_MapleSyrup
GEAR_MedicalSupplies:GEAR_MedicalSupplies
GEAR_MedicalSupplies_hangar:GEAR_MedicalSupplies_hangar
GEAR_MilitaryParka:GEAR_MilitaryParka
GEAR_MiltonCaveLetter:GEAR_MiltonCaveLetter
GEAR_MiltonDepositBoxKey1:GEAR_MiltonDepositBoxKey1
GEAR_MiltonDepositBoxKey2:GEAR_MiltonDepositBoxKey2
GEAR_MiltonDepositBoxKey3:GEAR_MiltonDepositBoxKey3
GEAR_MiltonFlareGunNote:GEAR_MiltonFlareGunNote
GEAR_MiltonGardenCache:GEAR_MiltonGardenCache
GEAR_MiltonLetter1:GEAR_MiltonLetter1
GEAR_MiltonLetter2:GEAR_MiltonLetter2
GEAR_MiltonParkNotice:GEAR_MiltonParkNotice
GEAR_MiltonPostOfficeCollectible1:GEAR_MiltonPostOfficeCollectible1
GEAR_MiltonStoreNotice:GEAR_MiltonStoreNotice
GEAR_Mittens:GEAR_Mittens
GEAR_MooseHide:GEAR_MooseHide
GEAR_MooseHideBag:GEAR_MooseHideBag
GEAR_MooseHideCloak:GEAR_MooseHideCloak
GEAR_MooseHideDried:GEAR_MooseHideDried
GEAR_MooseQuarter:GEAR_MooseQuarter
GEAR_MountainTownFarmKey:GEAR_MountainTownFarmKey
GEAR_MountainTownFarmNote:GEAR_MountainTownFarmNote
GEAR_MountainTownLockBoxKey:GEAR_MountainTownLockBoxKey
GEAR_MRE:GEAR_MRE
GEAR_MuklukBoots:GEAR_MuklukBoots
GEAR_Newsprint:GEAR_Newsprint
GEAR_NewsprintBootStuffing:GEAR_NewsprintBootStuffing
GEAR_NewsprintInsulation:GEAR_NewsprintInsulation
GEAR_NewsprintRoll:GEAR_NewsprintRoll
GEAR_NoteMCU:GEAR_NoteMCU
GEAR_NULL:GEAR_NULL
GEAR_Nylon:GEAR_Nylon
GEAR_OldLadyStolenItem:GEAR_OldLadyStolenItem
GEAR_OldMansBeardDressing:GEAR_OldMansBeardDressing
GEAR_OldMansBeardHarvested:GEAR_OldMansBeardHarvested
GEAR_PackMatches:GEAR_PackMatches
GEAR_PaperStack:GEAR_PaperStack
GEAR_PassengerManifest:GEAR_PassengerManifest
GEAR_PeanutButter:GEAR_PeanutButter
GEAR_PinnacleCanPeaches:GEAR_PinnacleCanPeaches
GEAR_PlaidShirt:GEAR_PlaidShirt
GEAR_PlaneCrashID1:GEAR_PlaneCrashID1
GEAR_PlaneCrashID10:GEAR_PlaneCrashID10
GEAR_PlaneCrashID2:GEAR_PlaneCrashID2
GEAR_PlaneCrashID3:GEAR_PlaneCrashID3
GEAR_PlaneCrashID4:GEAR_PlaneCrashID4
GEAR_PlaneCrashID5:GEAR_PlaneCrashID5
GEAR_PlaneCrashID6:GEAR_PlaneCrashID6
GEAR_PlaneCrashID7:GEAR_PlaneCrashID7
GEAR_PlaneCrashID8:GEAR_PlaneCrashID8
GEAR_PlaneCrashID9:GEAR_PlaneCrashID9
GEAR_PlantSurvivalNote:GEAR_PlantSurvivalNote
GEAR_PostCard_AC_CentralSpire:GEAR_PostCard_AC_CentralSpire
GEAR_PostCard_AC_TopShelf:GEAR_PostCard_AC_TopShelf
GEAR_PostCard_BI_EchoOne-RadioTower:GEAR_PostCard_BI_EchoOne-RadioTower
GEAR_PostCard_CR_AbandonedLookout:GEAR_PostCard_CR_AbandonedLookout
GEAR_PostCard_FM_MuskegOverlook:GEAR_PostCard_FM_MuskegOverlook
GEAR_PostCard_FM_ShortwaveTower:GEAR_PostCard_FM_ShortwaveTower
GEAR_PostCard_ML_ForestryLookout:GEAR_PostCard_ML_ForestryLookout
GEAR_PostCard_ML_LakeOverlook:GEAR_PostCard_ML_LakeOverlook
GEAR_PostCard_MT_RadioTower:GEAR_PostCard_MT_RadioTower
GEAR_PostCard_PV_SignalHill:GEAR_PostCard_PV_SignalHill
GEAR_PostCard_RV_Pensive:GEAR_PostCard_RV_Pensive
GEAR_PostCard_TM_AndresPeak:GEAR_PostCard_TM_AndresPeak
GEAR_PostCard_TM_TailSection:GEAR_PostCard_TM_TailSection
GEAR_PremiumWinterCoat:GEAR_PremiumWinterCoat
GEAR_PrisonBusNote:GEAR_PrisonBusNote
GEAR_Prybar:GEAR_Prybar
GEAR_QualityWinterCoat:GEAR_QualityWinterCoat
GEAR_RabbitCarcass:GEAR_RabbitCarcass
GEAR_RabbitPelt:GEAR_RabbitPelt
GEAR_RabbitPeltDried:GEAR_RabbitPeltDried
GEAR_RabbitskinHat:GEAR_RabbitskinHat
GEAR_RabbitSkinMittens:GEAR_RabbitSkinMittens
GEAR_RadioParts:GEAR_RadioParts
GEAR_RawMeatBear:GEAR_RawMeatBear
GEAR_RawMeatDeer:GEAR_RawMeatDeer
GEAR_RawMeatMoose:GEAR_RawMeatMoose
GEAR_RawMeatRabbit:GEAR_RawMeatRabbit
GEAR_RawMeatWolf:GEAR_RawMeatWolf
GEAR_ReclaimedWoodB:GEAR_ReclaimedWoodB
GEAR_RecycledCan:GEAR_RecycledCan
GEAR_ReishiMushroom:GEAR_ReishiMushroom
GEAR_ReishiPrepared:GEAR_ReishiPrepared
GEAR_ReishiTea:GEAR_ReishiTea
GEAR_Revolver:GEAR_Revolver
GEAR_RevolverAmmoBox:GEAR_RevolverAmmoBox
GEAR_RevolverAmmoCasing:GEAR_RevolverAmmoCasing
GEAR_RevolverAmmoSingle:GEAR_RevolverAmmoSingle
GEAR_Rifle:GEAR_Rifle
GEAR_RifleAmmoBox:GEAR_RifleAmmoBox
GEAR_RifleAmmoCasing:GEAR_RifleAmmoCasing
GEAR_RifleAmmoSingle:GEAR_RifleAmmoSingle
GEAR_RifleCleaningKit:GEAR_RifleCleaningKit
GEAR_RifleHuntingLodge:GEAR_RifleHuntingLodge
GEAR_Rope:GEAR_Rope
GEAR_RoseHip:GEAR_RoseHip
GEAR_RosehipsPrepared:GEAR_RosehipsPrepared
GEAR_RoseHipTea:GEAR_RoseHipTea
GEAR_RuralRegionFarmKey:GEAR_RuralRegionFarmKey
GEAR_ScrapLead:GEAR_ScrapLead
GEAR_ScrapMetal:GEAR_ScrapMetal
GEAR_SewingKit:GEAR_SewingKit
GEAR_SharpeningStone:GEAR_SharpeningStone
GEAR_ShedCodeNote:GEAR_ShedCodeNote
GEAR_Shovel:GEAR_Shovel
GEAR_SimpleTools:GEAR_SimpleTools
GEAR_SkiBoots:GEAR_SkiBoots
GEAR_SkiGloves:GEAR_SkiGloves
GEAR_SkiJacket:GEAR_SkiJacket
GEAR_Snare:GEAR_Snare
GEAR_Soda:GEAR_Soda
GEAR_SodaEnergy:GEAR_SodaEnergy
GEAR_SodaGrape:GEAR_SodaGrape
GEAR_SodaOrange:GEAR_SodaOrange
GEAR_Softwood:GEAR_Softwood
GEAR_SpearHead:GEAR_SpearHead
GEAR_SprayPaintCan:GEAR_SprayPaintCan
GEAR_SprayPaintCanGlyphA:GEAR_SprayPaintCanGlyphA
GEAR_StagQuarter:GEAR_StagQuarter
GEAR_Stick:GEAR_Stick
GEAR_Stone:GEAR_Stone
GEAR_StumpRemover:GEAR_StumpRemover
GEAR_SurvivalSchoolClothing:GEAR_SurvivalSchoolClothing
GEAR_SurvivalSchoolDeerHunt:GEAR_SurvivalSchoolDeerHunt
GEAR_SurvivalSchoolFishing:GEAR_SurvivalSchoolFishing
GEAR_SurvivalSchoolPlants:GEAR_SurvivalSchoolPlants
GEAR_SurvivalSchoolRabbits:GEAR_SurvivalSchoolRabbits
GEAR_SurvivalSchoolWolfHunt:GEAR_SurvivalSchoolWolfHunt
GEAR_TechnicalBackpack:GEAR_TechnicalBackpack
GEAR_TeeShirt:GEAR_TeeShirt
GEAR_TimberwolfQuarter:GEAR_TimberwolfQuarter
GEAR_Tinder:GEAR_Tinder
Gear_TomatoSoupCan:Gear_TomatoSoupCan
GEAR_Toque:GEAR_Toque
GEAR_Torch:GEAR_Torch
GEAR_TrailerSupplies:GEAR_TrailerSupplies
GEAR_TransponderParts:GEAR_TransponderParts
GEAR_UtilitiesBill:GEAR_UtilitiesBill
GEAR_Water1000ml:GEAR_Water1000ml
GEAR_Water500ml:GEAR_Water500ml
GEAR_WaterPurificationTablets:GEAR_WaterPurificationTablets
GEAR_WaterSupplyNotPotable:GEAR_WaterSupplyNotPotable
GEAR_WaterSupplyPotable:GEAR_WaterSupplyPotable
GEAR_WaterTowerNote:GEAR_WaterTowerNote
GEAR_WillBoots:GEAR_WillBoots
GEAR_WillBootsStart:GEAR_WillBootsStart
GEAR_WillPants:GEAR_WillPants
GEAR_WillPantsStart:GEAR_WillPantsStart
GEAR_WillParka:GEAR_WillParka
GEAR_WillParkaHangar:GEAR_WillParkaHangar
GEAR_WillParka_Table:GEAR_WillParka_Table
GEAR_WillParka_Tossed:GEAR_WillParka_Tossed
GEAR_WillShirt:GEAR_WillShirt
GEAR_WillShirtStart:GEAR_WillShirtStart
GEAR_WillSweater:GEAR_WillSweater
GEAR_WillSweaterStart:GEAR_WillSweaterStart
GEAR_WillToque:GEAR_WillToque
GEAR_WolfCarcass:GEAR_WolfCarcass
GEAR_WolfPelt:GEAR_WolfPelt
GEAR_WolfPeltDried:GEAR_WolfPeltDried
GEAR_WolfQuarter:GEAR_WolfQuarter
GEAR_WolfSkinCape:GEAR_WolfSkinCape
GEAR_WolfSkinCapeTallTales:GEAR_WolfSkinCapeTallTales
GEAR_WoodMatches:GEAR_WoodMatches
GEAR_WoolShirt:GEAR_WoolShirt
GEAR_WoolSocks:GEAR_WoolSocks
GEAR_WoolSweater:GEAR_WoolSweater
GEAR_WoolWrap:GEAR_WoolWrap
GEAR_WoolWrapCap:GEAR_WoolWrapCap
GEAR_WorkBoots:GEAR_WorkBoots
GEAR_WorkGloves:GEAR_WorkGloves
GEAR_WorkPants:GEAR_WorkPants
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>800080</Color>
                  <VariableType>String</VariableType>
                  <Length>128</Length>
                  <Unicode>1</Unicode>
                  <CodePage>0</CodePage>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>item_spawn_string+14</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>9077</ID>
              <Description>"Instant Cure/Dry Items"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-11-07
  Author : sub1to
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(_24f)
label(_1f)
label(evolve_item_hook)
label(evolve_item_bytes)
registersymbol(evolve_item_hook)
registersymbol(evolve_item_bytes)
aobScanModule(hook,GameAssembly.dll,F3 0F 11 73 2C 48 8B 5C 24 70)

newmem:
evolve_item_bytes:
  readMem(hook, 5)
  jmp returnhere

_24f:
  dd (float)24

_1f:
  dd (float)1

code:
  movd xmm7, [_24f]
  movd xmm6, [rbx+24]	// m_TimeToEvolveGameDays
  mulss xmm6, xmm7
  movd xmm7, [_1f]
  addss xmm6, xmm7
  jmp evolve_item_bytes

hook:
evolve_item_hook:
  jmp code
  returnhere:



[DISABLE]
evolve_item_hook:
  readMem(evolve_item_bytes, 5)

unregistersymbol(evolve_item_hook)
unregistersymbol(evolve_item_bytes)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+1157854

GameAssembly.dll+115782A: 48 85 FF                 - test rdi,rdi
GameAssembly.dll+115782D: 74 45                    - je GameAssembly.dll+1157874
GameAssembly.dll+115782F: 48 8B 87 80 00 00 00     - mov rax,[rdi+00000080]
GameAssembly.dll+1157836: 48 85 C0                 - test rax,rax
GameAssembly.dll+1157839: 74 33                    - je GameAssembly.dll+115786E
GameAssembly.dll+115783B: F3 0F 10 88 90 02 00 00  - movss xmm1,[rax+00000290]
GameAssembly.dll+1157843: F3 0F 59 48 78           - mulss xmm1,[rax+78]
GameAssembly.dll+1157848: F3 0F 5E F1              - divss xmm6,xmm1
GameAssembly.dll+115784C: F3 0F 59 F0              - mulss xmm6,xmm0
GameAssembly.dll+1157850: F3 0F 58 F7              - addss xmm6,xmm7
// ---------- INJECTING HERE ----------
GameAssembly.dll+1157854: F3 0F 11 73 2C           - movss [rbx+2C],xmm6
// ---------- DONE INJECTING  ----------
GameAssembly.dll+1157859: 48 8B 5C 24 70           - mov rbx,[rsp+70]
GameAssembly.dll+115785E: 0F 28 74 24 50           - movaps xmm6,[rsp+50]
GameAssembly.dll+1157863: 0F 28 7C 24 40           - movaps xmm7,[rsp+40]
GameAssembly.dll+1157868: 48 83 C4 60              - add rsp,60
GameAssembly.dll+115786C: 5F                       - pop rdi
GameAssembly.dll+115786D: C3                       - ret
GameAssembly.dll+115786E: E8 8D 2B F7 FE           - call GameAssembly.dll+CA400
GameAssembly.dll+1157873: CC                       - int 3
GameAssembly.dll+1157874: E8 87 2B F7 FE           - call GameAssembly.dll+CA400
GameAssembly.dll+1157879: CC                       - int 3
}
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>8708</ID>
          <Description>"Fire"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="1" RealAddress="00000000"/>
          <Color>C08000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8686</ID>
              <Description>"Campfire Tick"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState Activated="1"/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{
  +80  flags? 0 = fire is out, 6 = burning

  +A0  max ember time
  +A4  ember time

  +B8  time consumed         time consumed can go past the max burn time, when it's on embers
  +BC  time consumed 2
  +C0  max burn time

  +D0  temperature

}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(code_temp)
label(fire_burn_hook)
label(fire_burn_bytes)
label(fire_burn_base_ptr)
label(fire_burn_infinite_toggle)
label(fire_burn_temp_toggle)
label(fire_burn_temp_value)
registersymbol(fire_burn_hook)
registersymbol(fire_burn_bytes)
registersymbol(fire_burn_base_ptr)
registersymbol(fire_burn_infinite_toggle)
registersymbol(fire_burn_temp_toggle)
registersymbol(fire_burn_temp_value)
aobScanModule(hook,GameAssembly.dll,f3 0f 10 b3 ? ? ? ? 33 c9 e8 ? ? ? ? 45 33 c0)

newmem:
fire_burn_bytes:
  //movss xmm6,[rbx+000000B8]
  readMem(hook, 8)
  jmp returnhere

fire_burn_base_ptr:
  dq 0

fire_burn_infinite_toggle:
  db 0

fire_burn_temp_toggle:
  db 0

fire_burn_temp_value:
  dd (float)20

code:
  mov [fire_burn_base_ptr], rbx

  cmp byte ptr [fire_burn_infinite_toggle], 0
  jz code_temp
  mov qword ptr [rbx+B8], 0

code_temp:
  cmp byte ptr [fire_burn_temp_toggle], 0
  jz fire_burn_bytes
  mov ecx, [fire_burn_temp_value]
  mov [rbx+D0], ecx

  jmp fire_burn_bytes

hook:
fire_burn_hook:
  jmp code
  nop
  nop
  nop
  returnhere:



[DISABLE]
fire_burn_hook:
  //db F3 0F 10 B3 B8 00 00 00
  readMem(fire_burn_bytes, 8)

unregistersymbol(fire_burn_hook)
unregistersymbol(fire_burn_bytes)
unregistersymbol(fire_burn_base_ptr)
unregistersymbol(fire_burn_infinite_toggle)
unregistersymbol(fire_burn_temp_toggle)
unregistersymbol(fire_burn_temp_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+1198427

"GameAssembly.dll"+11983FC: 83 BB 80 00 00 00 00     -  cmp dword ptr [rbx+00000080],00
"GameAssembly.dll"+1198403: 0F 84 2E 03 00 00        -  je GameAssembly.dll+1198737
"GameAssembly.dll"+1198409: 33 D2                    -  xor edx,edx
"GameAssembly.dll"+119840B: 48 8B CB                 -  mov rcx,rbx
"GameAssembly.dll"+119840E: E8 AD 3C 00 00           -  call GameAssembly.dll+119C0C0
"GameAssembly.dll"+1198413: 80 7B 21 00              -  cmp byte ptr [rbx+21],00
"GameAssembly.dll"+1198417: 0F 85 8B 00 00 00        -  jne GameAssembly.dll+11984A8
"GameAssembly.dll"+119841D: 33 D2                    -  xor edx,edx
"GameAssembly.dll"+119841F: 48 8B CB                 -  mov rcx,rbx
"GameAssembly.dll"+1198422: E8 B9 3F 00 00           -  call GameAssembly.dll+119C3E0
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+1198427: F3 0F 10 B3 B8 00 00 00  -  movss xmm6,[rbx+000000B8]
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+119842F: 33 C9                    -  xor ecx,ecx
"GameAssembly.dll"+1198431: E8 2A 3E 88 01           -  call GameAssembly.dll+2A1C260
"GameAssembly.dll"+1198436: 45 33 C0                 -  xor r8d,r8d
"GameAssembly.dll"+1198439: 0F 28 C8                 -  movaps xmm1,xmm0
"GameAssembly.dll"+119843C: 48 8B CB                 -  mov rcx,rbx
"GameAssembly.dll"+119843F: E8 2C FC FF FF           -  call GameAssembly.dll+1198070
"GameAssembly.dll"+1198444: F3 0F 58 C6              -  addss xmm0,xmm6
"GameAssembly.dll"+1198448: F3 0F 11 83 B8 00 00 00  -  movss [rbx+000000B8],xmm0
"GameAssembly.dll"+1198450: F3 0F 10 B3 BC 00 00 00  -  movss xmm6,[rbx+000000BC]
"GameAssembly.dll"+1198458: 48 8B 0D 21 1C 2F 03     -  mov rcx,[GameAssembly.dll+448A080]
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8694</ID>
                  <Description>"Infinite Burn Time"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
fire_burn_infinite_toggle:
  db 01

[DISABLE]
fire_burn_infinite_toggle:
  db 00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8705</ID>
                  <Description>"Set Temperature (Requires fuel to activate/sync)"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
fire_burn_temp_toggle:
  db 01

[DISABLE]
fire_burn_temp_toggle:
  db 00
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8706</ID>
                      <Description>"Temp"</Description>
                      <LastState Value="20" RealAddress="7FFF35810017"/>
                      <Color>800080</Color>
                      <VariableType>Float</VariableType>
                      <Address>fire_burn_temp_value</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8688</ID>
                  <Description>"Ember Time Limit"</Description>
                  <LastState Value="500" RealAddress="23227670690"/>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>fire_burn_base_ptr</Address>
                  <Offsets>
                    <Offset>A0</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8687</ID>
                  <Description>"Ember Time"</Description>
                  <LastState Value="0" RealAddress="23227670694"/>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>fire_burn_base_ptr</Address>
                  <Offsets>
                    <Offset>A4</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8689</ID>
                  <Description>"Burn Time"</Description>
                  <LastState Value="650.8821411" RealAddress="232276706A8"/>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>fire_burn_base_ptr</Address>
                  <Offsets>
                    <Offset>B8</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8690</ID>
                  <Description>"Burn Time 2"</Description>
                  <LastState Value="731.7749023" RealAddress="232276706AC"/>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>fire_burn_base_ptr</Address>
                  <Offsets>
                    <Offset>BC</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8691</ID>
                  <Description>"Burn Time Limit"</Description>
                  <LastState Value="81000" RealAddress="232276706B0"/>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>fire_burn_base_ptr</Address>
                  <Offsets>
                    <Offset>C0</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8692</ID>
                  <Description>"Temperature"</Description>
                  <LastState Value="8" RealAddress="232276706C0"/>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>fire_burn_base_ptr</Address>
                  <Offsets>
                    <Offset>D0</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>8891</ID>
          <Description>"Weather / Time"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="1" RealAddress="00000000"/>
          <Color>C08000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8892</ID>
              <Description>"UniStormWeatherSystem"</Description>
              <LastState Activated="1"/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-10-30
  Author : sub1to

}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(weather_hook)
label(weather_bytes)
label(weather_base_ptr)
registersymbol(weather_hook)
registersymbol(weather_bytes)
registersymbol(weather_base_ptr)

//  class: UniStormWeatherSystem
//  RVA: 0x199AC60 Offset: 0x1999C60 VA: 0x7FFB0D36AC60
//  public void Update() { }
aobScanModule(hook,GameAssembly.dll,40 55 41 57 48 8D AC 24 D8 FE FF FF)

newmem:
weather_bytes:
  //push rbp
  //push r15
  //lea rbp,[rsp-00000128]
  readMem(hook, 12)
  jmp returnhere

weather_base_ptr:
  dq 0

code:
  mov [weather_base_ptr], rcx
  jmp weather_bytes

hook:
weather_hook:
  jmp code
  nop
  nop
  nop
  nop
  nop
  nop
  nop
  returnhere:



[DISABLE]
weather_hook:
  //movss [rbp+60],xmm8
  //db 40 55 41 57 48 8D AC 24 D8 FE FF FF
  readMem(weather_bytes, 12)

unregistersymbol(weather_hook)
unregistersymbol(weather_bytes)
unregistersymbol(weather_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+199AC60

"GameAssembly.dll"+199AC56: CC                       -  int 3
"GameAssembly.dll"+199AC57: CC                       -  int 3
"GameAssembly.dll"+199AC58: CC                       -  int 3
"GameAssembly.dll"+199AC59: CC                       -  int 3
"GameAssembly.dll"+199AC5A: CC                       -  int 3
"GameAssembly.dll"+199AC5B: CC                       -  int 3
"GameAssembly.dll"+199AC5C: CC                       -  int 3
"GameAssembly.dll"+199AC5D: CC                       -  int 3
"GameAssembly.dll"+199AC5E: CC                       -  int 3
"GameAssembly.dll"+199AC5F: CC                       -  int 3
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+199AC60: 40 55                    -  push rbp
"GameAssembly.dll"+199AC62: 41 57                    -  push r15
"GameAssembly.dll"+199AC64: 48 8D AC 24 D8 FE FF FF  -  lea rbp,[rsp-00000128]
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+199AC6C: 48 81 EC 28 02 00 00     -  sub rsp,00000228
"GameAssembly.dll"+199AC73: 80 3D A5 D1 AB 02 00     -  cmp byte ptr [GameAssembly.dll+4457E1F],00
"GameAssembly.dll"+199AC7A: 4C 8B F9                 -  mov r15,rcx
"GameAssembly.dll"+199AC7D: 75 11                    -  jne GameAssembly.dll+199AC90
"GameAssembly.dll"+199AC7F: B9 02 09 01 00           -  mov ecx,00010902
"GameAssembly.dll"+199AC84: E8 07 71 6E FE           -  call GameAssembly.dll+81D90
"GameAssembly.dll"+199AC89: C6 05 8F D1 AB 02 01     -  mov byte ptr [GameAssembly.dll+4457E1F],01
"GameAssembly.dll"+199AC90: 33 C0                    -  xor eax,eax
"GameAssembly.dll"+199AC92: 48 89 45 D0              -  mov [rbp-30],rax
"GameAssembly.dll"+199AC96: 48 89 45 D8              -  mov [rbp-28],rax
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>9030</ID>
                  <Description>"Weather Stage"</Description>
                  <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:DenseFog
1:LightSnow
2:HeavySnow
3:PartlyCloudy
4:Clear
5:Cloudy
6:LightFog
7:Blizzard
8:ClearAurora
9:ToxicFog
</DropDownList>
                  <LastState Value="4" RealAddress="23286427614"/>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>weather_base_ptr</Address>
                  <Offsets>
                    <Offset>D4</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>9029</ID>
                  <Description>"Minute Counter"</Description>
                  <LastState Value="42" RealAddress="232864275A8"/>
                  <Color>808080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>weather_base_ptr</Address>
                  <Offsets>
                    <Offset>68</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8897</ID>
                  <Description>"Hour Counter"</Description>
                  <LastState Value="17" RealAddress="232864275AC"/>
                  <Color>808080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>weather_base_ptr</Address>
                  <Offsets>
                    <Offset>6C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8898</ID>
                  <Description>"Day Counter"</Description>
                  <LastState Value="123" RealAddress="232864275B0"/>
                  <Color>808080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>weather_base_ptr</Address>
                  <Offsets>
                    <Offset>70</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8899</ID>
                  <Description>"Temperature"</Description>
                  <LastState Value="-3" RealAddress="232864275B4"/>
                  <ShowAsSigned>1</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>weather_base_ptr</Address>
                  <Offsets>
                    <Offset>74</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8900</ID>
                  <Description>"Day Length"</Description>
                  <LastState Value="7200" RealAddress="232864275B8"/>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>weather_base_ptr</Address>
                  <Offsets>
                    <Offset>78</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8901</ID>
                  <Description>"Normalized Time (use to set time of day)"</Description>
                  <LastState Value="0.7377701402" RealAddress="232864275BC"/>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>weather_base_ptr</Address>
                  <Offsets>
                    <Offset>7C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>9026</ID>
                  <Description>"Fog Density"</Description>
                  <LastState Value="0.0007999999798" RealAddress="2328642767C"/>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>weather_base_ptr</Address>
                  <Offsets>
                    <Offset>13C</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8912</ID>
              <Description>"TimeOfDay"</Description>
              <LastState Activated="1"/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.98 87574 S
  Date   : 2021-12-09
  Author : sub1to
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(time_of_day_hook)
label(time_of_day_bytes)
label(time_of_day_base_ptr)
registersymbol(time_of_day_hook)
registersymbol(time_of_day_bytes)
registersymbol(time_of_day_base_ptr)

//  class: TimeOfDay
//  RVA: 0x1C34E90 Offset: 0x1C33A90 VA: 0x7FFB68B34E90
//  public void Update() { }
aobScanModule(hook,GameAssembly.dll,4c 8b dc 57 48 83 ec ? 49 c7 43 ? ? ? ? ? 49 89 5b ? 49 89 6b ? 49 89 73 ? 48 8b d9 33 ed 40 38 2d ? ? ? ? 75 ? 48 8b 05 ? ? ? ? 48 63 90 ? ? ? ? 48 8b 05 ? ? ? ? 8b 8c 02 ? ? ? ? 49 89 6b ? 49 89 6b ? 49 89 6b ? 4d 8d 43 ? 8b 94 02 ? ? ? ? e8 ? ? ? ? 90 33 c9 ff 15 ? ? ? ? 90 c6 05 ? ? ? ? ? 48 8b 05 ? ? ? ? f6 80 ? ? ? ? ? 74 ? 83 b8 ? ? ? ? ? 75 ? 48 8b c8 e8 ? ? ? ? 48 8b 05 ? ? ? ? 48 8b 80 ? ? ? ? 48 8b 88 ? ? ? ? 48 85 c9 0f 84 ? ? ? ? 48 8b 01 48 8b 90 ? ? ? ? ff 90 ? ? ? ? 84 c0)

newmem:
time_of_day_bytes:
  //mov r11,rsp
  //push rdi
  //sub rsp,40
  readMem(hook, 8)
  jmp returnhere

time_of_day_base_ptr:
  dq 0

code:
  mov [time_of_day_base_ptr], rcx

  jmp time_of_day_bytes

hook:
time_of_day_hook:
  jmp code
  nop
  nop
  nop
  returnhere:



[DISABLE]
time_of_day_hook:
  //4C 8B DC 57 48 83 EC 40
  readMem(time_of_day_bytes, 8)

unregistersymbol(time_of_day_hook)
unregistersymbol(time_of_day_bytes)
unregistersymbol(time_of_day_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+14BA6D0

"GameAssembly.dll"+14BA6C6: CC                       -  int 3
"GameAssembly.dll"+14BA6C7: CC                       -  int 3
"GameAssembly.dll"+14BA6C8: CC                       -  int 3
"GameAssembly.dll"+14BA6C9: CC                       -  int 3
"GameAssembly.dll"+14BA6CA: CC                       -  int 3
"GameAssembly.dll"+14BA6CB: CC                       -  int 3
"GameAssembly.dll"+14BA6CC: CC                       -  int 3
"GameAssembly.dll"+14BA6CD: CC                       -  int 3
"GameAssembly.dll"+14BA6CE: CC                       -  int 3
"GameAssembly.dll"+14BA6CF: CC                       -  int 3
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+14BA6D0: 4C 8B DC                 -  mov r11,rsp
"GameAssembly.dll"+14BA6D3: 57                       -  push rdi
"GameAssembly.dll"+14BA6D4: 48 83 EC 40              -  sub rsp,40
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+14BA6D8: 49 C7 43 D8 FE FF FF FF  -  mov qword ptr [r11-28],FFFFFFFE
"GameAssembly.dll"+14BA6E0: 49 89 5B 08              -  mov [r11+08],rbx
"GameAssembly.dll"+14BA6E4: 49 89 6B 10              -  mov [r11+10],rbp
"GameAssembly.dll"+14BA6E8: 49 89 73 18              -  mov [r11+18],rsi
"GameAssembly.dll"+14BA6EC: 48 8B D9                 -  mov rbx,rcx
"GameAssembly.dll"+14BA6EF: 33 ED                    -  xor ebp,ebp
"GameAssembly.dll"+14BA6F1: 40 38 2D A3 98 F9 02     -  cmp [GameAssembly.dll+4453F9B],bpl
"GameAssembly.dll"+14BA6F8: 75 49                    -  jne GameAssembly.dll+14BA743
"GameAssembly.dll"+14BA6FA: 48 8B 05 3F B6 F8 02     -  mov rax,[GameAssembly.dll+4445D40]
"GameAssembly.dll"+14BA701: 48 63 90 B8 00 00 00     -  movsxd  rdx,dword ptr [rax+000000B8]
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8914</ID>
                  <Description>"Day Length Scale"</Description>
                  <LastState Value="1" RealAddress="2328B1F3088"/>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>time_of_day_base_ptr</Address>
                  <Offsets>
                    <Offset>88</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>9035</ID>
              <Description>"Weather Override"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-11-01
  Author : sub1to
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(weather_stage_hook)
label(weather_stage_bytes)
label(weather_stage_value)
registersymbol(weather_stage_hook)
registersymbol(weather_stage_bytes)
registersymbol(weather_stage_value)

//  class: UniStormWeatherSystem
//  RVA: 0x19A01B0 Offset: 0x199F1B0 VA: 0x7FFB0D3701B0
//  public void SetWeatherStateAndBlendDirectly(WeatherStage ws, WeatherStage prevWS, float elapsedGameTimeInStage, float transitionGameTimeForStage)
aobScanModule(hook,GameAssembly.dll,89 BB D4 00 00 00 48)

newmem:
weather_stage_bytes:
  //mov [rbx+000000D4],edi
  readMem(hook, 6)
  jmp returnhere

weather_stage_value:
  db FF

code:

  movzx eax, byte ptr [weather_stage_value]
  cmp al, FF
  jz weather_stage_bytes
  mov edi, eax

  jmp weather_stage_bytes

hook:
weather_stage_hook:
  jmp code
  nop
  returnhere:



[DISABLE]
weather_stage_hook:
  //89 BB D4 00 00 00
  readMem(weather_stage_bytes, 6)

unregistersymbol(weather_stage_hook)
unregistersymbol(weather_stage_bytes)
unregistersymbol(weather_stage_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+19A0298

GameAssembly.dll+19A026B: 0F 84 EF 00 00 00              - je GameAssembly.dll+19A0360
GameAssembly.dll+19A0271: 33 D2                          - xor edx,edx
GameAssembly.dll+19A0273: 48 8B C8                       - mov rcx,rax
GameAssembly.dll+19A0276: E8 45 A8 79 FF                 - call GameAssembly.dll+113AAC0
GameAssembly.dll+19A027B: C7 83 B8 02 00 00 00 00 F0 41  - mov [rbx+000002B8],41F00000
GameAssembly.dll+19A0285: 45 33 C0                       - xor r8d,r8d
GameAssembly.dll+19A0288: 8B D7                          - mov edx,edi
GameAssembly.dll+19A028A: 48 8B CB                       - mov rcx,rbx
GameAssembly.dll+19A028D: E8 CE 24 00 00                 - call GameAssembly.dll+19A2760
GameAssembly.dll+19A0292: 89 B3 D0 00 00 00              - mov [rbx+000000D0],esi
// ---------- INJECTING HERE ----------
GameAssembly.dll+19A0298: 89 BB D4 00 00 00              - mov [rbx+000000D4],edi
// ---------- DONE INJECTING  ----------
GameAssembly.dll+19A029E: 48 8B 0D 63 15 B2 02           - mov rcx,[GameAssembly.dll+44C1808]
GameAssembly.dll+19A02A5: F6 81 2F 01 00 00 02           - test byte ptr [rcx+0000012F],02
GameAssembly.dll+19A02AC: 74 0E                          - je GameAssembly.dll+19A02BC
GameAssembly.dll+19A02AE: 83 B9 E0 00 00 00 00           - cmp dword ptr [rcx+000000E0],00
GameAssembly.dll+19A02B5: 75 05                          - jne GameAssembly.dll+19A02BC
GameAssembly.dll+19A02B7: E8 14 B4 6E FE                 - call GameAssembly.dll+8B6D0
GameAssembly.dll+19A02BC: E8 CF 43 47 FF                 - call GameAssembly.dll+E14690
GameAssembly.dll+19A02C1: 48 85 C0                       - test rax,rax
GameAssembly.dll+19A02C4: 0F 84 90 00 00 00              - je GameAssembly.dll+19A035A
GameAssembly.dll+19A02CA: 48 8B 88 80 00 00 00           - mov rcx,[rax+00000080]
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>9028</ID>
                  <Description>"Weather"</Description>
                  <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:DenseFog
1:LightSnow
2:HeavySnow
3:PartlyCloudy
4:Clear
5:Cloudy
6:LightFog
7:Blizzard
8:ClearAurora
9:ToxicFog
255:None
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>800080</Color>
                  <VariableType>Byte</VariableType>
                  <Address>weather_stage_value</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>8975</ID>
          <Description>"Crafting"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="1" RealAddress="00000000"/>
          <Color>C08000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8976</ID>
              <Description>"Craft Anything Anywhere In 1 Minute (Gotta reload to undo)"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-11-01
  Author : sub1to

}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(blueprint_item_can_craft_blueprint_hook)
label(blueprint_item_can_craft_blueprint_bytes)
registersymbol(blueprint_item_can_craft_blueprint_hook)
registersymbol(blueprint_item_can_craft_blueprint_bytes)
aobScanModule(hook,GameAssembly.dll,8b 46 ? 3b c7 74)

newmem:
blueprint_item_can_craft_blueprint_bytes:
  //mov eax,[rsi+64]
  //cmp eax,edi
  readMem(hook, 5)
  jmp returnhere

code:
  xor rax, rax

  //CraftingLocation.Anywhere
  //public CraftingLocation m_RequiredCraftingLocation; // 0x64
  mov [rsi+64], eax

  //public bool m_RequiresLitFire; // 0x68
  mov [rsi+68], al

  //Remove required tools
  //public ToolsItem m_RequiredTool; // 0x28
  mov [rsi+28], rax

  //public float m_KeroseneLitersRequired; // 0x50
  //public float m_GunpowderKGRequired; // 0x54
  mov [rsi+50], rax

  //required gear amount
  mov rcx, [rsi+18]
  mov [rcx+18], eax

  //public int m_DurationMinutes; // 0x44
  mov ecx, 1
  mov [rsi+44], ecx

  jmp blueprint_item_can_craft_blueprint_bytes

hook:
blueprint_item_can_craft_blueprint_hook:
  jmp code
  returnhere:



[DISABLE]
blueprint_item_can_craft_blueprint_hook:
  //8B 46 64 3B C7
  readMem(blueprint_item_can_craft_blueprint_bytes, 5)

unregistersymbol(blueprint_item_can_craft_blueprint_hook)
unregistersymbol(blueprint_item_can_craft_blueprint_bytes)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+127D86C

GameAssembly.dll+127D846: FF 15 E4 D8 ED 02     - call qword ptr [GameAssembly.dll+415B130]
GameAssembly.dll+127D84C: 90                    - nop
GameAssembly.dll+127D84D: C6 05 96 5A 1D 03 01  - mov byte ptr [GameAssembly.dll+44532EA],01
GameAssembly.dll+127D854: 48 85 DB              - test rbx,rbx
GameAssembly.dll+127D857: 74 13                 - je GameAssembly.dll+127D86C
GameAssembly.dll+127D859: 4C 8B C3              - mov r8,rbx
GameAssembly.dll+127D85C: 48 8B 15 9D B9 26 03  - mov rdx,[GameAssembly.dll+44E9200]
GameAssembly.dll+127D863: 33 C9                 - xor ecx,ecx
GameAssembly.dll+127D865: E8 A6 29 D9 FE        - call GameAssembly.il2cpp_class_get_static_field_data+30
GameAssembly.dll+127D86A: 8B F8                 - mov edi,eax
// ---------- INJECTING HERE ----------
GameAssembly.dll+127D86C: 8B 46 64              - mov eax,[rsi+64]
GameAssembly.dll+127D86F: 3B C7                 - cmp eax,edi
// ---------- DONE INJECTING  ----------
GameAssembly.dll+127D871: 74 04                 - je GameAssembly.dll+127D877
GameAssembly.dll+127D873: 85 C0                 - test eax,eax
GameAssembly.dll+127D875: 75 4B                 - jne GameAssembly.dll+127D8C2
GameAssembly.dll+127D877: 33 D2                 - xor edx,edx
GameAssembly.dll+127D879: 48 8B CE              - mov rcx,rsi
GameAssembly.dll+127D87C: E8 5F 00 00 00        - call GameAssembly.dll+127D8E0
GameAssembly.dll+127D881: 84 C0                 - test al,al
GameAssembly.dll+127D883: 74 3D                 - je GameAssembly.dll+127D8C2
GameAssembly.dll+127D885: 33 D2                 - xor edx,edx
}
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>9051</ID>
          <Description>"Unlocks"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="1" RealAddress="00000000"/>
          <Color>C08000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>9072</ID>
              <Description>"Enable uConsole"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.98 87574 S
  Date   : 2021-12-09
  Author : sub1to

  public sealed class String : IComparable, ICloneable, IConvertible, IEnumerable, IComparable&lt;string&gt;, IEnumerable&lt;char&gt;, IEquatable&lt;string&gt; // TypeDefIndex: 289
	// Fields
	private int m_stringLength; // 0x10
	private char m_firstChar; // 0x14
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
alloc(string,$ff,GameAssembly.dll)
globalalloc(_uconsole_init,1,GameAssembly.dll)
label(returnhere)
label(code)
label(GameManager_Update_hook)
label(GameManager_Update_bytes)
registersymbol(GameManager_Update_hook)
registersymbol(GameManager_Update_bytes)

//  class: GameManager
//  RVA: 0x1607550 Offset: 0x1606150 VA: 0x7FFB68507550
//  public void Update() { }
aobScanModule(hook,GameAssembly.dll,48 8b c4 55 57 41 56 48 8d 68 ? 48 81 ec ? ? ? ? 48 c7 45 ? ? ? ? ? 48 89 58 ? 48 89 70 ? 0f 29 70 ? 0f 29 78 ? 44 0f 29 40 ? 48 8b f1)

//  class: Resources
//  RVA: 0x2A0FFC0 Offset: 0x2A0EFC0 VA: 0x7FFB0E3DFFC0
//  public static Object Load(string path) { }
aobScanModule(Resources_Load,GameAssembly.dll,40 57 48 83 ec ? 48 c7 44 24 ? ? ? ? ? 48 89 5c 24 ? 48 8b f9 80 3d ? ? ? ? ? 75 ? 48 8b 05 ? ? ? ? 48 63 90 ? ? ? ? 48 8b 05 ? ? ? ? 8b 8c 02 ? ? ? ? 45 33 c0 4c 89 44 24 ? 4c 89 44 24 ? 4c 89 44 24 ? 4c 8d 44 24 ? 8b 94 02 ? ? ? ? e8 ? ? ? ? 90 33 c9 ff 15 ? ? ? ? 90 c6 05 ? ? ? ? ? 48 8b 1d ? ? ? ? 48 8b 0d ? ? ? ? f6 81 ? ? ? ? ? 74 ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? 33 d2 48 8b cb e8 ? ? ? ? 48 8b d8 48 8b 05)

//  class: Object
//  RVA: 0x2844950 Offset: 0x2843950 VA: 0x7FFB0E214950
//  public static Object Instantiate(Object original) { }
aobScanModule(Object_Instantiate,GameAssembly.dll,40 53 48 83 ec ? 48 c7 44 24 ? ? ? ? ? 48 8b d9 80 3d ? ? ? ? ? 75 ? 48 8b 05 ? ? ? ? 48 63 90 ? ? ? ? 48 8b 05 ? ? ? ? 8b 8c 02 ? ? ? ? 45 33 c0 4c 89 44 24 ? 4c 89 44 24 ? 4c 89 44 24 ? 4c 8d 44 24 ? 8b 94 02 ? ? ? ? e8 ? ? ? ? 90 33 c9 ff 15 ? ? ? ? 90 c6 05 ? ? ? ? ? 48 8b 0d ? ? ? ? f6 81 ? ? ? ? ? 74 ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? 45 33 c0 48 8b 15 ? ? ? ? 48 8b cb e8 ? ? ? ? 48 8b 05)

string:
  dq 00 // +00 ptr
  dq 00 // +08 padding
  dd 08 // +10 len
  db 'u' 0 'C' 0 'o' 0 'n' 0 's' 0 'o' 0 'l' 0 'e' 0 0

newmem:
GameManager_Update_bytes:
  readMem(hook, 5)
  jmp returnhere

code:

  mov al, [_uconsole_init]
  test al, al
  jnz GameManager_Update_bytes
  mov byte ptr [_uconsole_init], 1

  lea rsp, [rsp-28]
  mov [rsp+20], rcx
  lea rcx, [string]
  call Resources_Load
  mov rcx, rax
  call Object_Instantiate
  mov rcx, [rsp+20]
  lea rsp, [rsp+28]
  jmp GameManager_Update_bytes

hook:
GameManager_Update_hook:
  jmp code
  returnhere:



[DISABLE]
GameManager_Update_hook:
  readMem(GameManager_Update_bytes, 5)

unregistersymbol(GameManager_Update_hook)
unregistersymbol(GameManager_Update_bytes)
dealloc(newmem)
dealloc(string)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+E652C0

GameAssembly.dll+E652A6: CC                       - int 3
GameAssembly.dll+E652A7: E8 54 51 26 FF           - call GameAssembly.dll+CA400
GameAssembly.dll+E652AC: CC                       - int 3
GameAssembly.dll+E652AD: E8 4E 51 26 FF           - call GameAssembly.dll+CA400
GameAssembly.dll+E652B2: CC                       - int 3
GameAssembly.dll+E652B3: E8 48 51 26 FF           - call GameAssembly.dll+CA400
GameAssembly.dll+E652B8: CC                       - int 3
GameAssembly.dll+E652B9: E8 42 51 26 FF           - call GameAssembly.dll+CA400
GameAssembly.dll+E652BE: CC                       - int 3
GameAssembly.dll+E652BF: CC                       - int 3
// ---------- INJECTING HERE ----------
GameAssembly.dll+E652C0: 48 8B C4                 - mov rax,rsp
GameAssembly.dll+E652C3: 55                       - push rbp
// ---------- DONE INJECTING  ----------
GameAssembly.dll+E652C4: 57                       - push rdi
GameAssembly.dll+E652C5: 41 56                    - push r14
GameAssembly.dll+E652C7: 48 8D 68 D8              - lea rbp,[rax-28]
GameAssembly.dll+E652CB: 48 81 EC 10 01 00 00     - sub rsp,00000110
GameAssembly.dll+E652D2: 48 C7 45 C0 FE FF FF FF  - mov qword ptr [rbp-40],FFFFFFFFFFFFFFFE
GameAssembly.dll+E652DA: 48 89 58 08              - mov [rax+08],rbx
GameAssembly.dll+E652DE: 48 89 70 10              - mov [rax+10],rsi
GameAssembly.dll+E652E2: 0F 29 70 D8              - movaps [rax-28],xmm6
GameAssembly.dll+E652E6: 0F 29 78 C8              - movaps [rax-38],xmm7
}
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>8666</ID>
      <Description>"--------------------------"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>8667</ID>
      <Description>"Credits"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>8670</ID>
          <Description>"sub1to: https://fearlessrevolution.com/viewtopic.php?f=4&amp;t=17899"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>8671</ID>
          <Description>"JLee3D: https://fearlessrevolution.com/viewtopic.php?f=4&amp;t=10805"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>8864</ID>
          <Description>"https://github.com/Perfare/Il2CppDumper"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>8669</ID>
      <Description>"--------------------------"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>8665</ID>
      <Description>"Old Stuff"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>4080FF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>8832</ID>
          <Description>"Sprint Instant Recharge"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : tld.exe
  Version: 1.74 58755
  Date   : 2020-04-03
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(sprint_recovery_hook,GameAssembly.dll,f3 41 0f 58 f3 f3 0f 11 73)
alloc(newmem,$1000,"GameAssembly.dll"+516921)

label(code)
label(return)

newmem:
  push rax
  mov rax, 42c80000 //100.f
  movq xmm6, rax
  pop rax

code:
  //addss xmm6,xmm11
  jmp return

sprint_recovery_hook:
  jmp newmem
return:
registersymbol(sprint_recovery_hook)

[DISABLE]

sprint_recovery_hook:
  db F3 41 0F 58 F3

unregistersymbol(sprint_recovery_hook)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+516921

"GameAssembly.dll"+5168FB: 84 C0                    -  test al,al
"GameAssembly.dll"+5168FD: 74 14                    -  je GameAssembly.dll+516913
"GameAssembly.dll"+5168FF: 66 0F 6E 47 5C           -  movd xmm0,[rdi+5C]
"GameAssembly.dll"+516904: 0F 5B C0                 -  cvtdq2ps xmm0,xmm0
"GameAssembly.dll"+516907: F3 41 0F 5E C0           -  divss xmm0,xmm8
"GameAssembly.dll"+51690C: F3 0F 58 C7              -  addss xmm0,xmm7
"GameAssembly.dll"+516910: 0F 28 F8                 -  movaps xmm7,xmm0
"GameAssembly.dll"+516913: F3 41 0F 59 F4           -  mulss xmm6,xmm12
"GameAssembly.dll"+516918: F3 41 0F 59 F2           -  mulss xmm6,xmm10
"GameAssembly.dll"+51691D: F3 0F 59 F7              -  mulss xmm6,xmm7
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+516921: F3 41 0F 58 F3           -  addss xmm6,xmm11
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+516926: F3 0F 11 73 78           -  movss [rbx+78],xmm6
"GameAssembly.dll"+51692B: 33 D2                    -  xor edx,edx
"GameAssembly.dll"+51692D: 48 8B CB                 -  mov rcx,rbx
"GameAssembly.dll"+516930: E8 CB 07 00 00           -  call GameAssembly.dll+517100
"GameAssembly.dll"+516935: 44 0F 2F CE              -  comiss xmm9,xmm6
"GameAssembly.dll"+516939: 77 0A                    -  ja GameAssembly.dll+516945
"GameAssembly.dll"+51693B: 0F 2F F0                 -  comiss xmm6,xmm0
"GameAssembly.dll"+51693E: 76 08                    -  jna GameAssembly.dll+516948
"GameAssembly.dll"+516940: 0F 28 F0                 -  movaps xmm6,xmm0
"GameAssembly.dll"+516943: EB 03                    -  jmp GameAssembly.dll+516948
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8575</ID>
          <Description>"Infinite Ammo"</Description>
          <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8569</ID>
              <Description>"Infinite Ammo"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.74 58755
  Date   : 2020-04-03
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
aobscanmodule(reload_dec_hook,GameAssembly.dll,ff 48 ? 33 d2 48 8b cf)
alloc(newmem,$1000,"GameAssembly.dll"+BB15BD)

label(code)
label(return)

newmem:
  //mov [rax+18], 20

code:
  //dec [rax+18]
  xor edx,edx
  jmp return

reload_dec_hook:
  jmp newmem
return:
registersymbol(reload_dec_hook)

[DISABLE]
reload_dec_hook:
  db FF 48 18 33 D2

unregistersymbol(reload_dec_hook)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+BB15BD

"GameAssembly.dll"+BB15A6: 41 5C                    -  pop r12
"GameAssembly.dll"+BB15A8: 5F                       -  pop rdi
"GameAssembly.dll"+BB15A9: 5E                       -  pop rsi
"GameAssembly.dll"+BB15AA: 5D                       -  pop rbp
"GameAssembly.dll"+BB15AB: C3                       -  ret 
"GameAssembly.dll"+BB15AC: 48 85 F6                 -  test rsi,rsi
"GameAssembly.dll"+BB15AF: 74 49                    -  je GameAssembly.dll+BB15FA
"GameAssembly.dll"+BB15B1: 48 8B 86 20 02 00 00     -  mov rax,[rsi+00000220]
"GameAssembly.dll"+BB15B8: 48 85 C0                 -  test rax,rax
"GameAssembly.dll"+BB15BB: 74 37                    -  je GameAssembly.dll+BB15F4
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+BB15BD: FF 48 18                 -  dec [rax+18]
"GameAssembly.dll"+BB15C0: 33 D2                    -  xor edx,edx
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+BB15C2: 48 8B CE                 -  mov rcx,rsi
"GameAssembly.dll"+BB15C5: E8 C6 EB FB FF           -  call GameAssembly.dll+B70190
"GameAssembly.dll"+BB15CA: EB C9                    -  jmp GameAssembly.dll+BB1595
"GameAssembly.dll"+BB15CC: E8 1F 19 6E FF           -  call GameAssembly.dll+292EF0
"GameAssembly.dll"+BB15D1: 90                       -  nop 
"GameAssembly.dll"+BB15D2: E8 19 19 6E FF           -  call GameAssembly.dll+292EF0
"GameAssembly.dll"+BB15D7: 90                       -  nop 
"GameAssembly.dll"+BB15D8: E8 13 19 6E FF           -  call GameAssembly.dll+292EF0
"GameAssembly.dll"+BB15DD: E8 0E 19 6E FF           -  call GameAssembly.dll+292EF0
"GameAssembly.dll"+BB15E2: E8 09 19 6E FF           -  call GameAssembly.dll+292EF0
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>8574</ID>
              <Description>"Infinite Ammo 2"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.74 58755
  Date   : 2020-04-03
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(reload_dec_batch_hook,GameAssembly.dll,29 71 ? 45 85 ed)
alloc(newmem,$1000,"GameAssembly.dll"+BB1DFB)

label(code)
label(return)

newmem:
  //mov [rcx+18], 20

code:
  //sub [rcx+18],esi
  test r13d,r13d
  jmp return

reload_dec_batch_hook:
  jmp newmem
  nop
return:
registersymbol(reload_dec_batch_hook)

[DISABLE]

reload_dec_batch_hook:
  db 29 71 18 45 85 ED

unregistersymbol(reload_dec_batch_hook)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+BB1DFB

"GameAssembly.dll"+BB1DD3: 44 89 7C 91 20        -  mov [rcx+rdx*4+20],r15d
"GameAssembly.dll"+BB1DD8: FF 43 1C              -  inc [rbx+1C]
"GameAssembly.dll"+BB1DDB: FF C7                 -  inc edi
"GameAssembly.dll"+BB1DDD: EB 91                 -  jmp GameAssembly.dll+BB1D70
"GameAssembly.dll"+BB1DDF: 44 2B EE              -  sub r13d,esi
"GameAssembly.dll"+BB1DE2: 4D 85 F6              -  test r14,r14
"GameAssembly.dll"+BB1DE5: 0F 84 F3 00 00 00     -  je GameAssembly.dll+BB1EDE
"GameAssembly.dll"+BB1DEB: 49 8B 8E 20 02 00 00  -  mov rcx,[r14+00000220]
"GameAssembly.dll"+BB1DF2: 48 85 C9              -  test rcx,rcx
"GameAssembly.dll"+BB1DF5: 0F 84 DE 00 00 00     -  je GameAssembly.dll+BB1ED9
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+BB1DFB: 29 71 18              -  sub [rcx+18],esi
"GameAssembly.dll"+BB1DFE: 45 85 ED              -  test r13d,r13d
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+BB1E01: 0F 85 F9 FE FF FF     -  jne GameAssembly.dll+BB1D00
"GameAssembly.dll"+BB1E07: 41 FF C4              -  inc r12d
"GameAssembly.dll"+BB1E0A: 44 89 A5 C0 00 00 00  -  mov [rbp+000000C0],r12d
"GameAssembly.dll"+BB1E11: 49 63 C4              -  movsxd  rax,r12d
"GameAssembly.dll"+BB1E14: 48 8B 7D 10           -  mov rdi,[rbp+10]
"GameAssembly.dll"+BB1E18: C7 04 87 2D 01 00 00  -  mov [rdi+rax*4],0000012D
"GameAssembly.dll"+BB1E1F: 48 8B 4D 00           -  mov rcx,[rbp+00]
"GameAssembly.dll"+BB1E23: EB 31                 -  jmp GameAssembly.dll+BB1E56
"GameAssembly.dll"+BB1E25: 41 FF C4              -  inc r12d
"GameAssembly.dll"+BB1E28: 44 89 A5 C0 00 00 00  -  mov [rbp+000000C0],r12d
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>8596</ID>
              <Description>"Infinite Arrows"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 
  Date   : 2020-04-06
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(arrow_dec_hook,GameAssembly.dll,FF 48 18 48 8B 4F 58) // should be unique
alloc(newmem,$1000,"GameAssembly.dll"+57868A)

label(code)
label(return)

newmem:
  //mov [rax+18], 20

code:
  //dec [rax+18]
  mov rcx,[rdi+58]
  jmp return

arrow_dec_hook:
  jmp newmem
  nop
  nop
return:
registersymbol(arrow_dec_hook)

[DISABLE]

arrow_dec_hook:
  db FF 48 18 48 8B 4F 58

unregistersymbol(arrow_dec_hook)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+57868A

"GameAssembly.dll"+57865D: 48 85 C9              -  test rcx,rcx
"GameAssembly.dll"+578660: 0F 84 D8 03 00 00     -  je GameAssembly.dll+578A3E
"GameAssembly.dll"+578666: 33 D2                 -  xor edx,edx
"GameAssembly.dll"+578668: E8 D3 FF 7B 00        -  call GameAssembly.dll+D38640
"GameAssembly.dll"+57866D: 48 8B 47 58           -  mov rax,[rdi+58]
"GameAssembly.dll"+578671: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+578674: 0F 84 BE 03 00 00     -  je GameAssembly.dll+578A38
"GameAssembly.dll"+57867A: 48 8B 80 20 02 00 00  -  mov rax,[rax+00000220]
"GameAssembly.dll"+578681: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+578684: 0F 84 A8 03 00 00     -  je GameAssembly.dll+578A32
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+57868A: FF 48 18              -  dec [rax+18]
"GameAssembly.dll"+57868D: 48 8B 4F 58           -  mov rcx,[rdi+58]
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+578691: 48 85 C9              -  test rcx,rcx
"GameAssembly.dll"+578694: 0F 84 92 03 00 00     -  je GameAssembly.dll+578A2C
"GameAssembly.dll"+57869A: 48 8B 81 20 02 00 00  -  mov rax,[rcx+00000220]
"GameAssembly.dll"+5786A1: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+5786A4: 0F 84 7C 03 00 00     -  je GameAssembly.dll+578A26
"GameAssembly.dll"+5786AA: 83 78 18 00           -  cmp dword ptr [rax+18],00
"GameAssembly.dll"+5786AE: 74 73                 -  je GameAssembly.dll+578723
"GameAssembly.dll"+5786B0: 48 85 C9              -  test rcx,rcx
"GameAssembly.dll"+5786B3: 0F 84 49 03 00 00     -  je GameAssembly.dll+578A02
"GameAssembly.dll"+5786B9: 33 D2                 -  xor edx,edx
}
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>8519</ID>
          <Description>"Infinite Water"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : tld.exe
  Version: 1.74 58755
  Date   : 2020-04-01
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,2048,GameAssembly.dll)
label(returnhere)
label(originalcode)
label(exit)
label(drink_hook)
registersymbol(drink_hook)
aobScanModule(hook,GameAssembly.dll,f3 0f 5c f7 f3 0f 11 73 ? 48 8b 0d)

newmem:

originalcode:
//subss xmm6,xmm7
movss [rbx+1C],xmm6

exit:
jmp returnhere

//"GameAssembly.dll"+3301C3:
hook:
drink_hook:
jmp newmem
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
dealloc(newmem)
drink_hook:
subss xmm6,xmm7
movss [rbx+1C],xmm6
//Alt: db F3 0F 5C F7 F3 0F 11 73 1C
unregistersymbol(drink_hook)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8527</ID>
          <Description>"Infinite Food Calories"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : tld.exe
  Version: 1.74 58755
  Date   : 2020-04-01
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
aobscanmodule(eat_hook,GameAssembly.dll,f3 41 0f 5c c0 f3 0f 11 40 ? 48 8b bb)
alloc(newmem,$1000,"GameAssembly.dll"+814B2E)

label(code)
label(return)

newmem:

code:
  //subss xmm0,xmm8
  jmp return

eat_hook:
  jmp newmem
return:
registersymbol(eat_hook)

[DISABLE]
eat_hook:
  db F3 41 0F 5C C0

unregistersymbol(eat_hook)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+814B2E

"GameAssembly.dll"+814AFE: 0F 84 DE 00 00 00           -  je GameAssembly.dll+814BE2
"GameAssembly.dll"+814B04: 0F 57 35 85 A3 B2 02        -  xorps xmm6,[GameAssembly.dll+333EE90]
"GameAssembly.dll"+814B0B: 45 33 C0                    -  xor r8d,r8d
"GameAssembly.dll"+814B0E: 0F 28 CE                    -  movaps xmm1,xmm6
"GameAssembly.dll"+814B11: 48 8B C8                    -  mov rcx,rax
"GameAssembly.dll"+814B14: E8 67 33 10 00              -  call GameAssembly.dll+917E80
"GameAssembly.dll"+814B19: 48 8B 83 B8 00 00 00        -  mov rax,[rbx+000000B8]
"GameAssembly.dll"+814B20: 48 85 C0                    -  test rax,rax
"GameAssembly.dll"+814B23: 0F 84 B3 00 00 00           -  je GameAssembly.dll+814BDC
"GameAssembly.dll"+814B29: F3 0F 10 40 20              -  movss xmm0,[rax+20]
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+814B2E: F3 41 0F 5C C0              -  subss xmm0,xmm8
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+814B33: F3 0F 11 40 20              -  movss [rax+20],xmm0
"GameAssembly.dll"+814B38: 48 8B BB B8 00 00 00        -  mov rdi,[rbx+000000B8]
"GameAssembly.dll"+814B3F: 48 85 FF                    -  test rdi,rdi
"GameAssembly.dll"+814B42: 0F 84 8E 00 00 00           -  je GameAssembly.dll+814BD6
"GameAssembly.dll"+814B48: F3 0F 10 77 20              -  movss xmm6,[rdi+20]
"GameAssembly.dll"+814B4D: F3 44 0F 10 47 24           -  movss xmm8,[rdi+24]
"GameAssembly.dll"+814B53: 48 8B 0D AE 0E 44 03        -  mov rcx,[GameAssembly.dll+3C55A08]
"GameAssembly.dll"+814B5A: F6 81 27 01 00 00 02        -  test byte ptr [rcx+00000127],02
"GameAssembly.dll"+814B61: 74 0E                       -  je GameAssembly.dll+814B71
"GameAssembly.dll"+814B63: 83 B9 D8 00 00 00 00        -  cmp dword ptr [rcx+000000D8],00
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8522</ID>
          <Description>"Infinite Fire Supplies (Stacked Only)"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : tld.exe
  Version: 1.74 58755
  Date   : 2020-04-01
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,2048,GameAssembly.dll)
label(returnhere)
label(originalcode)
label(exit)
label(fire_add_hook)
registersymbol(fire_add_hook)
aobScanModule(hook,GameAssembly.dll,ff 4b ? 40 0f b6 ff)

newmem:

originalcode:
//dec [rbx+18]
movzx edi,dil

exit:
jmp returnhere

hook:
fire_add_hook:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
dealloc(newmem)
fire_add_hook:
dec [rbx+18]
movzx edi,dil
//Alt: db FF 4B 18 40 0F B6 FF
unregistersymbol(fire_add_hook)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8525</ID>
          <Description>"Infinite Matches (light directly)"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : tld.exe
  Version: 1.74 58755
  Date   : 2020-04-01
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
aobscanmodule(burn_match_hook,GameAssembly.dll,ff c8 89 41 ? 48 8b 43)
alloc(newmem,$1000,"GameAssembly.dll"+851C33)
label(code)
label(return)

newmem:

code:
  //dec eax
  mov [rcx+18],eax
  jmp return

INJECT:
  jmp newmem
return:
registersymbol(burn_match_hook)

[DISABLE]
INJECT:
  db FF C8 89 41 18

unregistersymbol(burn_match_hook)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+851C33

"GameAssembly.dll"+851C12: 84 C0                 -  test al,al
"GameAssembly.dll"+851C14: 74 7E                 -  je GameAssembly.dll+851C94
"GameAssembly.dll"+851C16: 48 8B 4B 58           -  mov rcx,[rbx+58]
"GameAssembly.dll"+851C1A: 48 85 C9              -  test rcx,rcx
"GameAssembly.dll"+851C1D: 0F 84 0A 03 00 00     -  je GameAssembly.dll+851F2D
"GameAssembly.dll"+851C23: 8B 41 18              -  mov eax,[rcx+18]
"GameAssembly.dll"+851C26: 85 C0                 -  test eax,eax
"GameAssembly.dll"+851C28: 7E 6A                 -  jle GameAssembly.dll+851C94
"GameAssembly.dll"+851C2A: 48 85 C9              -  test rcx,rcx
"GameAssembly.dll"+851C2D: 0F 84 F4 02 00 00     -  je GameAssembly.dll+851F27
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+851C33: FF C8                 -  dec eax
"GameAssembly.dll"+851C35: 89 41 18              -  mov [rcx+18],eax
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+851C38: 48 8B 43 58           -  mov rax,[rbx+58]
"GameAssembly.dll"+851C3C: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+851C3F: 0F 84 DC 02 00 00     -  je GameAssembly.dll+851F21
"GameAssembly.dll"+851C45: 83 78 18 00           -  cmp dword ptr [rax+18],00
"GameAssembly.dll"+851C49: 7F 49                 -  jg GameAssembly.dll+851C94
"GameAssembly.dll"+851C4B: 48 8B 0D DE 16 44 03  -  mov rcx,[GameAssembly.dll+3C93330]
"GameAssembly.dll"+851C52: F6 81 27 01 00 00 02  -  test byte ptr [rcx+00000127],02
"GameAssembly.dll"+851C59: 74 0E                 -  je GameAssembly.dll+851C69
"GameAssembly.dll"+851C5B: 83 B9 D8 00 00 00 00  -  cmp dword ptr [rcx+000000D8],00
"GameAssembly.dll"+851C62: 75 05                 -  jne GameAssembly.dll+851C69
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8833</ID>
          <Description>"No Aim Fatigue - Rifle"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : tld.exe
  Version: 1.74 58755
  Date   : 2020-04-03
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(aim_fatigue_hook,GameAssembly.dll,f3 41 0f 58 f9 f3 0f 11 bb)
alloc(newmem,$1000,"GameAssembly.dll"+7F3C68)

label(code)
label(return)

newmem:

code:
  //addss xmm7,xmm9
  jmp return

aim_fatigue_hook:
  jmp newmem
return:
registersymbol(aim_fatigue_hook)

[DISABLE]

aim_fatigue_hook:
  db F3 41 0F 58 F9

unregistersymbol(aim_fatigue_hook)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+7F3C68

"GameAssembly.dll"+7F3C40: F3 44 0F 11 83 F8 00 00 00  -  movss [rbx+000000F8],xmm8
"GameAssembly.dll"+7F3C49: 44 0F 28 C8                 -  movaps xmm9,xmm0
"GameAssembly.dll"+7F3C4D: 33 C9                       -  xor ecx,ecx
"GameAssembly.dll"+7F3C4F: E8 1C E0 24 02              -  call GameAssembly.dll+2A41C70
"GameAssembly.dll"+7F3C54: 0F 28 F0                    -  movaps xmm6,xmm0
"GameAssembly.dll"+7F3C57: 33 D2                       -  xor edx,edx
"GameAssembly.dll"+7F3C59: 48 8B CB                    -  mov rcx,rbx
"GameAssembly.dll"+7F3C5C: E8 BF F8 FF FF              -  call GameAssembly.dll+7F3520
"GameAssembly.dll"+7F3C61: 0F 28 F8                    -  movaps xmm7,xmm0
"GameAssembly.dll"+7F3C64: F3 0F 59 FE                 -  mulss xmm7,xmm6
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+7F3C68: F3 41 0F 58 F9              -  addss xmm7,xmm9
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+7F3C6D: F3 0F 11 BB F8 00 00 00     -  movss [rbx+000000F8],xmm7
"GameAssembly.dll"+7F3C75: 48 8B 0D 8C 1D 46 03        -  mov rcx,[GameAssembly.dll+3C55A08]
"GameAssembly.dll"+7F3C7C: F6 81 27 01 00 00 02        -  test byte ptr [rcx+00000127],02
"GameAssembly.dll"+7F3C83: 74 0E                       -  je GameAssembly.dll+7F3C93
"GameAssembly.dll"+7F3C85: 83 B9 D8 00 00 00 00        -  cmp dword ptr [rcx+000000D8],00
"GameAssembly.dll"+7F3C8C: 75 05                       -  jne GameAssembly.dll+7F3C93
"GameAssembly.dll"+7F3C8E: E8 ED E2 A7 FF              -  call GameAssembly.dll+271F80
"GameAssembly.dll"+7F3C93: F3 0F 10 35 49 67 B4 02     -  movss xmm6,[GameAssembly.dll+333A3E4]
"GameAssembly.dll"+7F3C9B: 44 0F 2F C7                 -  comiss xmm8,xmm7
"GameAssembly.dll"+7F3C9F: 77 0A                       -  ja GameAssembly.dll+7F3CAB
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8591</ID>
          <Description>"Aim Fatigue Instant Recharge"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : tld.exe
  Version: 1.74 58755
  Date   : 2020-04-03
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(aim_fatigue_recovery_hook,GameAssembly.dll,f3 0f 5c f8 f3 0f 11 bb ? ? ? ? 48 8b 0d ? ? ? ? f6 81 ? ? ? ? ? 74 ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? 44 0f 2f c7 77 ? f3 0f 10 05 ? ? ? ? 0f 2f f8 76 ? 0f 28 f8 f3 0f 11 bb)
alloc(newmem,$1000,"GameAssembly.dll"+7F3E15)

label(code)
label(return)

newmem:
  push rax
  xor rax, rax
  movq xmm7, rax
  pop rax

code:
  //subss xmm7,xmm0
  movss [rbx+000000F8],xmm7
  jmp return

aim_fatigue_recovery_hook:
  jmp newmem
  nop
  nop
  nop
  nop
  nop
  nop
  nop
return:
registersymbol(aim_fatigue_recovery_hook)

[DISABLE]

aim_fatigue_recovery_hook:
  db F3 0F 5C F8 F3 0F 11 BB F8 00 00 00

unregistersymbol(aim_fatigue_recovery_hook)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+7F3E15

"GameAssembly.dll"+7F3DEB: F3 0F 10 BB F8 00 00 00     -  movss xmm7,[rbx+000000F8]
"GameAssembly.dll"+7F3DF3: 41 0F 2F F8                 -  comiss xmm7,xmm8
"GameAssembly.dll"+7F3DF7: 0F 86 14 FF FF FF           -  jbe GameAssembly.dll+7F3D11
"GameAssembly.dll"+7F3DFD: 33 C9                       -  xor ecx,ecx
"GameAssembly.dll"+7F3DFF: E8 6C DE 24 02              -  call GameAssembly.dll+2A41C70
"GameAssembly.dll"+7F3E04: 0F 28 F0                    -  movaps xmm6,xmm0
"GameAssembly.dll"+7F3E07: 33 D2                       -  xor edx,edx
"GameAssembly.dll"+7F3E09: 48 8B CB                    -  mov rcx,rbx
"GameAssembly.dll"+7F3E0C: E8 9F F9 FF FF              -  call GameAssembly.dll+7F37B0
"GameAssembly.dll"+7F3E11: F3 0F 59 C6                 -  mulss xmm0,xmm6
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+7F3E15: F3 0F 5C F8                 -  subss xmm7,xmm0
"GameAssembly.dll"+7F3E19: F3 0F 11 BB F8 00 00 00     -  movss [rbx+000000F8],xmm7
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+7F3E21: 48 8B 0D E0 1B 46 03        -  mov rcx,[GameAssembly.dll+3C55A08]
"GameAssembly.dll"+7F3E28: F6 81 27 01 00 00 02        -  test byte ptr [rcx+00000127],02
"GameAssembly.dll"+7F3E2F: 74 0E                       -  je GameAssembly.dll+7F3E3F
"GameAssembly.dll"+7F3E31: 83 B9 D8 00 00 00 00        -  cmp dword ptr [rcx+000000D8],00
"GameAssembly.dll"+7F3E38: 75 05                       -  jne GameAssembly.dll+7F3E3F
"GameAssembly.dll"+7F3E3A: E8 41 E1 A7 FF              -  call GameAssembly.dll+271F80
"GameAssembly.dll"+7F3E3F: 44 0F 2F C7                 -  comiss xmm8,xmm7
"GameAssembly.dll"+7F3E43: 77 1D                       -  ja GameAssembly.dll+7F3E62
"GameAssembly.dll"+7F3E45: F3 0F 10 05 97 65 B4 02     -  movss xmm0,[GameAssembly.dll+333A3E4]
"GameAssembly.dll"+7F3E4D: 0F 2F F8                    -  comiss xmm7,xmm0
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8770</ID>
          <Description>"Infinite Charcoal"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : tld.exe
  Version: 1.95 83861 S
  Date   : 2021-10-18
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(survey_charcoal_hook)
label(survey_charcoal_bytes)
label(survey_charcoal_base_ptr)
registersymbol(survey_charcoal_hook)
registersymbol(survey_charcoal_bytes)
registersymbol(survey_charcoal_base_ptr)
aobScanModule(hook,GameAssembly.dll,ff 48 ? 48 8b 43 ? 48 85 c0)

newmem:
survey_charcoal_bytes:
  //dec [rax+18]
  //mov rax,[rbx+28]
  readMem(hook, 7)
  jmp returnhere

survey_charcoal_base_ptr:
  dq 0

code:
  mov [survey_charcoal_base_ptr], rax
  jmp survey_charcoal_bytes+3 // skip decrement

hook:
survey_charcoal_hook:
  jmp code
  nop
  nop
  returnhere:



[DISABLE]
survey_charcoal_hook:
  //db FF 48 18 48 8B 43 30
  readMem(survey_charcoal_bytes, 7)

unregistersymbol(survey_charcoal_hook)
unregistersymbol(survey_charcoal_bytes)
unregistersymbol(survey_charcoal_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+8F5851

"GameAssembly.dll"+8F5824: 48 8B CF              -  mov rcx,rdi
"GameAssembly.dll"+8F5827: E8 E4 66 93 01        -  call GameAssembly.dll+222BF10
"GameAssembly.dll"+8F582C: 84 C0                 -  test al,al
"GameAssembly.dll"+8F582E: 0F 84 A7 00 00 00     -  je GameAssembly.dll+8F58DB
"GameAssembly.dll"+8F5834: 48 8B 43 28           -  mov rax,[rbx+28]
"GameAssembly.dll"+8F5838: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+8F583B: 0F 84 14 01 00 00     -  je GameAssembly.dll+8F5955
"GameAssembly.dll"+8F5841: 48 8B 80 20 02 00 00  -  mov rax,[rax+00000220]
"GameAssembly.dll"+8F5848: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+8F584B: 0F 84 FE 00 00 00     -  je GameAssembly.dll+8F594F
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+8F5851: FF 48 18              -  dec [rax+18]
"GameAssembly.dll"+8F5854: 48 8B 43 28           -  mov rax,[rbx+28]
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+8F5858: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+8F585B: 0F 84 E8 00 00 00     -  je GameAssembly.dll+8F5949
"GameAssembly.dll"+8F5861: 48 8B 80 20 02 00 00  -  mov rax,[rax+00000220]
"GameAssembly.dll"+8F5868: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+8F586B: 0F 84 D2 00 00 00     -  je GameAssembly.dll+8F5943
"GameAssembly.dll"+8F5871: 83 78 18 00           -  cmp dword ptr [rax+18],00
"GameAssembly.dll"+8F5875: 7F 64                 -  jg GameAssembly.dll+8F58DB
"GameAssembly.dll"+8F5877: 48 8B 0D B2 DA 39 03  -  mov rcx,[GameAssembly.dll+3C93330]
"GameAssembly.dll"+8F587E: F6 81 27 01 00 00 02  -  test byte ptr [rcx+00000127],02
"GameAssembly.dll"+8F5885: 74 0E                 -  je GameAssembly.dll+8F5895
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8771</ID>
          <Description>"Super Survey"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : tld.exe
  Version: 1.95 83861 S
  Date   : 2021-10-18
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(map_survey_hook)
label(map_survey_bytes)
label(map_survey_base_ptr)
registersymbol(map_survey_hook)
registersymbol(map_survey_bytes)
registersymbol(map_survey_base_ptr)
aobScanModule(hook,GameAssembly.dll,F3 0F 10 B3 F0 00 00 00 40)

newmem:
map_survey_bytes:
  //movss xmm6,[rbx+000000F0]
  readMem(hook, 8)
  jmp returnhere

map_survey_base_ptr:
  dq 0

code:
  mov [map_survey_base_ptr], rbx
  push rax
  mov rax, (float)9999
  movq xmm6, rax
  pop rax
  jmp returnhere

hook:
map_survey_hook:
  jmp code
  nop
  nop
  nop
  returnhere:



[DISABLE]
map_survey_hook:
  //db F3 0F 10 B3 F0 00 00 00
  readMem(map_survey_bytes, 8)

unregistersymbol(map_survey_hook)
unregistersymbol(map_survey_bytes)
unregistersymbol(map_survey_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+1063E4F

"GameAssembly.dll"+1063E29: 49 89 6B C8              -  mov [r11-38],rbp
"GameAssembly.dll"+1063E2D: 49 89 6B D0              -  mov [r11-30],rbp
"GameAssembly.dll"+1063E31: 49 89 6B D8              -  mov [r11-28],rbp
"GameAssembly.dll"+1063E35: 4D 8D 43 C8              -  lea r8,[r11-38]
"GameAssembly.dll"+1063E39: E8 02 DD 01 FF           -  call GameAssembly.dll+81B40
"GameAssembly.dll"+1063E3E: 90                       -  nop
"GameAssembly.dll"+1063E3F: 33 C9                    -  xor ecx,ecx
"GameAssembly.dll"+1063E41: FF 15 E9 52 0F 03        -  call qword ptr [GameAssembly.dll+4159130]
"GameAssembly.dll"+1063E47: 90                       -  nop
"GameAssembly.dll"+1063E48: C6 05 44 77 3E 03 01     -  mov byte ptr [GameAssembly.dll+444B593],01
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+1063E4F: F3 0F 10 B3 F0 00 00 00  -  movss xmm6,[rbx+000000F0]
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+1063E57: 40 B7 01                 -  mov dil,01
"GameAssembly.dll"+1063E5A: 83 FE 01                 -  cmp esi,01
"GameAssembly.dll"+1063E5D: 75 0A                    -  jne GameAssembly.dll+1063E69
"GameAssembly.dll"+1063E5F: F3 0F 10 B3 F4 00 00 00  -  movss xmm6,[rbx+000000F4]
"GameAssembly.dll"+1063E67: EB 0D                    -  jmp GameAssembly.dll+1063E76
"GameAssembly.dll"+1063E69: 83 FE 02                 -  cmp esi,02
"GameAssembly.dll"+1063E6C: 75 0B                    -  jne GameAssembly.dll+1063E79
"GameAssembly.dll"+1063E6E: F3 0F 10 B3 F8 00 00 00  -  movss xmm6,[rbx+000000F8]
"GameAssembly.dll"+1063E76: 40 32 FF                 -  xor dil,dil
"GameAssembly.dll"+1063E79: 48 8B 0D A0 38 47 03     -  mov rcx,[GameAssembly.dll+44D7720]
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>8962</ID>
      <Description>"--------------------------"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>8959</ID>
      <Description>"Dev"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>0080FF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>8940</ID>
          <Description>"tmp"</Description>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>8 Bytes</VariableType>
          <Address>tmp</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>tmp</Name>
      <Address>7FFF91220000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>day_length_ptr</Name>
      <Address>7FFD12EE0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_uconsole_init</Name>
      <Address>7FFF35840000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>https://github.com/Perfare/Il2CppDumper
How to use the (primary) skills editor:
1) Enable the script
2) Open the journal (j)
3) Go to the skills tab (2nd from the top)
4) Scroll to the bottom
5) Alt+Tab to CE
6) You can now edit your skill values
   To find appropriate values you can check the tables on the page for each skill
   https://thelongdark.fandom.com/wiki/Skills
   
How to use secondary skills editor:
1) Enable the script
2) Open your inventory (i)
3) Select an item you can repair or sharpen (pot, knive, axe, latern, etc)
4) Click on the actions button (bottom right)
5) Select the repair action (top left)
   If the repair option is not available, go to step 3 and pick a different item
   You do not actually have to perform the action, you just have to open the screen
6) Alt+Tab to CE
7) You can now edit your secondary skill values
   To find appropriate values you can check the tables on the page for each skill
   https://thelongdark.fandom.com/wiki/Skills
  
How to use inventory select item hook:
1) Enable the script
2) Open your inventory (i)
3) Click on an item
4) Alt+Tab to CE
5) You can now edit the memory values for the item
 
How to use item spawner:
1) Enable the script
2) Set the item name of the item you want to spawn
3) Set the state to "Spawn Item"
4) When you resume the game, the item should be at your feet, and the state should be "Idle/Done" again
  
How to use feats unlock:
1) Enable an unlock script
2) Open the pause menu
3) Enter the badges menu
4) Exit the badges menu
5) Resume the game
6) The badge should now be unlocked
</Comments>
</CheatTable>
