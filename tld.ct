<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="38">
  <CheatEntries>
    <CheatEntry>
      <ID>8642</ID>
      <Description>"L"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>8644</ID>
          <Description>"Group"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>C08000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>8643</ID>
          <Description>"Script"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>8735</ID>
          <Description>"Game Memory Value"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>FF8080</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>8930</ID>
          <Description>"Game Memory Value (readonly)"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>808080</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>8645</ID>
          <Description>"Script Modifier/Config"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>800080</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>8646</ID>
          <Description>"WIP / Deprecated / Broken"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>4080FF</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>9079</ID>
          <Description>"Broken"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>0000FF</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>8534</ID>
      <Description>"To Infinity And Beyond!"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="1" RealAddress="00000000"/>
      <Color>C08000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>8710</ID>
          <Description>"Player"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>C08000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8709</ID>
              <Description>"Temperature"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-27
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(player_temp_hook)
label(player_temp_bytes)
label(player_temp_base_ptr)
label(player_temp_toggle)
label(player_temp_value)
registersymbol(player_temp_hook)
registersymbol(player_temp_bytes)
registersymbol(player_temp_base_ptr)
registersymbol(player_temp_toggle)
registersymbol(player_temp_value)
aobScanModule(hook,GameAssembly.dll,f3 41 0f 11 74 24)

newmem:
player_temp_bytes:
  readMem(hook, 7)
  jmp returnhere

player_temp_base_ptr:
  dq 0

player_temp_toggle:
  db 0

player_temp_value:
  dd 0

code:
  mov [player_temp_base_ptr], r12

  cmp byte ptr [player_temp_toggle], 0
  jz player_temp_bytes
  movss xmm6, [player_temp_value]
  jmp player_temp_bytes

hook:
player_temp_hook:
  jmp code
  nop
  nop
  returnhere:



[DISABLE]
player_temp_hook:
  //db F3 41 0F 11 7D 20
  readMem(player_temp_bytes, 7)

unregistersymbol(player_temp_hook)
unregistersymbol(player_temp_bytes)
unregistersymbol(player_temp_base_ptr)
unregistersymbol(player_temp_toggle)
unregistersymbol(player_temp_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+5F0E39

GameAssembly.dll+5F0E09: 74 0E                 - je GameAssembly.dll+5F0E19
GameAssembly.dll+5F0E0B: 48 85 DB              - test rbx,rbx
GameAssembly.dll+5F0E0E: 0F 84 27 01 00 00     - je GameAssembly.dll+5F0F3B
GameAssembly.dll+5F0E14: F3 0F 10 73 48        - movss xmm6,[rbx+48]
GameAssembly.dll+5F0E19: 48 8B 0D 40 D4 06 04  - mov rcx,[GameAssembly.dll+465E260]
GameAssembly.dll+5F0E20: F3 0F 59 F7           - mulss xmm6,xmm7
GameAssembly.dll+5F0E24: 83 B9 E0 00 00 00 00  - cmp dword ptr [rcx+000000E0],00
GameAssembly.dll+5F0E2B: 75 05                 - jne GameAssembly.dll+5F0E32
GameAssembly.dll+5F0E2D: E8 4E EC CE FF        - call GameAssembly.il2cpp_field_static_set_value+42E0
GameAssembly.dll+5F0E32: F3 41 0F 58 74 24 20  - addss xmm6,[r12+20]
// ---------- INJECTING HERE ----------
GameAssembly.dll+5F0E39: F3 41 0F 11 74 24 20  - movss [r12+20],xmm6
// ---------- DONE INJECTING  ----------
GameAssembly.dll+5F0E40: 48 8B 0D F1 72 06 04  - mov rcx,[GameAssembly.dll+4658138]
GameAssembly.dll+5F0E47: 83 B9 E0 00 00 00 00  - cmp dword ptr [rcx+000000E0],00
GameAssembly.dll+5F0E4E: 75 05                 - jne GameAssembly.dll+5F0E55
GameAssembly.dll+5F0E50: E8 2B EC CE FF        - call GameAssembly.il2cpp_field_static_set_value+42E0
GameAssembly.dll+5F0E55: E8 A6 6E FF FF        - call GameAssembly.dll+5E7D00
GameAssembly.dll+5F0E5A: 48 85 C0              - test rax,rax
GameAssembly.dll+5F0E5D: 0F 84 D8 00 00 00     - je GameAssembly.dll+5F0F3B
GameAssembly.dll+5F0E63: EB 39                 - jmp GameAssembly.dll+5F0E9E
GameAssembly.dll+5F0E65: F3 41 0F 10 44 24 20  - movss xmm0,[r12+20]
GameAssembly.dll+5F0E6C: F3 0F 59 F7           - mulss xmm6,xmm7
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8712</ID>
                  <Description>"Set Temperature"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
player_temp_toggle:
  db 01

[DISABLE]
player_temp_toggle:
  db 00
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8713</ID>
                      <Description>"Temperature Value"</Description>
                      <Color>800080</Color>
                      <VariableType>Float</VariableType>
                      <Address>player_temp_value</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8655</ID>
                  <Description>"Temperature"</Description>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_temp_base_ptr</Address>
                  <Offsets>
                    <Offset>20</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8719</ID>
                  <Description>"Temperature Max"</Description>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_temp_base_ptr</Address>
                  <Offsets>
                    <Offset>24</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8714</ID>
              <Description>"Fatigue"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-27
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(player_fatigue_hook)
label(player_fatigue_bytes)
label(player_fatigue_base_ptr)
label(player_fatigue_toggle)
label(player_fatigue_value)
registersymbol(player_fatigue_hook)
registersymbol(player_fatigue_bytes)
registersymbol(player_fatigue_base_ptr)
registersymbol(player_fatigue_toggle)
registersymbol(player_fatigue_value)
aobScanModule(hook,GameAssembly.dll,f3 0f 11 47 ? 75 ? 48 8d 0d ? ? ? ? e8 ? ? ? ? c6 05 ? ? ? ? ? 48 8b 0d)

newmem:
player_fatigue_bytes:
  readMem(hook, 5)
  jmp returnhere

player_fatigue_base_ptr:
  dq 0

player_fatigue_toggle:
  db 0

player_fatigue_value:
  dd 0

code:
  mov [player_fatigue_base_ptr], rdi

  cmp byte ptr [player_fatigue_toggle], 0
  jz player_fatigue_bytes
  movss xmm0, [player_fatigue_value]
  jmp player_fatigue_bytes

hook:
player_fatigue_hook:
  jmp code
  returnhere:



[DISABLE]
player_fatigue_hook:
  readMem(player_fatigue_bytes, 5)

unregistersymbol(player_fatigue_hook)
unregistersymbol(player_fatigue_bytes)
unregistersymbol(player_fatigue_base_ptr)
unregistersymbol(player_fatigue_toggle)
unregistersymbol(player_fatigue_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+5ED86F

GameAssembly.dll+5ED845: 84 C0                    - test al,al
GameAssembly.dll+5ED847: 75 07                    - jne GameAssembly.dll+5ED850
GameAssembly.dll+5ED849: F3 0F 10 43 60           - movss xmm0,[rbx+60]
GameAssembly.dll+5ED84E: EB 0F                    - jmp GameAssembly.dll+5ED85F
GameAssembly.dll+5ED850: F3 0F 10 43 64           - movss xmm0,[rbx+64]
GameAssembly.dll+5ED855: EB 08                    - jmp GameAssembly.dll+5ED85F
GameAssembly.dll+5ED857: F3 0F 10 05 09 DC C8 03  - movss xmm0,[GameAssembly.dll+427B468]
GameAssembly.dll+5ED85F: 80 3D 7C 1D 25 04 00     - cmp byte ptr [GameAssembly.dll+483F5E2],00
GameAssembly.dll+5ED866: F3 0F 59 C6              - mulss xmm0,xmm6
GameAssembly.dll+5ED86A: F3 0F 58 47 1C           - addss xmm0,[rdi+1C]
// ---------- INJECTING HERE ----------
GameAssembly.dll+5ED86F: F3 0F 11 47 1C           - movss [rdi+1C],xmm0
// ---------- DONE INJECTING  ----------
GameAssembly.dll+5ED874: 75 13                    - jne GameAssembly.dll+5ED889
GameAssembly.dll+5ED876: 48 8D 0D BB A8 06 04     - lea rcx,[GameAssembly.dll+4658138]
GameAssembly.dll+5ED87D: E8 CE 25 D8 FF           - call GameAssembly.dll+36FE50
GameAssembly.dll+5ED882: C6 05 59 1D 25 04 01     - mov byte ptr [GameAssembly.dll+483F5E2],01
GameAssembly.dll+5ED889: 48 8B 0D A8 A8 06 04     - mov rcx,[GameAssembly.dll+4658138]
GameAssembly.dll+5ED890: 83 B9 E0 00 00 00 00     - cmp dword ptr [rcx+000000E0],00
GameAssembly.dll+5ED897: 75 0C                    - jne GameAssembly.dll+5ED8A5
GameAssembly.dll+5ED899: E8 E2 21 CF FF           - call GameAssembly.il2cpp_field_static_set_value+42E0
GameAssembly.dll+5ED89E: 48 8B 0D 93 A8 06 04     - mov rcx,[GameAssembly.dll+4658138]
GameAssembly.dll+5ED8A5: 48 8B 81 B8 00 00 00     - mov rax,[rcx+000000B8]
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8715</ID>
                  <Description>"Set Fatigue"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
player_fatigue_toggle:
  db 01

[DISABLE]
player_fatigue_toggle:
  db 00
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8716</ID>
                      <Description>"Fatigue Value"</Description>
                      <Color>800080</Color>
                      <VariableType>Float</VariableType>
                      <Address>player_fatigue_value</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8717</ID>
                  <Description>"Fatigue"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_fatigue_base_ptr</Address>
                  <Offsets>
                    <Offset>1c</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8718</ID>
                  <Description>"Fatigue Max"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_fatigue_base_ptr</Address>
                  <Offsets>
                    <Offset>20</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8720</ID>
              <Description>"Thirst"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-27
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(player_thirst_hook)
label(player_thirst_bytes)
label(player_thirst_base_ptr)
label(player_thirst_toggle)
label(player_thirst_value)
registersymbol(player_thirst_hook)
registersymbol(player_thirst_bytes)
registersymbol(player_thirst_base_ptr)
registersymbol(player_thirst_toggle)
registersymbol(player_thirst_value)
aobScanModule(hook,GameAssembly.dll,f3 0f 11 73 ? 75 ? 48 8d 0d ? ? ? ? e8 ? ? ? ? c6 05 ? ? ? ? ? f3 0f 10 83)

newmem:
player_thirst_bytes:
  //movss [rbx+1C],xmm6
  readMem(hook, 5)
  jmp returnhere

player_thirst_base_ptr:
  dq 0

player_thirst_toggle:
  db 0

player_thirst_value:
  dd 0

code:
  mov [player_thirst_base_ptr], rbx

  cmp byte ptr [player_thirst_toggle], 0
  jz player_thirst_bytes
  movss xmm6, [player_thirst_value]
  jmp player_thirst_bytes

hook:
player_thirst_hook:
  jmp code
  returnhere:



[DISABLE]
player_thirst_hook:
  //db F3 0F 11 73 1C
  readMem(player_thirst_bytes, 5)

unregistersymbol(player_thirst_hook)
unregistersymbol(player_thirst_bytes)
unregistersymbol(player_thirst_base_ptr)
unregistersymbol(player_thirst_toggle)
unregistersymbol(player_thirst_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+5F918B

GameAssembly.dll+5F9168: F3 0F 58 73 1C                 - addss xmm6,[rbx+1C]
GameAssembly.dll+5F916D: 0F 2F FE                       - comiss xmm7,xmm6
GameAssembly.dll+5F9170: 77 0F                          - ja GameAssembly.dll+5F9181
GameAssembly.dll+5F9172: F3 0F 10 43 20                 - movss xmm0,[rbx+20]
GameAssembly.dll+5F9177: 0F 2F F0                       - comiss xmm6,xmm0
GameAssembly.dll+5F917A: 76 08                          - jna GameAssembly.dll+5F9184
GameAssembly.dll+5F917C: 0F 28 F0                       - movaps xmm6,xmm0
GameAssembly.dll+5F917F: EB 03                          - jmp GameAssembly.dll+5F9184
GameAssembly.dll+5F9181: 0F 57 F6                       - xorps xmm6,xmm6
GameAssembly.dll+5F9184: 80 3D BC AF 24 04 00           - cmp byte ptr [GameAssembly.dll+4844147],00
// ---------- INJECTING HERE ----------
GameAssembly.dll+5F918B: F3 0F 11 73 1C                 - movss [rbx+1C],xmm6
// ---------- DONE INJECTING  ----------
GameAssembly.dll+5F9190: 75 13                          - jne GameAssembly.dll+5F91A5
GameAssembly.dll+5F9192: 48 8D 0D 9F EF 05 04           - lea rcx,[GameAssembly.dll+4658138]
GameAssembly.dll+5F9199: E8 B2 6C D7 FF                 - call GameAssembly.dll+36FE50
GameAssembly.dll+5F919E: C6 05 A2 AF 24 04 01           - mov byte ptr [GameAssembly.dll+4844147],01
GameAssembly.dll+5F91A5: F3 0F 10 83 88 00 00 00        - movss xmm0,[rbx+00000088]
GameAssembly.dll+5F91AD: 0F 2F 05 58 1E C8 03           - comiss xmm0,[GameAssembly.dll+427B00C]
GameAssembly.dll+5F91B4: 77 0F                          - ja GameAssembly.dll+5F91C5
GameAssembly.dll+5F91B6: C7 83 88 00 00 00 00 00 00 00  - mov [rbx+00000088],00000000
GameAssembly.dll+5F91C0: E9 BF 00 00 00                 - jmp GameAssembly.dll+5F9284
GameAssembly.dll+5F91C5: 48 8B 05 EC 3F 26 04           - mov rax,[GameAssembly.dll+485D1B8]
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8721</ID>
                  <Description>"Set Thirst"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
player_thirst_toggle:
  db 01

[DISABLE]
player_thirst_toggle:
  db 00
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8722</ID>
                      <Description>"Thirst Value"</Description>
                      <Color>800080</Color>
                      <VariableType>Float</VariableType>
                      <Address>player_thirst_value</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8723</ID>
                  <Description>"Thirst"</Description>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_thirst_base_ptr</Address>
                  <Offsets>
                    <Offset>1C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8724</ID>
                  <Description>"Thirst Max"</Description>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_thirst_base_ptr</Address>
                  <Offsets>
                    <Offset>20</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8725</ID>
              <Description>"Hunger"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-27
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(player_hunger_hook)
label(player_hunger_bytes)
label(player_hunger_base_ptr)
label(player_hunger_toggle)
label(player_hunger_value)
registersymbol(player_hunger_hook)
registersymbol(player_hunger_bytes)
registersymbol(player_hunger_base_ptr)
registersymbol(player_hunger_toggle)
registersymbol(player_hunger_value)
aobScanModule(hook,GameAssembly.dll,f3 0f 11 4b ? f3 0f 5c f1 48 8b 0d ? ? ? ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? e8 ? ? ? ? 48 85 c0 0f 84)

newmem:
player_hunger_bytes:
  readMem(hook, 5)
  jmp returnhere

player_hunger_base_ptr:
  dq 0

player_hunger_toggle:
  db 0

player_hunger_value:
  dd (float)2500

code:
  mov [player_hunger_base_ptr], rbx

  cmp byte ptr [player_hunger_toggle], 0
  jz player_hunger_bytes
  movss xmm1, [player_hunger_value]
  jmp player_hunger_bytes

hook:
player_hunger_hook:
  jmp code
  returnhere:



[DISABLE]
player_hunger_hook:
  readMem(player_hunger_bytes, 5)

unregistersymbol(player_hunger_hook)
unregistersymbol(player_hunger_bytes)
unregistersymbol(player_hunger_base_ptr)
unregistersymbol(player_hunger_toggle)
unregistersymbol(player_hunger_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+5F6343

GameAssembly.dll+5F6323: F3 0F 5C CF           - subss xmm1,xmm7
GameAssembly.dll+5F6327: F3 0F 11 43 20        - movss [rbx+20],xmm0
GameAssembly.dll+5F632C: 0F 2F D1              - comiss xmm2,xmm1
GameAssembly.dll+5F632F: 77 0F                 - ja GameAssembly.dll+5F6340
GameAssembly.dll+5F6331: F3 0F 10 43 78        - movss xmm0,[rbx+78]
GameAssembly.dll+5F6336: 0F 2F C8              - comiss xmm1,xmm0
GameAssembly.dll+5F6339: 76 08                 - jna GameAssembly.dll+5F6343
GameAssembly.dll+5F633B: 0F 28 C8              - movaps xmm1,xmm0
GameAssembly.dll+5F633E: EB 03                 - jmp GameAssembly.dll+5F6343
GameAssembly.dll+5F6340: 0F 28 CA              - movaps xmm1,xmm2
// ---------- INJECTING HERE ----------
GameAssembly.dll+5F6343: F3 0F 11 4B 18        - movss [rbx+18],xmm1
// ---------- DONE INJECTING  ----------
GameAssembly.dll+5F6348: F3 0F 5C F1           - subss xmm6,xmm1
GameAssembly.dll+5F634C: 48 8B 0D E5 1D 06 04  - mov rcx,[GameAssembly.dll+4658138]
GameAssembly.dll+5F6353: 83 B9 E0 00 00 00 00  - cmp dword ptr [rcx+000000E0],00
GameAssembly.dll+5F635A: 75 05                 - jne GameAssembly.dll+5F6361
GameAssembly.dll+5F635C: E8 1F 97 CE FF        - call GameAssembly.il2cpp_field_static_set_value+42E0
GameAssembly.dll+5F6361: E8 8A 1E FF FF        - call GameAssembly.dll+5E81F0
GameAssembly.dll+5F6366: 48 85 C0              - test rax,rax
GameAssembly.dll+5F6369: 0F 84 E4 00 00 00     - je GameAssembly.dll+5F6453
GameAssembly.dll+5F636F: 0F 28 C6              - movaps xmm0,xmm6
GameAssembly.dll+5F6372: F3 0F 58 40 18        - addss xmm0,[rax+18]
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8726</ID>
                  <Description>"Set Hunger"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
player_hunger_toggle:
  db 01

[DISABLE]
player_hunger_toggle:
  db 00
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8727</ID>
                      <Description>"Hunger Value"</Description>
                      <Color>800080</Color>
                      <VariableType>Float</VariableType>
                      <Address>player_hunger_value</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8728</ID>
                  <Description>"Hunger"</Description>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_hunger_base_ptr</Address>
                  <Offsets>
                    <Offset>18</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8729</ID>
                  <Description>"Hunger Max"</Description>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_hunger_base_ptr</Address>
                  <Offsets>
                    <Offset>78</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8730</ID>
              <Description>"Sprint"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.23 120705 S
  Date   : 2023-09-27
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(player_sprint_hook)
label(player_sprint_bytes)
label(player_sprint_base_ptr)
label(player_sprint_toggle)
label(player_sprint_value)
registersymbol(player_sprint_hook)
registersymbol(player_sprint_bytes)
registersymbol(player_sprint_base_ptr)
registersymbol(player_sprint_toggle)
registersymbol(player_sprint_value)
aobScanModule(hook,GameAssembly.dll,f3 0f 11 79 ? e8 ? ? ? ? 0f 57 c9)

newmem:
player_sprint_bytes:
  readMem(hook, 5)
  jmp returnhere

player_sprint_base_ptr:
  dq 0

player_sprint_toggle:
  db 0

player_sprint_value:
  dd (float)100

code:
  mov [player_sprint_base_ptr], rbx

  cmp byte ptr [player_sprint_toggle], 0
  jz player_sprint_bytes
  movss xmm7, [player_sprint_value]
  jmp player_sprint_bytes

hook:
player_sprint_hook:
  jmp code
  returnhere:



[DISABLE]
player_sprint_hook:
  readMem(player_sprint_bytes, 5)

unregistersymbol(player_sprint_hook)
unregistersymbol(player_sprint_bytes)
unregistersymbol(player_sprint_base_ptr)
unregistersymbol(player_sprint_toggle)
unregistersymbol(player_sprint_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+D1B772

GameAssembly.dll+D1B74F: CC              - int 3
GameAssembly.dll+D1B750: 40 53           - push rbx
GameAssembly.dll+D1B752: 48 83 EC 40     - sub rsp,40
GameAssembly.dll+D1B756: 0F 29 74 24 30  - movaps [rsp+30],xmm6
GameAssembly.dll+D1B75B: 33 D2           - xor edx,edx
GameAssembly.dll+D1B75D: F3 0F 10 71 74  - movss xmm6,[rcx+74]
GameAssembly.dll+D1B762: 48 8B D9        - mov rbx,rcx
GameAssembly.dll+D1B765: 0F 29 7C 24 20  - movaps [rsp+20],xmm7
GameAssembly.dll+D1B76A: 0F 28 F9        - movaps xmm7,xmm1
GameAssembly.dll+D1B76D: F3 0F 58 79 78  - addss xmm7,[rcx+78]
// ---------- INJECTING HERE ----------
GameAssembly.dll+D1B772: F3 0F 11 79 78  - movss [rcx+78],xmm7
// ---------- DONE INJECTING  ----------
GameAssembly.dll+D1B777: E8 D4 E2 FF FF  - call GameAssembly.dll+D19A50
GameAssembly.dll+D1B77C: 0F 57 C9        - xorps xmm1,xmm1
GameAssembly.dll+D1B77F: F3 0F 58 C6     - addss xmm0,xmm6
GameAssembly.dll+D1B783: 0F 2F CF        - comiss xmm1,xmm7
GameAssembly.dll+D1B786: 77 2F           - ja GameAssembly.dll+D1B7B7
GameAssembly.dll+D1B788: 0F 2F F8        - comiss xmm7,xmm0
GameAssembly.dll+D1B78B: 76 15           - jna GameAssembly.dll+D1B7A2
GameAssembly.dll+D1B78D: F3 0F 11 43 78  - movss [rbx+78],xmm0
GameAssembly.dll+D1B792: 0F 28 74 24 30  - movaps xmm6,[rsp+30]
GameAssembly.dll+D1B797: 0F 28 7C 24 20  - movaps xmm7,[rsp+20]
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8731</ID>
                  <Description>"Set Sprint"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
player_sprint_toggle:
  db 01

[DISABLE]
player_sprint_toggle:
  db 00
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8732</ID>
                      <Description>"Sprint Value"</Description>
                      <Color>800080</Color>
                      <VariableType>Float</VariableType>
                      <Address>player_sprint_value</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8733</ID>
                  <Description>"Sprint"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_sprint_base_ptr</Address>
                  <Offsets>
                    <Offset>78</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8734</ID>
                  <Description>"Sprint Max"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_sprint_base_ptr</Address>
                  <Offsets>
                    <Offset>74</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8738</ID>
              <Description>"Health"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-27
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(player_health_hook)
label(player_health_bytes)
label(player_health_base_ptr)
label(player_health_toggle)
label(player_health_value)
registersymbol(player_health_hook)
registersymbol(player_health_bytes)
registersymbol(player_health_base_ptr)
registersymbol(player_health_toggle)
registersymbol(player_health_value)
aobScanModule(hook,GameAssembly.dll,f3 0f 11 7b ? e8 ? ? ? ? 44 0f 2f d7)

newmem:
player_health_bytes:
  //movss xmm1,[rax+18]
  readMem(hook, 5)
  jmp returnhere

player_health_base_ptr:
  dq 0

player_health_toggle:
  db 0

player_health_value:
  dd (float)105 //+5 for well fed

code:
  mov [player_health_base_ptr], rbx

  cmp byte ptr [player_health_toggle], 0
  jz player_health_bytes
  movss xmm7, [player_health_value]
  jmp player_health_bytes

hook:
player_health_hook:
  jmp code
  returnhere:



[DISABLE]
player_health_hook:
  //db F3 0F 10 48 18
  readMem(player_health_bytes, 5)

unregistersymbol(player_health_hook)
unregistersymbol(player_health_bytes)
unregistersymbol(player_health_base_ptr)
unregistersymbol(player_health_toggle)
unregistersymbol(player_health_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+5E6A6B

GameAssembly.dll+5E6A40: 33 D2              - xor edx,edx
GameAssembly.dll+5E6A42: E8 29 B3 61 00     - call GameAssembly.dll+C01D70
GameAssembly.dll+5E6A47: F3 44 0F 59 C8     - mulss xmm9,xmm0
GameAssembly.dll+5E6A4C: F3 0F 10 73 1C     - movss xmm6,[rbx+1C]
GameAssembly.dll+5E6A51: 33 D2              - xor edx,edx
GameAssembly.dll+5E6A53: 44 0F 29 44 24 50  - movaps [rsp+50],xmm8
GameAssembly.dll+5E6A59: 48 8B CB           - mov rcx,rbx
GameAssembly.dll+5E6A5C: F3 44 0F 10 43 18  - movss xmm8,[rbx+18]
GameAssembly.dll+5E6A62: 41 0F 28 F8        - movaps xmm7,xmm8
GameAssembly.dll+5E6A66: F3 41 0F 58 F9     - addss xmm7,xmm9
// ---------- INJECTING HERE ----------
GameAssembly.dll+5E6A6B: F3 0F 11 7B 18     - movss [rbx+18],xmm7
// ---------- DONE INJECTING  ----------
GameAssembly.dll+5E6A70: E8 8B A7 FF FF     - call GameAssembly.dll+5E1200
GameAssembly.dll+5E6A75: 44 0F 2F D7        - comiss xmm10,xmm7
GameAssembly.dll+5E6A79: F3 0F 58 C6        - addss xmm0,xmm6
GameAssembly.dll+5E6A7D: 77 0A              - ja GameAssembly.dll+5E6A89
GameAssembly.dll+5E6A7F: 0F 2F F8           - comiss xmm7,xmm0
GameAssembly.dll+5E6A82: 76 08              - jna GameAssembly.dll+5E6A8C
GameAssembly.dll+5E6A84: 0F 28 F8           - movaps xmm7,xmm0
GameAssembly.dll+5E6A87: EB 03              - jmp GameAssembly.dll+5E6A8C
GameAssembly.dll+5E6A89: 0F 57 FF           - xorps xmm7,xmm7
GameAssembly.dll+5E6A8C: F3 0F 11 7B 18     - movss [rbx+18],xmm7
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8739</ID>
                  <Description>"Set Health"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
player_health_toggle:
  db 01

[DISABLE]
player_health_toggle:
  db 00
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8740</ID>
                      <Description>"Health Value"</Description>
                      <Color>800080</Color>
                      <VariableType>Float</VariableType>
                      <Address>player_health_value</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8741</ID>
                  <Description>"Health"</Description>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_health_base_ptr</Address>
                  <Offsets>
                    <Offset>18</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8742</ID>
                  <Description>"Health Max"</Description>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>player_health_base_ptr</Address>
                  <Offsets>
                    <Offset>1C</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8603</ID>
              <Description>"Backpack (Weight / Scent)"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.95 83861 S
  Date   : 2021-10-18
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(code_weight)
label(code_scent)
label(backpack_hook)
label(backpack_bytes)
label(backpack_base_ptr)
label(backpack_weight_toggle)
label(backpack_scent_toggle)
label(backpack_weight_value)
label(backpack_scent_value)
registersymbol(backpack_hook)
registersymbol(backpack_bytes)
registersymbol(backpack_base_ptr)
registersymbol(backpack_weight_toggle)
registersymbol(backpack_scent_toggle)
registersymbol(backpack_weight_value)
registersymbol(backpack_scent_value)
aobScanModule(hook,GameAssembly.dll,f3 0f 11 4d ? f3 44 0f 11 4d)

newmem:
backpack_bytes:
  readMem(hook, 5)
  jmp returnhere

backpack_base_ptr:
  dq 0

backpack_weight_toggle:
  db 0

backpack_scent_toggle:
  db 0

backpack_weight_value:
  dd (float)15

backpack_scent_value:
  dd (float)0

code:
  mov [backpack_base_ptr], rbp

code_weight:
  cmp byte ptr [backpack_weight_toggle], 0
  jz code_scent

  movss xmm9, [backpack_weight_value]

code_scent:
  cmp byte ptr [backpack_scent_toggle], 0
  jz backpack_bytes

  movss xmm8, [backpack_scent_value]
  jmp backpack_bytes

hook:
backpack_hook:
  jmp code
  returnhere:



[DISABLE]
backpack_hook:
  readMem(backpack_bytes, 5)

unregistersymbol(backpack_hook)
unregistersymbol(backpack_bytes)
unregistersymbol(backpack_base_ptr)
unregistersymbol(backpack_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+CEE099

GameAssembly.dll+CEE07B: F3 0F 10 4D 6C              - movss xmm1,[rbp+6C]
GameAssembly.dll+CEE080: 0F 2F F9                    - comiss xmm7,xmm1
GameAssembly.dll+CEE083: 77 0A                       - ja GameAssembly.dll+CEE08F
GameAssembly.dll+CEE085: 0F 2F C8                    - comiss xmm1,xmm0
GameAssembly.dll+CEE088: 76 08                       - jna GameAssembly.dll+CEE092
GameAssembly.dll+CEE08A: 0F 28 C8                    - movaps xmm1,xmm0
GameAssembly.dll+CEE08D: EB 03                       - jmp GameAssembly.dll+CEE092
GameAssembly.dll+CEE08F: 0F 28 CF                    - movaps xmm1,xmm7
GameAssembly.dll+CEE092: 48 8B 45 30                 - mov rax,[rbp+30]
GameAssembly.dll+CEE096: 41 8B CE                    - mov ecx,r14d
// ---------- INJECTING HERE ----------
GameAssembly.dll+CEE099: F3 0F 11 4D 6C              - movss [rbp+6C],xmm1
// ---------- DONE INJECTING  ----------
GameAssembly.dll+CEE09E: F3 44 0F 11 4D 70           - movss [rbp+70],xmm9
GameAssembly.dll+CEE0A4: F3 44 0F 11 85 8C 00 00 00  - movss [rbp+0000008C],xmm8
GameAssembly.dll+CEE0AD: 48 85 C0                    - test rax,rax
GameAssembly.dll+CEE0B0: 0F 84 D5 00 00 00           - je GameAssembly.dll+CEE18B
GameAssembly.dll+CEE0B6: 3B 48 18                    - cmp ecx,[rax+18]
GameAssembly.dll+CEE0B9: 0F 8D 8B 00 00 00           - jnl GameAssembly.dll+CEE14A
GameAssembly.dll+CEE0BF: 48 8B 45 30                 - mov rax,[rbp+30]
GameAssembly.dll+CEE0C3: 48 85 C0                    - test rax,rax
GameAssembly.dll+CEE0C6: 0F 84 BF 00 00 00           - je GameAssembly.dll+CEE18B
GameAssembly.dll+CEE0CC: 44 3B 70 18                 - cmp r14d,[rax+18]
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8648</ID>
                  <Description>"Set Weight"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
backpack_weight_toggle:
  db 01

[DISABLE]
backpack_weight_toggle:
  db 00
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8649</ID>
                      <Description>"Weight Value"</Description>
                      <LastState Value="248751.7344" RealAddress="7FFA71990014"/>
                      <Color>800080</Color>
                      <VariableType>Float</VariableType>
                      <Address>backpack_weight_value</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8638</ID>
                  <Description>"Set Scent"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
backpack_scent_toggle:
  db 01

[DISABLE]
backpack_scent_toggle:
  db 00
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8639</ID>
                      <Description>"Scent Value"</Description>
                      <LastState Value="2.283166276E-38" RealAddress="7FFA71990018"/>
                      <Color>800080</Color>
                      <VariableType>Float</VariableType>
                      <Address>backpack_scent_value</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8640</ID>
                  <Description>"Weight"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>backpack_base_ptr</Address>
                  <Offsets>
                    <Offset>70</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8641</ID>
                  <Description>"Scent"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>backpack_base_ptr</Address>
                  <Offsets>
                    <Offset>8c</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8863</ID>
              <Description>"Afflictions"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>C08000</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>8861</ID>
                  <Description>"Remove Sprained Ankle"</Description>
                  <LastState/>
                  <Color>008000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-28
  Author : sub1to
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(sprained_ankle_update_hook)
label(sprained_ankle_update_bytes)
registersymbol(sprained_ankle_update_hook)
registersymbol(sprained_ankle_update_bytes)

//  class: SprainedAnkle
//  RVA: 0xFE60B0 Offset: 0xFE50B0 VA: 0x7FFB0C9B60B0
//  public void Update() { }
aobScanModule(hook,GameAssembly.dll,40 57 48 83 ec ? 80 3d ? ? ? ? ? 48 8b f9 75 ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? c6 05 ? ? ? ? ? 48 8b 0d ? ? ? ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? 48 8b 0d ? ? ? ? 48 8b 81 ? ? ? ? 80 78 ? ? 0f 85 ? ? ? ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? 48 8b 0d ? ? ? ? 48 8b 81 ? ? ? ? 80 b8 ? ? ? ? ? 75 ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? 48 89 5c 24 ? e8 ? ? ? ? 48 85 c0 74 ? 80 b8 ? ? ? ? ? 75 ? 48 8b 87)

//  class: SprainedAnkle
//  RVA: 0xFE7B80 Offset: 0xFE6B80 VA: 0x7FFB0C9B7B80
//  public void SprainedAnkleEnd(int index) { }
aobScanModule(sprained_ankle_end,GameAssembly.dll,AD FF CC CC CC CC CC 48 89 5C 24 10)

newmem:
sprained_ankle_update_bytes:
  readMem(hook, 6)
  jmp returnhere

code:
  lea rsp, [rsp-38]
  mov [rsp+30], rcx
  xor rdx, rdx
  call sprained_ankle_end+7
  mov rcx, [rsp+30]
  lea rsp, [rsp+38]
  jmp sprained_ankle_update_bytes

hook:
sprained_ankle_update_hook:
  jmp code
  nop
  returnhere:



[DISABLE]
sprained_ankle_update_hook:
  //57 48 83 EC 40
  readMem(sprained_ankle_update_bytes, 6)

unregistersymbol(sprained_ankle_update_hook)
unregistersymbol(sprained_ankle_update_bytes)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+FE60B0

"GameAssembly.dll"+FE60A6: CC                          -  int 3
"GameAssembly.dll"+FE60A7: CC                          -  int 3
"GameAssembly.dll"+FE60A8: CC                          -  int 3
"GameAssembly.dll"+FE60A9: CC                          -  int 3
"GameAssembly.dll"+FE60AA: CC                          -  int 3
"GameAssembly.dll"+FE60AB: CC                          -  int 3
"GameAssembly.dll"+FE60AC: CC                          -  int 3
"GameAssembly.dll"+FE60AD: CC                          -  int 3
"GameAssembly.dll"+FE60AE: CC                          -  int 3
"GameAssembly.dll"+FE60AF: CC                          -  int 3
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+FE60B0: 57                          -  push rdi
"GameAssembly.dll"+FE60B1: 48 83 EC 40                 -  sub rsp,40
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+FE60B5: 90                          -  nop
"GameAssembly.dll"+FE60B6: 48 C7 44 24 20 FE FF FF FF  -  mov qword ptr [rsp+20],FFFFFFFE
"GameAssembly.dll"+FE60BF: 48 89 5C 24 50              -  mov [rsp+50],rbx
"GameAssembly.dll"+FE60C4: 48 8B F9                    -  mov rdi,rcx
"GameAssembly.dll"+FE60C7: 33 DB                       -  xor ebx,ebx
"GameAssembly.dll"+FE60C9: 38 1D 09 74 46 03           -  cmp [GameAssembly.dll+444D4D8],bl
"GameAssembly.dll"+FE60CF: 75 4D                       -  jne GameAssembly.dll+FE611E
"GameAssembly.dll"+FE60D1: 48 8B 05 68 FC 45 03        -  mov rax,[GameAssembly.dll+4445D40]
"GameAssembly.dll"+FE60D8: 48 63 90 B8 00 00 00        -  movsxd  rdx,dword ptr [rax+000000B8]
"GameAssembly.dll"+FE60DF: 48 8B 05 32 FC 45 03        -  mov rax,[GameAssembly.dll+4445D18]
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>9085</ID>
                  <Description>"Remove Sprained Wrist"</Description>
                  <LastState/>
                  <Color>008000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-28
  Author : sub1to
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(sprained_wrist_update_hook)
label(sprained_wrist_update_bytes)
registersymbol(sprained_wrist_update_hook)
registersymbol(sprained_wrist_update_bytes)

//  class: SprainedWrist
//  public void Update() { }
aobScanModule(hook,GameAssembly.dll,40 57 48 83 ec ? 80 3d ? ? ? ? ? 48 8b f9 75 ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? c6 05 ? ? ? ? ? 48 8b 0d ? ? ? ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? 48 8b 0d ? ? ? ? 48 8b 81 ? ? ? ? 80 78 ? ? 0f 85 ? ? ? ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? 48 8b 0d ? ? ? ? 48 8b 81 ? ? ? ? 80 b8 ? ? ? ? ? 75 ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? 48 89 5c 24 ? e8 ? ? ? ? 48 85 c0 74 ? 80 b8 ? ? ? ? ? 75 ? 48 8b 47)

//  class: SprainedWrist
//  public void SprainedWristEnd(int index) { }
aobScanModule(sprained_wrist_end,GameAssembly.dll,AD FF CC CC CC CC CC CC CC CC CC CC 48 89 5C 24 10)

newmem:
sprained_wrist_update_bytes:
  readMem(hook, 6)
  jmp returnhere

code:
  lea rsp, [rsp-38]
  mov [rsp+30], rcx
  xor rdx, rdx
  call sprained_wrist_end+C
  mov rcx, [rsp+30]
  lea rsp, [rsp+38]
  jmp sprained_wrist_update_bytes

hook:
sprained_wrist_update_hook:
  jmp code
  nop
  returnhere:



[DISABLE]
sprained_wrist_update_hook:
  readMem(sprained_wrist_update_bytes, 6)

unregistersymbol(sprained_wrist_update_hook)
unregistersymbol(sprained_wrist_update_bytes)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+811480

GameAssembly.dll+811476: CC                    - int 3
GameAssembly.dll+811477: CC                    - int 3
GameAssembly.dll+811478: CC                    - int 3
GameAssembly.dll+811479: CC                    - int 3
GameAssembly.dll+81147A: CC                    - int 3
GameAssembly.dll+81147B: CC                    - int 3
GameAssembly.dll+81147C: CC                    - int 3
GameAssembly.dll+81147D: CC                    - int 3
GameAssembly.dll+81147E: CC                    - int 3
GameAssembly.dll+81147F: CC                    - int 3
// ---------- INJECTING HERE ----------
GameAssembly.dll+811480: 40 57                 - push rdi
// ---------- DONE INJECTING  ----------
GameAssembly.dll+811482: 48 83 EC 20           - sub rsp,20
GameAssembly.dll+811486: 80 3D 67 38 03 04 00  - cmp byte ptr [GameAssembly.dll+4844CF4],00
GameAssembly.dll+81148D: 48 8B F9              - mov rdi,rcx
GameAssembly.dll+811490: 75 1F                 - jne GameAssembly.dll+8114B1
GameAssembly.dll+811492: 48 8D 0D 9F 6C E4 03  - lea rcx,[GameAssembly.dll+4658138]
GameAssembly.dll+811499: E8 B2 E9 B5 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+81149E: 48 8D 0D EB D2 E4 03  - lea rcx,[GameAssembly.dll+465E790]
GameAssembly.dll+8114A5: E8 A6 E9 B5 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+8114AA: C6 05 43 38 03 04 01  - mov byte ptr [GameAssembly.dll+4844CF4],01
GameAssembly.dll+8114B1: 48 8B 0D 80 6C E4 03  - mov rcx,[GameAssembly.dll+4658138]
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>9086</ID>
                  <Description>"Remove Sprain Pain"</Description>
                  <LastState/>
                  <Color>008000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-28
  Author : sub1to
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(sprain_pain_update_hook)
label(sprain_pain_update_bytes)
registersymbol(sprain_pain_update_hook)
registersymbol(sprain_pain_update_bytes)

//  class: SprainPain
//  public void Update() { }
aobScanModule(hook,GameAssembly.dll,40 57 48 81 ec ? ? ? ? 80 3d ? ? ? ? ? 48 8b f9 75 ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? c6 05 ? ? ? ? ? 48 8b 0d)

//  class: SprainPain
//  public void Cure() { }
aobScanModule(sprain_pain_end,GameAssembly.dll,40 57 48 83 ec ? 80 3d ? ? ? ? ? 48 8b f9 75 ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? c6 05 ? ? ? ? ? 48 8b 47 ? 48 89 5c 24 ? 48 85 c0 74 ? 8b 58 ? 83 eb ? 78 ? 48 8b 47 ? 48 85 c0 74 ? 3b 58 ? 73 ? 48 8b 50)

newmem:
sprain_pain_update_bytes:
  readMem(hook, 9)
  jmp returnhere

code:
  lea rsp, [rsp-38]
  mov [rsp+30], rcx
  xor rdx, rdx
  call sprain_pain_end
  mov rcx, [rsp+30]
  lea rsp, [rsp+38]
  jmp sprain_pain_update_bytes

hook:
sprain_pain_update_hook:
  jmp code
  nop 4
  returnhere:



[DISABLE]
sprain_pain_update_hook:
  readMem(sprain_pain_update_bytes, 9)

unregistersymbol(sprain_pain_update_hook)
unregistersymbol(sprain_pain_update_bytes)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+8136D0

GameAssembly.dll+8136BA: F0 48 0F B1 0A        - lock cmpxchg [rdx],rcx
GameAssembly.dll+8136BF: 75 EF                 - jne GameAssembly.dll+8136B0
GameAssembly.dll+8136C1: 48 83 C4 28           - add rsp,28
GameAssembly.dll+8136C5: C3                    - ret
GameAssembly.dll+8136C6: E8 65 56 AD FF        - call GameAssembly.il2cpp_value_box+50
GameAssembly.dll+8136CB: CC                    - int 3
GameAssembly.dll+8136CC: CC                    - int 3
GameAssembly.dll+8136CD: CC                    - int 3
GameAssembly.dll+8136CE: CC                    - int 3
GameAssembly.dll+8136CF: CC                    - int 3
// ---------- INJECTING HERE ----------
GameAssembly.dll+8136D0: 40 57                 - push rdi
// ---------- DONE INJECTING  ----------
GameAssembly.dll+8136D2: 48 81 EC 80 00 00 00  - sub rsp,00000080
GameAssembly.dll+8136D9: 80 3D 29 16 03 04 00  - cmp byte ptr [GameAssembly.dll+4844D09],00
GameAssembly.dll+8136E0: 48 8B F9              - mov rdi,rcx
GameAssembly.dll+8136E3: 75 43                 - jne GameAssembly.dll+813728
GameAssembly.dll+8136E5: 48 8D 0D 3C 7B E1 03  - lea rcx,[GameAssembly.dll+462B228]
GameAssembly.dll+8136EC: E8 5F C7 B5 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+8136F1: 48 8D 0D 68 49 E4 03  - lea rcx,[GameAssembly.dll+4658060]
GameAssembly.dll+8136F8: E8 53 C7 B5 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+8136FD: 48 8D 0D 34 4A E4 03  - lea rcx,[GameAssembly.dll+4658138]
GameAssembly.dll+813704: E8 47 C7 B5 FF        - call GameAssembly.dll+36FE50
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8873</ID>
                  <Description>"Remove Hypothermia (Risk)"</Description>
                  <LastState/>
                  <Color>008000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-28
  Author : sub1to
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(code_call_end)
label(hypothermia_update_hook)
label(hypothermia_update_bytes)
label(hypothermia_suppressed_hook)
label(hypothermia_suppressed_bytes)
label(hypothermia_base_ptr)
registersymbol(hypothermia_update_hook)
registersymbol(hypothermia_update_bytes)
registersymbol(hypothermia_suppressed_hook)
registersymbol(hypothermia_suppressed_bytes)
registersymbol(hypothermia_base_ptr)

//  class: Hypothermia
//  RVA: 0x10F2F00 Offset: 0x10F1F00 VA: 0x7FFB0CAC2F00
//  public void Update() { }
aobScanModule(hook,GameAssembly.dll,40 53 48 83 ec ? 80 3d ? ? ? ? ? 48 8b d9 75 ? 48 8d 0d ? ? ? ? e8 ? ? ? ? c6 05 ? ? ? ? ? 48 8b 0d ? ? ? ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? 48 8b 0d ? ? ? ? 48 8b 81 ? ? ? ? 80 78 ? ? 75 ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? 48 8b 0d ? ? ? ? 48 8b 81 ? ? ? ? 80 b8 ? ? ? ? ? 75 ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? e8 ? ? ? ? 48 85 c0 74 ? 80 b8 ? ? ? ? ? 75 ? 33 d2)

//  class: Hypothermia
// 	RVA: 0x10F3BD0 Offset: 0x10F2BD0 VA: 0x7FFB0CAC3BD0
//  private void CheckForHypothermia() { }
aobScanModule(hook2,GameAssembly.dll,80 7b ? ? 0f 85 ? ? ? ? 48 8b 0d ? ? ? ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? 48 89 b4 24)


//  class: Hypothermia
//  RVA: 0x10F35C0 Offset: 0x10F25C0 VA: 0x7FFB0CAC35C0
//  public void HypothermiaEnd() { }
aobScanModule(hypothermia_end,GameAssembly.dll,40 53 48 83 ec ? 80 3d ? ? ? ? ? 48 8b d9 75 ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? c6 05 ? ? ? ? ? 48 8b 43 ? 48 c7 44 24 ? ? ? ? ? c6 43 ? ? c7 43)


newmem:
hypothermia_update_bytes:
  //push rbx
  //sub rsp,40
  readMem(hook, 6)
  jmp returnhere

hypothermia_suppressed_bytes:
  //cmp byte ptr [rbx+61],00
  readMem(hook2, 4)

hypothermia_base_ptr:
  dq 0

code:
  mov [hypothermia_base_ptr], rcx

  // private bool m_Active; // 0x58
  // If the affliction is active, call Hypothermia.HypothermiaEnd
  cmp byte ptr [rcx+58], 0
  jnz code_call_end

  // private float m_ElapsedHours; // 0x5C
  // If the elapsed time is higher than 0, we have hypothermia risk, so call Hypothermia.HypothermiaEnd
  movss xmm1, [rcx+5C]
  xorps xmm0, xmm0
  comiss xmm1, xmm0
  jbe hypothermia_update_bytes

code_call_end:
  lea rsp, [rsp-38]
  mov [rsp+30], rcx
  call hypothermia_end
  mov rcx, [rsp+30]
  lea rsp, [rsp+38]
  jmp hypothermia_update_bytes

hook:
hypothermia_update_hook:
  jmp code
  nop
  returnhere:


// this patch is to prevent hypothermia immediately coming back
hook2:
hypothermia_suppressed_hook:
  test rbx, rbx
  nop



[DISABLE]
hypothermia_update_hook:
  //40 53 48 83 EC 40
  readMem(hypothermia_update_bytes, 6)

hypothermia_suppressed_hook:
  //80 7B 61 00
  readMem(hypothermia_suppressed_bytes,4)

unregistersymbol(hypothermia_update_hook)
unregistersymbol(hypothermia_update_bytes)
unregistersymbol(hypothermia_suppressed_hook)
unregistersymbol(hypothermia_suppressed_bytes)
unregistersymbol(hypothermia_base_ptr)
dealloc(newmem)

{
hook+4 / hypothermia_update_hook
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+10F2F00

"GameAssembly.dll"+10F2EEC: CC                          -  int 3
"GameAssembly.dll"+10F2EED: CC                          -  int 3
"GameAssembly.dll"+10F2EEE: CC                          -  int 3
"GameAssembly.dll"+10F2EEF: CC                          -  int 3
"GameAssembly.dll"+10F2EF0: 80 79 60 00                 -  cmp byte ptr [rcx+60],00
"GameAssembly.dll"+10F2EF4: 75 08                       -  jne GameAssembly.dll+10F2EFE
"GameAssembly.dll"+10F2EF6: C6 41 60 01                 -  mov byte ptr [rcx+60],01
"GameAssembly.dll"+10F2EFA: C6 41 48 00                 -  mov byte ptr [rcx+48],00
"GameAssembly.dll"+10F2EFE: C3                          -  ret
"GameAssembly.dll"+10F2EFF: CC                          -  int 3
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+10F2F00: 40 53                       -  push rbx
"GameAssembly.dll"+10F2F02: 48 83 EC 40                 -  sub rsp,40
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+10F2F06: 48 C7 44 24 20 FE FF FF FF  -  mov qword ptr [rsp+20],FFFFFFFE
"GameAssembly.dll"+10F2F0F: 48 8B D9                    -  mov rbx,rcx
"GameAssembly.dll"+10F2F12: 80 3D 1A AB 35 03 00        -  cmp byte ptr [GameAssembly.dll+444DA33],00
"GameAssembly.dll"+10F2F19: 75 50                       -  jne GameAssembly.dll+10F2F6B
"GameAssembly.dll"+10F2F1B: 48 8B 05 1E 2E 35 03        -  mov rax,[GameAssembly.dll+4445D40]
"GameAssembly.dll"+10F2F22: 48 63 90 B8 00 00 00        -  movsxd  rdx,dword ptr [rax+000000B8]
"GameAssembly.dll"+10F2F29: 48 8B 05 E8 2D 35 03        -  mov rax,[GameAssembly.dll+4445D18]
"GameAssembly.dll"+10F2F30: 8B 8C 02 D0 5B 04 00        -  mov ecx,[rdx+rax+00045BD0]
"GameAssembly.dll"+10F2F37: 45 33 C0                    -  xor r8d,r8d
"GameAssembly.dll"+10F2F3A: 4C 89 44 24 28              -  mov [rsp+28],r8
}


{
hook2 / hypotherima_is_suppressed
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+10F3C5A

"GameAssembly.dll"+10F3C31: 49 89 6B A0           -  mov [r11-60],rbp
"GameAssembly.dll"+10F3C35: 49 89 6B A8           -  mov [r11-58],rbp
"GameAssembly.dll"+10F3C39: 4D 8D 43 98           -  lea r8,[r11-68]
"GameAssembly.dll"+10F3C3D: 8B 94 02 94 5B 04 00  -  mov edx,[rdx+rax+00045B94]
"GameAssembly.dll"+10F3C44: E8 F7 DE F8 FE        -  call GameAssembly.dll+81B40
"GameAssembly.dll"+10F3C49: 90                    -  nop
"GameAssembly.dll"+10F3C4A: 33 C9                 -  xor ecx,ecx
"GameAssembly.dll"+10F3C4C: FF 15 DE 74 06 03     -  call qword ptr [GameAssembly.dll+415B130]
"GameAssembly.dll"+10F3C52: 90                    -  nop
"GameAssembly.dll"+10F3C53: C6 05 1D 9D 35 03 01  -  mov byte ptr [GameAssembly.dll+444D977],01
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+10F3C5A: 80 7B 61 00           -  cmp byte ptr [rbx+61],00
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+10F3C5E: 0F 85 19 03 00 00     -  jne GameAssembly.dll+10F3F7D
"GameAssembly.dll"+10F3C64: 48 8B 0D 9D DB 3C 03  -  mov rcx,[GameAssembly.dll+44C1808]
"GameAssembly.dll"+10F3C6B: F6 81 2F 01 00 00 02  -  test byte ptr [rcx+0000012F],02
"GameAssembly.dll"+10F3C72: 74 0E                 -  je GameAssembly.dll+10F3C82
"GameAssembly.dll"+10F3C74: 83 B9 E0 00 00 00 00  -  cmp dword ptr [rcx+000000E0],00
"GameAssembly.dll"+10F3C7B: 75 05                 -  jne GameAssembly.dll+10F3C82
"GameAssembly.dll"+10F3C7D: E8 4E 7A F9 FE        -  call GameAssembly.dll+8B6D0
"GameAssembly.dll"+10F3C82: E8 69 09 D2 FF        -  call GameAssembly.dll+E145F0
"GameAssembly.dll"+10F3C87: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+10F3C8A: 0F 84 20 03 00 00     -  je GameAssembly.dll+10F3FB0
"GameAssembly.dll"+10F3C90: F3 0F 10 40 20        -  movss xmm0,[rax+20]
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8919</ID>
                  <Description>"Remove Cabin Fever"</Description>
                  <LastState/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-10-30
  Author : sub1to


  	// Fields
	public float m_NumHoursToExitRisk; // 0x18
	public float m_NumHoursToEnterRisk; // 0x1C
	public float m_NumHoursRequiredIndoors; // 0x20
	public float m_NumHoursToCheck; // 0x24
	public float m_NumHoursToPreventIndoorRest; // 0x28
	public int m_NumSafeDaysVoyageur; // 0x2C
	public int m_NumSafeDaysStalker; // 0x30
	[FormerlySerializedAsAttribute] // RVA: 0x185D20 Offset: 0x185120 VA: 0x7FFB0BB55D20
	public int m_NumSafeDaysInterloper; // 0x34
	public List&lt;ExperienceModeType&gt; m_XPModesToDisable; // 0x38
	private bool m_Active; // 0x40
	private bool m_RiskActive; // 0x41
	private float m_ElapsedHours; // 0x44
	private List&lt;float&gt; m_IndoorTimeTracked; // 0x48
	private int m_HourLastFrame; // 0x50
	private float m_HoursIndoorsExcludingLastHourCached; // 0x54
	private bool m_StartHasBeenCalled; // 0x58
	private static CabinFeverSaveDataProxy m_CabinFeverSaveDataProxy; // 0x0
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(cabin_fever_update_hook)
label(cabin_fever_update_bytes)
label(cabin_fever_check_hook)
label(cabin_fever_start_bytes)
registersymbol(cabin_fever_update_hook)
registersymbol(cabin_fever_update_bytes)
registersymbol(cabin_fever_check_hook)
registersymbol(cabin_fever_start_bytes)

//  class: CabinFever
//  RVA: 0x15B8420 Offset: 0x15B7420 VA: 0x7FFB0CF88420
//  public void Update() { }
aobScanModule(hook,GameAssembly.dll,40 00 C3 CC 4C 8B DC 57 48 83 EC 50)

//  class: CabinFever
//  RVA: 0x15B99D0 Offset: 0x15B89D0 VA: 0x7FFB0CF899D0
//  private void CheckForCabinFever() { }
aobScanModule(hook2,GameAssembly.dll,4c 8b dc 57 48 81 ec ? ? ? ? 49 c7 43 ? ? ? ? ? 49 89 5b ? 0f 29 74 24 ? 0f 29 7c 24 ? 48 8b d9 33 ff 40 38 3d ? ? ? ? 75 ? 48 8b 05 ? ? ? ? 48 63 90 ? ? ? ? 48 8b 05 ? ? ? ? 8b 8c 02 ? ? ? ? 49 89 7b ? 49 89 7b ? 49 89 7b ? 4d 8d 43 ? 8b 94 02 ? ? ? ? e8 ? ? ? ? 90 33 c9 ff 15 ? ? ? ? 90 c6 05 ? ? ? ? ? f3 0f 10 73)

//  class: CabinFever
//  RVA: 0x15B9310 Offset: 0x15B8310 VA: 0x7FFB0CF89310
//  public void CabinFeverEnd() { }
aobScanModule(cabin_fever_end,GameAssembly.dll,40 57 48 83 ec ? 48 c7 44 24 ? ? ? ? ? 48 89 5c 24 ? 48 8b d9 33 ff 40 38 3d ? ? ? ? 75 ? 48 8b 05 ? ? ? ? 48 63 90 ? ? ? ? 48 8b 05 ? ? ? ? 8b 8c 02 ? ? ? ? 48 89 7c 24 ? 48 89 7c 24 ? 48 89 7c 24 ? 4c 8d 44 24 ? 8b 94 02 ? ? ? ? e8 ? ? ? ? 90 33 c9 ff 15 ? ? ? ? 90 c6 05 ? ? ? ? ? 66 c7 43 ? ? ? 89 7b)

newmem:
cabin_fever_update_bytes:
  //mov r11,rsp
  //push rdi
  //sub rsp,50
  readMem(hook+4, 8)
  jmp returnhere

cabin_fever_start_bytes:
  //mov r11,rsp
  //push rdi
  readMem(hook2, 4)

code:
  lea rsp, [rsp-38]
  mov [rsp+30], rcx
  call cabin_fever_end
  mov rcx, [rsp+30]
  lea rsp, [rsp+38]
  jmp cabin_fever_update_bytes

hook+4:
cabin_fever_update_hook:
  jmp code
  nop
  nop
  nop
  returnhere:

hook2:
cabin_fever_check_hook:
  db 48 31 c0 c3
  //xor rax, rax
  //ret



[DISABLE]
cabin_fever_update_hook:
  //4C 8B DC 57 48 83 EC 50
  readMem(cabin_fever_update_bytes, 8)

cabin_fever_check_hook:
  //4C 8B DC 57
  readMem(cabin_fever_start_bytes, 4)

unregistersymbol(cabin_fever_update_hook)
unregistersymbol(cabin_fever_update_bytes)
unregistersymbol(cabin_fever_check_hook)
unregistersymbol(cabin_fever_start_bytes)
dealloc(newmem)

{
hook / cabin_fever_update_hook
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+15B8420

"GameAssembly.dll"+15B840C: C3                       -  ret
"GameAssembly.dll"+15B840D: CC                       -  int 3
"GameAssembly.dll"+15B840E: CC                       -  int 3
"GameAssembly.dll"+15B840F: CC                       -  int 3
"GameAssembly.dll"+15B8410: 80 79 58 00              -  cmp byte ptr [rcx+58],00
"GameAssembly.dll"+15B8414: 75 08                    -  jne GameAssembly.dll+15B841E
"GameAssembly.dll"+15B8416: C6 41 58 01              -  mov byte ptr [rcx+58],01
"GameAssembly.dll"+15B841A: C6 41 40 00              -  mov byte ptr [rcx+40],00
"GameAssembly.dll"+15B841E: C3                       -  ret
"GameAssembly.dll"+15B841F: CC                       -  int 3
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+15B8420: 4C 8B DC                 -  mov r11,rsp
"GameAssembly.dll"+15B8423: 57                       -  push rdi
"GameAssembly.dll"+15B8424: 48 83 EC 50              -  sub rsp,50
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+15B8428: 49 C7 43 C8 FE FF FF FF  -  mov qword ptr [r11-38],FFFFFFFE
"GameAssembly.dll"+15B8430: 49 89 5B 08              -  mov [r11+08],rbx
"GameAssembly.dll"+15B8434: 49 89 6B 10              -  mov [r11+10],rbp
"GameAssembly.dll"+15B8438: 49 89 73 18              -  mov [r11+18],rsi
"GameAssembly.dll"+15B843C: 0F 29 74 24 40           -  movaps [rsp+40],xmm6
"GameAssembly.dll"+15B8441: 48 8B D9                 -  mov rbx,rcx
"GameAssembly.dll"+15B8444: 33 ED                    -  xor ebp,ebp
"GameAssembly.dll"+15B8446: 40 38 2D 06 C5 E9 02     -  cmp [GameAssembly.dll+4454953],bpl
"GameAssembly.dll"+15B844D: 75 49                    -  jne GameAssembly.dll+15B8498
"GameAssembly.dll"+15B844F: 48 8B 05 EA D8 E8 02     -  mov rax,[GameAssembly.dll+4445D40]
}

{
hook2 / cabin_fever_check_hook
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+15B99D0

"GameAssembly.dll"+15B99C2: CC                       -  int 3
"GameAssembly.dll"+15B99C3: E8 38 0A B1 FE           -  call GameAssembly.dll+CA400
"GameAssembly.dll"+15B99C8: CC                       -  int 3
"GameAssembly.dll"+15B99C9: CC                       -  int 3
"GameAssembly.dll"+15B99CA: CC                       -  int 3
"GameAssembly.dll"+15B99CB: CC                       -  int 3
"GameAssembly.dll"+15B99CC: CC                       -  int 3
"GameAssembly.dll"+15B99CD: CC                       -  int 3
"GameAssembly.dll"+15B99CE: CC                       -  int 3
"GameAssembly.dll"+15B99CF: CC                       -  int 3
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+15B99D0: 4C 8B DC                 -  mov r11,rsp
"GameAssembly.dll"+15B99D3: 57                       -  push rdi
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+15B99D4: 48 81 EC 80 00 00 00     -  sub rsp,00000080
"GameAssembly.dll"+15B99DB: 49 C7 43 A8 FE FF FF FF  -  mov qword ptr [r11-58],FFFFFFFE
"GameAssembly.dll"+15B99E3: 49 89 5B 08              -  mov [r11+08],rbx
"GameAssembly.dll"+15B99E7: 0F 29 74 24 70           -  movaps [rsp+70],xmm6
"GameAssembly.dll"+15B99EC: 0F 29 7C 24 60           -  movaps [rsp+60],xmm7
"GameAssembly.dll"+15B99F1: 48 8B D9                 -  mov rbx,rcx
"GameAssembly.dll"+15B99F4: 33 FF                    -  xor edi,edi
"GameAssembly.dll"+15B99F6: 40 38 3D CF AE E9 02     -  cmp [GameAssembly.dll+44548CC],dil
"GameAssembly.dll"+15B99FD: 75 49                    -  jne GameAssembly.dll+15B9A48
"GameAssembly.dll"+15B99FF: 48 8B 05 3A C3 E8 02     -  mov rax,[GameAssembly.dll+4445D40]
"GameAssembly.dll"+15B9A06: 48 63 90 B8 00 00 00     -  movsxd  rdx,dword ptr [rax+000000B8]
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>9008</ID>
                  <Description>"Remove Frostbite"</Description>
                  <LastState/>
                  <Color>008000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-28
  Author : sub1to

}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(frostbite_update_hook)
label(frostbite_update_bytes)
registersymbol(frostbite_update_hook)
registersymbol(frostbite_update_bytes)

//  class: Frostbite
//  RVA: 0x104CD20 Offset: 0x104BD20 VA: 0x7FFB0CA1CD20
//	public void Update() { }
aobScanModule(hook,GameAssembly.dll,40 53 48 83 ec ? 80 3d ? ? ? ? ? 48 8b d9 75 ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? c6 05 ? ? ? ? ? 48 8b 0d ? ? ? ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? 48 8b 0d ? ? ? ? 48 8b 81 ? ? ? ? 80 78 ? ? 75)

//  class: Frostbite
//  RVA: 0x104D9D0 Offset: 0x104C9D0 VA: 0x7FFB0CA1D9D0
//  public void FrostbiteEnd() { }
aobScanModule(frostbite_end,GameAssembly.dll,40 53 48 83 ec ? 80 3d ? ? ? ? ? 48 8b d9 75 ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? c6 05 ? ? ? ? ? 48 8b 43 ? 48 85 c0 74 ? ff 40)

newmem:
frostbite_update_bytes:
  //push rbx
  //sub rsp,40
  readMem(hook, 6)
  jmp returnhere

code:
  lea rsp, [rsp-38]
  mov [rsp+30], rcx
  xor rdx, rdx
  call frostbite_end
  mov rcx, [rsp+30]
  lea rsp, [rsp+38]
  jmp frostbite_update_bytes

hook:
frostbite_update_hook:
  jmp code
  nop
  returnhere:



[DISABLE]
frostbite_update_hook:
  //40 53 48 83 EC 40
  readMem(frostbite_update_bytes, 6)

unregistersymbol(frostbite_update_hook)
unregistersymbol(frostbite_update_bytes)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+104CD20

"GameAssembly.dll"+104CD0B: CC                          -  int 3
"GameAssembly.dll"+104CD0C: E8 BF E3 02 FF              -  call GameAssembly.dll+7B0D0
"GameAssembly.dll"+104CD11: 48 8B C8                    -  mov rcx,rax
"GameAssembly.dll"+104CD14: 33 D2                       -  xor edx,edx
"GameAssembly.dll"+104CD16: E8 D5 D6 07 FF              -  call GameAssembly.dll+CA3F0
"GameAssembly.dll"+104CD1B: CC                          -  int 3
"GameAssembly.dll"+104CD1C: CC                          -  int 3
"GameAssembly.dll"+104CD1D: CC                          -  int 3
"GameAssembly.dll"+104CD1E: CC                          -  int 3
"GameAssembly.dll"+104CD1F: CC                          -  int 3
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+104CD20: 40 53                       -  push rbx
"GameAssembly.dll"+104CD22: 48 83 EC 40                 -  sub rsp,40
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+104CD26: 48 C7 44 24 20 FE FF FF FF  -  mov qword ptr [rsp+20],FFFFFFFE
"GameAssembly.dll"+104CD2F: 48 8B D9                    -  mov rbx,rcx
"GameAssembly.dll"+104CD32: 80 3D 1E 09 40 03 00        -  cmp byte ptr [GameAssembly.dll+444D657],00
"GameAssembly.dll"+104CD39: 75 50                       -  jne GameAssembly.dll+104CD8B
"GameAssembly.dll"+104CD3B: 48 8B 05 FE 8F 3F 03        -  mov rax,[GameAssembly.dll+4445D40]
"GameAssembly.dll"+104CD42: 48 63 90 B8 00 00 00        -  movsxd  rdx,dword ptr [rax+000000B8]
"GameAssembly.dll"+104CD49: 48 8B 05 C8 8F 3F 03        -  mov rax,[GameAssembly.dll+4445D18]
"GameAssembly.dll"+104CD50: 8B 8C 02 D0 B1 03 00        -  mov ecx,[rdx+rax+0003B1D0]
"GameAssembly.dll"+104CD57: 45 33 C0                    -  xor r8d,r8d
"GameAssembly.dll"+104CD5A: 4C 89 44 24 28              -  mov [rsp+28],r8
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8879</ID>
                  <Description>"Haven't done other afflictions yet.."</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>0080FF</Color>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>8787</ID>
          <Description>"Skills"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>C08000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8654</ID>
              <Description>"Skill (Open journal skill tab to activate)"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.95 83861 S
  Date   : 2021-10-18
  Author : sub1to

  This script does blah blah blah


  Thanks to JLee:
    // enum SkillType
	public const SkillType None = -1; // 0x0
	public const SkillType Firestarting = 0; // 0x0
	public const SkillType CarcassHarvesting = 1; // 0x0
	public const SkillType IceFishing = 2; // 0x0
	public const SkillType Cooking = 3; // 0x0
	public const SkillType Rifle = 4; // 0x0
	public const SkillType Archery = 5; // 0x0
	public const SkillType ClothingRepair = 6; // 0x0
	public const SkillType ToolRepair = 7; // 0x0
	public const SkillType Revolver = 8; // 0x0
	public const SkillType Gunsmithing = 9; // 0x0
}

[ENABLE]
alloc(newmem,$200,GameAssembly.dll)
label(returnhere)
label(code)
label(code_fire)
label(code_carcass)
label(code_fish)
label(code_cook)
label(code_rifle)
label(code_archery)
label(code_mending)
label(code_tool_repair)
label(code_revolver)
label(code_gunsmith)
label(read_journal_skill_level_hook)
label(read_journal_skill_level_bytes)
label(fire_skill_base_ptr)
label(carcass_skill_base_ptr)
label(fish_skill_base_ptr)
label(cook_skill_base_ptr)
label(rifle_skill_base_ptr)
label(archery_skill_base_ptr)
label(mending_skill_base_ptr)
label(tool_repair_skill_base_ptr)
label(revolver_skill_base_ptr)
label(gunsmith_skill_base_ptr)
registersymbol(read_journal_skill_level_hook)
registersymbol(read_journal_skill_level_bytes)
registersymbol(fire_skill_base_ptr)
registersymbol(carcass_skill_base_ptr)
registersymbol(fish_skill_base_ptr)
registersymbol(cook_skill_base_ptr)
registersymbol(rifle_skill_base_ptr)
registersymbol(archery_skill_base_ptr)
registersymbol(mending_skill_base_ptr)
registersymbol(tool_repair_skill_base_ptr)
registersymbol(revolver_skill_base_ptr)
registersymbol(gunsmith_skill_base_ptr)
aobScanModule(hook,GameAssembly.dll,44 8B 41 58 45 85 C0)

newmem:
read_journal_skill_level_bytes:
  //mov r8d,[rcx+58]
  //test r8d,r8d
  readMem(hook, 7)
  jmp returnhere

fire_skill_base_ptr:
  dq 0

carcass_skill_base_ptr:
  dq 0

fish_skill_base_ptr:
  dq 0

cook_skill_base_ptr:
  dq 0

rifle_skill_base_ptr:
  dq 0

archery_skill_base_ptr:
  dq 0

mending_skill_base_ptr:
  dq 0

tool_repair_skill_base_ptr:
  dq 0

revolver_skill_base_ptr:
  dq 0

gunsmith_skill_base_ptr:
  dq 0

code:
code_fire:
  cmp dword ptr [rcx+20], 0
  jnz code_carcass
  mov [fire_skill_base_ptr], rcx
  jmp read_journal_skill_level_bytes

code_carcass:
  cmp dword ptr [rcx+20], 1
  jnz code_fish
  mov [carcass_skill_base_ptr], rcx
  jmp read_journal_skill_level_bytes

code_fish:
  cmp dword ptr [rcx+20], 2
  jnz code_cook
  mov [fish_skill_base_ptr], rcx
  jmp read_journal_skill_level_bytes

code_cook:
  cmp dword ptr [rcx+20], 3
  jnz code_rifle
  mov [cook_skill_base_ptr], rcx
  jmp read_journal_skill_level_bytes

code_rifle:
  cmp dword ptr [rcx+20], 4
  jnz code_archery
  mov [rifle_skill_base_ptr], rcx
  jmp read_journal_skill_level_bytes

code_archery:
  cmp dword ptr [rcx+20], 5
  jnz code_mending
  mov [archery_skill_base_ptr], rcx
  jmp read_journal_skill_level_bytes

code_mending:
  cmp dword ptr [rcx+20], 6
  jnz code_tool_repair
  mov [mending_skill_base_ptr], rcx
  jmp read_journal_skill_level_bytes

code_tool_repair:
  cmp dword ptr [rcx+20], 7
  jnz code_revolver
  mov [tool_repair_skill_base_ptr], rcx
  jmp read_journal_skill_level_bytes

code_revolver:
  cmp dword ptr [rcx+20], 8
  jnz code_gunsmith
  mov [revolver_skill_base_ptr], rcx
  jmp read_journal_skill_level_bytes

code_gunsmith:
  cmp dword ptr [rcx+20], 9
  jnz read_journal_skill_level_bytes
  mov [gunsmith_skill_base_ptr], rcx
  jmp read_journal_skill_level_bytes

hook:
read_journal_skill_level_hook:
  jmp code
  nop
  nop
  returnhere:



[DISABLE]
read_journal_skill_level_hook:
  //db 44 8B 41 58 45 85 C0
  readMem(read_journal_skill_level_bytes, 7)

unregistersymbol(read_journal_skill_level_hook)
unregistersymbol(read_journal_skill_level_bytes)
unregistersymbol(fire_skill_base_ptr)
unregistersymbol(carcass_skill_base_ptr)
unregistersymbol(fish_skill_base_ptr)
unregistersymbol(cook_skill_base_ptr)
unregistersymbol(rifle_skill_base_ptr)
unregistersymbol(archery_skill_base_ptr)
unregistersymbol(mending_skill_base_ptr)
unregistersymbol(tool_repair_skill_base_ptr)
unregistersymbol(revolver_skill_base_ptr)
unregistersymbol(gunsmith_skill_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+16E7854

"GameAssembly.dll"+16E7843: CC                    -  int 3
"GameAssembly.dll"+16E7844: E8 B7 2B 9E FE        -  call GameAssembly.dll+CA400
"GameAssembly.dll"+16E7849: CC                    -  int 3
"GameAssembly.dll"+16E784A: CC                    -  int 3
"GameAssembly.dll"+16E784B: CC                    -  int 3
"GameAssembly.dll"+16E784C: CC                    -  int 3
"GameAssembly.dll"+16E784D: CC                    -  int 3
"GameAssembly.dll"+16E784E: CC                    -  int 3
"GameAssembly.dll"+16E784F: CC                    -  int 3
"GameAssembly.dll"+16E7850: 48 83 EC 28           -  sub rsp,28
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+16E7854: 44 8B 41 58           -  mov r8d,[rcx+58]
"GameAssembly.dll"+16E7858: 45 85 C0              -  test r8d,r8d
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+16E785B: 74 36                 -  je GameAssembly.dll+16E7893
"GameAssembly.dll"+16E785D: 48 8B 51 28           -  mov rdx,[rcx+28]
"GameAssembly.dll"+16E7861: 48 85 D2              -  test rdx,rdx
"GameAssembly.dll"+16E7864: 74 46                 -  je GameAssembly.dll+16E78AC
"GameAssembly.dll"+16E7866: 44 8B 4A 18           -  mov r9d,[rdx+18]
"GameAssembly.dll"+16E786A: 41 83 F9 04           -  cmp r9d,04
"GameAssembly.dll"+16E786E: 76 42                 -  jna GameAssembly.dll+16E78B2
"GameAssembly.dll"+16E7870: 44 3B 42 30           -  cmp r8d,[rdx+30]
"GameAssembly.dll"+16E7874: 74 2C                 -  je GameAssembly.dll+16E78A2
"GameAssembly.dll"+16E7876: 33 C9                 -  xor ecx,ecx
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8878</ID>
                  <Description>"Fire Starting"</Description>
                  <Color>FF8080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>fire_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>58</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8657</ID>
                  <Description>"Carcass Harvesting"</Description>
                  <Color>FF8080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>carcass_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>58</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8658</ID>
                  <Description>"Fishing"</Description>
                  <Color>FF8080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>fish_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>58</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8659</ID>
                  <Description>"Cooking"</Description>
                  <Color>FF8080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>cook_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>58</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8660</ID>
                  <Description>"Rifle"</Description>
                  <Color>FF8080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>rifle_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>58</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8656</ID>
                  <Description>"Archery"</Description>
                  <Color>FF8080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>archery_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>58</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8661</ID>
                  <Description>"Mending"</Description>
                  <Color>FF8080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>mending_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>58</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8663</ID>
                  <Description>"Revolver"</Description>
                  <Color>FF8080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>revolver_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>58</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8664</ID>
                  <Description>"Gunsmithing"</Description>
                  <Color>FF8080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>gunsmith_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>58</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8786</ID>
              <Description>"Secondary Skills (Open tool repair/gun cleaning/sharpening screen to activate)"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-23
  Author : sub1to

  This script does blah blah blah

  +14  tool repair skill
  +18  gun cleaning skill
  +1C  sharpening skill
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(code)
label(returnhere)
label(secondary_skill_hook)
label(secondary_skill_bytes)
label(secondary_skill_base_ptr)
registersymbol(secondary_skill_hook)
registersymbol(secondary_skill_bytes)
registersymbol(secondary_skill_base_ptr)
aobScanModule(hook,GameAssembly.dll,f3 0f 10 71 ? 48 8b 9d ? ? ? ? f3 0f 59 35 ? ? ? ? 48 85 db 0f 84 ? ? ? ? 48 8b 9b)

newmem:
secondary_skill_bytes:
  readMem(hook, 5)
  jmp returnhere

secondary_skill_base_ptr:
  dq 0

code:
  mov [secondary_skill_base_ptr], rcx
  jmp secondary_skill_bytes

hook:
secondary_skill_hook:
  jmp code
  returnhere:


[DISABLE]
secondary_skill_hook:
  readMem(secondary_skill_bytes, 5)

unregistersymbol(secondary_skill_hook)
unregistersymbol(secondary_skill_bytes)
unregistersymbol(secondary_skill_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+9EBBE5

GameAssembly.dll+9EBBB2: 48 89 5C 24 70           - mov [rsp+70],rbx
GameAssembly.dll+9EBBB7: 0F 29 74 24 50           - movaps [rsp+50],xmm6
GameAssembly.dll+9EBBBC: 0F 29 7C 24 40           - movaps [rsp+40],xmm7
GameAssembly.dll+9EBBC1: 48 8B 88 B8 00 00 00     - mov rcx,[rax+000000B8]
GameAssembly.dll+9EBBC8: 48 8B 81 50 03 00 00     - mov rax,[rcx+00000350]
GameAssembly.dll+9EBBCF: 48 85 C0                 - test rax,rax
GameAssembly.dll+9EBBD2: 0F 84 90 01 00 00        - je GameAssembly.dll+9EBD68
GameAssembly.dll+9EBBD8: 48 8B 48 18              - mov rcx,[rax+18]
GameAssembly.dll+9EBBDC: 48 85 C9                 - test rcx,rcx
GameAssembly.dll+9EBBDF: 0F 84 83 01 00 00        - je GameAssembly.dll+9EBD68
// ---------- INJECTING HERE ----------
GameAssembly.dll+9EBBE5: F3 0F 10 71 18           - movss xmm6,[rcx+18]
// ---------- DONE INJECTING  ----------
GameAssembly.dll+9EBBEA: 48 8B 9D C8 04 00 00     - mov rbx,[rbp+000004C8]
GameAssembly.dll+9EBBF1: F3 0F 59 35 63 F4 88 03  - mulss xmm6,[GameAssembly.dll+427B05C]
GameAssembly.dll+9EBBF9: 48 85 DB                 - test rbx,rbx
GameAssembly.dll+9EBBFC: 0F 84 66 01 00 00        - je GameAssembly.dll+9EBD68
GameAssembly.dll+9EBC02: 48 8B 9B F8 01 00 00     - mov rbx,[rbx+000001F8]
GameAssembly.dll+9EBC09: 48 85 DB                 - test rbx,rbx
GameAssembly.dll+9EBC0C: 0F 84 56 01 00 00        - je GameAssembly.dll+9EBD68
GameAssembly.dll+9EBC12: F3 0F 10 53 28           - movss xmm2,[rbx+28]
GameAssembly.dll+9EBC17: F3 0F 10 4B 2C           - movss xmm1,[rbx+2C]
GameAssembly.dll+9EBC1C: F3 0F 10 3D 44 F8 88 03  - movss xmm7,[GameAssembly.dll+427B468]
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8711</ID>
                  <Description>"Tool Repair"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>secondary_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>10</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8789</ID>
                  <Description>"Gun Cleaning"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>secondary_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>14</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8790</ID>
                  <Description>"Sharpening"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>secondary_skill_base_ptr</Address>
                  <Offsets>
                    <Offset>18</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>8627</ID>
          <Description>"Light"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>C08000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8512</ID>
              <Description>"Lantern"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.95 83861 S
  Date   : 2021-10-18
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(lamp_oil_hook)
label(lamp_oil_bytes)
label(lamp_oil_base_ptr)
label(lamp_oil_inf_toggle)
registersymbol(lamp_oil_hook)
registersymbol(lamp_oil_bytes)
registersymbol(lamp_oil_base_ptr)
registersymbol(lamp_oil_inf_toggle)

// class KeroseneLampItem
// RVA: 0x1216BE0 Offset: 0x12159E0 VA: 0x181216BE0
// private void ReduceFuel(float hoursBurned) { }
aobScanModule(hook,GameAssembly.dll,f3 0f 5c f0 0f 2f ce 77 ? f3 0f 10 43)

newmem:
lamp_oil_bytes:
  readMem(hook, 7)
  jmp returnhere

lamp_oil_base_ptr:
  dq 0

lamp_oil_inf_toggle:
  db 0

code:
  mov [lamp_oil_base_ptr], rbx

  cmp byte ptr [lamp_oil_inf_toggle], 0
  jz lamp_oil_bytes
  xorps xmm0, xmm0
  jmp lamp_oil_bytes

hook:
lamp_oil_hook:
  jmp code
  nop
  nop
  returnhere:



[DISABLE]
lamp_oil_hook:
  //db F3 0F 5C F0 F3 0F 11 73 64
  readMem(lamp_oil_bytes, 7)

unregistersymbol(lamp_oil_hook)
unregistersymbol(lamp_oil_bytes)
unregistersymbol(lamp_oil_base_ptr)
unregistersymbol(lamp_oil_inf_toggle)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+1216C7F

GameAssembly.dll+1216C4B: 48 8D 0D 0E 76 44 03  - lea rcx,[GameAssembly.dll+465E260]
GameAssembly.dll+1216C52: E8 F9 91 15 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+1216C57: C6 05 66 2C 63 03 01  - mov byte ptr [GameAssembly.dll+48498C4],01
GameAssembly.dll+1216C5E: 48 8B 0D FB 75 44 03  - mov rcx,[GameAssembly.dll+465E260]
GameAssembly.dll+1216C65: 83 B9 E0 00 00 00 00  - cmp dword ptr [rcx+000000E0],00
GameAssembly.dll+1216C6C: 75 05                 - jne GameAssembly.dll+1216C73
GameAssembly.dll+1216C6E: E8 0D 8E 0C FF        - call GameAssembly.il2cpp_field_static_set_value+42E0
GameAssembly.dll+1216C73: F3 0F 10 43 1C        - movss xmm0,[rbx+1C]
GameAssembly.dll+1216C78: 0F 57 C9              - xorps xmm1,xmm1
GameAssembly.dll+1216C7B: F3 0F 59 C7           - mulss xmm0,xmm7
// ---------- INJECTING HERE ----------
GameAssembly.dll+1216C7F: F3 0F 5C F0           - subss xmm6,xmm0
// ---------- DONE INJECTING  ----------
GameAssembly.dll+1216C83: 0F 2F CE              - comiss xmm1,xmm6
GameAssembly.dll+1216C86: 77 0F                 - ja GameAssembly.dll+1216C97
GameAssembly.dll+1216C88: F3 0F 10 43 18        - movss xmm0,[rbx+18]
GameAssembly.dll+1216C8D: 0F 2F F0              - comiss xmm6,xmm0
GameAssembly.dll+1216C90: 76 08                 - jna GameAssembly.dll+1216C9A
GameAssembly.dll+1216C92: 0F 28 F0              - movaps xmm6,xmm0
GameAssembly.dll+1216C95: EB 03                 - jmp GameAssembly.dll+1216C9A
GameAssembly.dll+1216C97: 0F 57 F6              - xorps xmm6,xmm6
GameAssembly.dll+1216C9A: F3 0F 11 73 60        - movss [rbx+60],xmm6
GameAssembly.dll+1216C9F: 0F 28 74 24 30        - movaps xmm6,[rsp+30]
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8636</ID>
                  <Description>"Infinite Lantern Oil"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
lamp_oil_inf_toggle:
  db 01

[DISABLE]
lamp_oil_inf_toggle:
  db 00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8647</ID>
                  <Description>"Max Lantern Oil"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>lamp_oil_base_ptr</Address>
                  <Offsets>
                    <Offset>18</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>9084</ID>
                  <Description>"Lantern Oil"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>lamp_oil_base_ptr</Address>
                  <Offsets>
                    <Offset>60</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8768</ID>
              <Description>"Flare"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-27
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(flare_burn_hook)
label(flare_burn_bytes)
label(flare_burn_base_ptr)
label(flare_burn_toggle)
label(flare_burn_value)
registersymbol(flare_burn_hook)
registersymbol(flare_burn_bytes)
registersymbol(flare_burn_base_ptr)
registersymbol(flare_burn_toggle)
registersymbol(flare_burn_value)
aobScanModule(hook,GameAssembly.dll,f3 0f 58 b3 ? ? ? ? f3 0f 11 b3 ? ? ? ? 48 85 ff)

newmem:
flare_burn_bytes:
  //xor edx,edx
  //mov rcx,rdi
  readMem(hook, 8)
  jmp returnhere

flare_burn_base_ptr:
  dq 0

flare_burn_toggle:
  db 0

flare_burn_value:
  dd 0

code:
  mov [flare_burn_base_ptr], rbx

  cmp byte ptr [flare_burn_toggle], 0
  jz flare_burn_bytes
  mov ecx, [flare_burn_value]
  mov [rbx+A4], ecx
  jmp flare_burn_bytes

hook:
flare_burn_hook:
  jmp code
  nop
  nop
  nop
  returnhere:



[DISABLE]
flare_burn_hook:
  readMem(flare_burn_bytes, 8)

unregistersymbol(flare_burn_hook)
unregistersymbol(flare_burn_bytes)
unregistersymbol(flare_burn_base_ptr)
unregistersymbol(flare_burn_toggle)
unregistersymbol(flare_burn_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+7AD687

GameAssembly.dll+7AD64A: 0F 84 28 01 00 00        - je GameAssembly.dll+7AD778
GameAssembly.dll+7AD650: 48 8B 87 88 00 00 00     - mov rax,[rdi+00000088]
GameAssembly.dll+7AD657: 48 85 C0                 - test rax,rax
GameAssembly.dll+7AD65A: 0F 84 18 01 00 00        - je GameAssembly.dll+7AD778
GameAssembly.dll+7AD660: F3 0F 10 88 A0 02 00 00  - movss xmm1,[rax+000002A0]
GameAssembly.dll+7AD668: F3 0F 59 88 80 00 00 00  - mulss xmm1,[rax+00000080]
GameAssembly.dll+7AD670: 48 8B BB 00 01 00 00     - mov rdi,[rbx+00000100]
GameAssembly.dll+7AD677: F3 0F 10 35 31 E5 AC 03  - movss xmm6,[GameAssembly.dll+427BBB0]
GameAssembly.dll+7AD67F: F3 0F 5E F1              - divss xmm6,xmm1
GameAssembly.dll+7AD683: F3 0F 59 F0              - mulss xmm6,xmm0
// ---------- INJECTING HERE ----------
GameAssembly.dll+7AD687: F3 0F 58 B3 A4 00 00 00  - addss xmm6,[rbx+000000A4]
// ---------- DONE INJECTING  ----------
GameAssembly.dll+7AD68F: F3 0F 11 B3 A4 00 00 00  - movss [rbx+000000A4],xmm6
GameAssembly.dll+7AD697: 48 85 FF                 - test rdi,rdi
GameAssembly.dll+7AD69A: 0F 84 D8 00 00 00        - je GameAssembly.dll+7AD778
GameAssembly.dll+7AD6A0: 48 8B 87 18 03 00 00     - mov rax,[rdi+00000318]
GameAssembly.dll+7AD6A7: 48 85 C0                 - test rax,rax
GameAssembly.dll+7AD6AA: 0F 84 C8 00 00 00        - je GameAssembly.dll+7AD778
GameAssembly.dll+7AD6B0: 44 0F 29 4C 24 20        - movaps [rsp+20],xmm9
GameAssembly.dll+7AD6B6: 33 D2                    - xor edx,edx
GameAssembly.dll+7AD6B8: F3 44 0F 10 48 48        - movss xmm9,[rax+48]
GameAssembly.dll+7AD6BE: 48 8B CB                 - mov rcx,rbx
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8772</ID>
                  <Description>"Infinite Flare Burn Time"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
flare_burn_toggle:
  db 01

[DISABLE]
flare_burn_toggle:
  db 00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8773</ID>
                  <Description>"Flare Burn Time"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>flare_burn_base_ptr</Address>
                  <Offsets>
                    <Offset>a4</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8777</ID>
              <Description>"Torch"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-27
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(torch_burn_hook)
label(torch_burn_bytes)
label(torch_burn_base_ptr)
label(torch_burn_toggle)
label(torch_burn_value)
registersymbol(torch_burn_hook)
registersymbol(torch_burn_bytes)
registersymbol(torch_burn_base_ptr)
registersymbol(torch_burn_toggle)
registersymbol(torch_burn_value)
aobScanModule(hook,GameAssembly.dll,f3 0f 58 93 ? ? ? ? f3 0f 11 93 ? ? ? ? e8)

newmem:
torch_burn_bytes:
  readMem(hook, 8)
  jmp returnhere

torch_burn_base_ptr:
  dq 0

torch_burn_toggle:
  db 0

torch_burn_value:
  dd 0

code:
  mov [torch_burn_base_ptr], rbx

  cmp byte ptr [torch_burn_toggle], 0
  jz torch_burn_bytes
  mov dword ptr [rbx+BC], 0
  jmp torch_burn_bytes

hook:
torch_burn_hook:
  jmp code
  nop
  nop
  nop
  returnhere:



[DISABLE]
torch_burn_hook:
  readMem(torch_burn_bytes, 8)

unregistersymbol(torch_burn_hook)
unregistersymbol(torch_burn_bytes)
unregistersymbol(torch_burn_base_ptr)
unregistersymbol(torch_burn_toggle)
unregistersymbol(torch_burn_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+7E9952

GameAssembly.dll+7E991D: 48 8B 87 88 00 00 00     - mov rax,[rdi+00000088]
GameAssembly.dll+7E9924: 48 85 C0                 - test rax,rax
GameAssembly.dll+7E9927: 0F 84 60 02 00 00        - je GameAssembly.dll+7E9B8D
GameAssembly.dll+7E992D: F3 0F 10 88 A0 02 00 00  - movss xmm1,[rax+000002A0]
GameAssembly.dll+7E9935: 33 D2                    - xor edx,edx
GameAssembly.dll+7E9937: F3 0F 59 88 80 00 00 00  - mulss xmm1,[rax+00000080]
GameAssembly.dll+7E993F: 48 8B CB                 - mov rcx,rbx
GameAssembly.dll+7E9942: F3 0F 10 15 66 22 A9 03  - movss xmm2,[GameAssembly.dll+427BBB0]
GameAssembly.dll+7E994A: F3 0F 5E D1              - divss xmm2,xmm1
GameAssembly.dll+7E994E: F3 0F 59 D0              - mulss xmm2,xmm0
// ---------- INJECTING HERE ----------
GameAssembly.dll+7E9952: F3 0F 58 93 BC 00 00 00  - addss xmm2,[rbx+000000BC]
// ---------- DONE INJECTING  ----------
GameAssembly.dll+7E995A: F3 0F 11 93 BC 00 00 00  - movss [rbx+000000BC],xmm2
GameAssembly.dll+7E9962: E8 09 3F 00 00           - call GameAssembly.dll+7ED870
GameAssembly.dll+7E9967: 48 8B F8                 - mov rdi,rax
GameAssembly.dll+7E996A: 48 85 C0                 - test rax,rax
GameAssembly.dll+7E996D: 0F 84 1A 02 00 00        - je GameAssembly.dll+7E9B8D
GameAssembly.dll+7E9973: 48 8B 88 18 03 00 00     - mov rcx,[rax+00000318]
GameAssembly.dll+7E997A: 48 85 C9                 - test rcx,rcx
GameAssembly.dll+7E997D: 0F 84 0A 02 00 00        - je GameAssembly.dll+7E9B8D
GameAssembly.dll+7E9983: F3 0F 10 B3 BC 00 00 00  - movss xmm6,[rbx+000000BC]
GameAssembly.dll+7E998B: 33 D2                    - xor edx,edx
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8778</ID>
                  <Description>"Infinite Torch Burn Time"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
torch_burn_toggle:
  db 01

[DISABLE]
torch_burn_toggle:
  db 00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8779</ID>
                  <Description>"Torch Burn Time"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>torch_burn_base_ptr</Address>
                  <Offsets>
                    <Offset>bC</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>8769</ID>
          <Description>"Navigation"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>C08000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8850</ID>
              <Description>"Map"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-10-30
  Author : sub1to

  https://github.com/Perfare/Il2CppDumper

  // Namespace:
  [FlagsAttribute] // RVA: 0x12A50 Offset: 0x11E50 VA: 0x7FFB0B9E2A50
  private enum Panel_Map.ResetOpts // TypeDefIndex: 8834
  {
	  // Fields
	  public int value__; // 0x0
	  public const Panel_Map.ResetOpts None = 0;
	  public const Panel_Map.ResetOpts Zoomed = 1;
	  public const Panel_Map.ResetOpts CenterOnPlayer = 2;
	  public const Panel_Map.ResetOpts ShowPlayer = 4;

  public enum SurveyType // TypeDefIndex: 8825
  {
	  // Fields
	  public int value__; // 0x0
	  public const SurveyType Charcoal = 0;
	  public const SurveyType RockCache = 1;
	  public const SurveyType SprayPaint = 2;


  survey range per SurveyType:
  0:     rcx+F0
  1:     rcx+F4
  2:     rcx+F8
}

[ENABLE]
alloc(newmem,$400,GameAssembly.dll)
label(returnhere)
label(code)
label(code_survey)
label(code_resetopt)
label(rlock)
label(panel_map_reset_to_normal_hook)
label(panel_map_reset_to_normal_bytes)
label(panel_map_base_ptr)
label(panel_map_auto_survey_toggle)
label(panel_map_auto_survey_range)
label(panel_map_show_player_toggle)
registersymbol(panel_map_reset_to_normal_hook)
registersymbol(panel_map_reset_to_normal_bytes)
registersymbol(panel_map_base_ptr)
registersymbol(panel_map_auto_survey_toggle)
registersymbol(panel_map_auto_survey_range)
registersymbol(panel_map_show_player_toggle)

//  RVA: 0x109E300 Offset: 0x109D300 VA: 0x7FFB0CA6E300
//	private void ResetToNormal(Panel_Map.ResetOpts opts) { }
aobScanModule(hook,GameAssembly.dll,40 55 53 41 57 48 8b ec 48 81 ec ? ? ? ? 80 3d ? ? ? ? ? 44 8b fa)

//	RVA: 0x108D420 Offset: 0x108C420 VA: 0x7FFB0CA5D420
//	public void DoDetailSurvey(SurveyType surveyType = 0) { }
aobScanModule(panel_map_do_detail_survey,GameAssembly.dll,48 89 5c 24 ? 57 48 83 ec ? 0f 29 74 24 ? 48 8b d9 f3 0f 10 b1)

newmem:
panel_map_reset_to_normal_bytes:
  //mov rax,rsp
  //push rbp
  //push rdi
  readMem(hook, 5)
  jmp returnhere

panel_map_base_ptr:
  dq 0

panel_map_auto_survey_toggle:
  db 0

panel_map_auto_survey_range:
  dd (float)9999

panel_map_show_player_toggle:
  db 0

rlock:
  db 0

code:
  mov [panel_map_base_ptr], rcx

code_survey:
  cmp byte ptr [panel_map_auto_survey_toggle], 0
  jz code_resetopt

  //recursion lock
  cmp byte ptr [rlock], 0
  jnz code_resetopt
  mov byte ptr [rlock], 1

  //save rcx, rdx and [rcx+F0]
  lea rsp, [rsp-48]
  mov [rsp+30], rcx
  mov [rsp+28], rdx
  mov edx, [rcx+F0]
  mov [rsp+38], edx

  //survey the map
  mov edx, [panel_map_auto_survey_range]
  mov dword ptr [rcx+F0], edx
  xor rdx, rdx
  xor r8, r8
  call panel_map_do_detail_survey

  //restore rcx, rdx and [rcx+F0]
  mov rcx, [rsp+30]
  mov edx, [rsp+38]
  mov [rcx+F0], edx
  mov rdx, [rsp+28]
  lea rsp, [rsp+48]

  //unlock
  mov byte ptr [rlock], 0

code_resetopt:
  cmp byte ptr [panel_map_show_player_toggle], 0
  jz panel_map_reset_to_normal_bytes
  or edx, 6

  jmp panel_map_reset_to_normal_bytes

hook:
panel_map_reset_to_normal_hook:
  jmp code
  returnhere:



[DISABLE]
panel_map_reset_to_normal_hook:
  //db 48 8B C4 55 57
  readMem(panel_map_reset_to_normal_bytes, 5)

unregistersymbol(panel_map_reset_to_normal_hook)
unregistersymbol(panel_map_reset_to_normal_bytes)
unregistersymbol(panel_map_base_ptr)
unregistersymbol(panel_map_auto_survey_toggle)
unregistersymbol(panel_map_auto_survey_range)
unregistersymbol(panel_map_show_player_toggle)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+109E300

"GameAssembly.dll"+109E2EE: CC                       -  int 3
"GameAssembly.dll"+109E2EF: E8 0C C1 02 FF           -  call GameAssembly.dll+CA400
"GameAssembly.dll"+109E2F4: CC                       -  int 3
"GameAssembly.dll"+109E2F5: E8 06 C1 02 FF           -  call GameAssembly.dll+CA400
"GameAssembly.dll"+109E2FA: CC                       -  int 3
"GameAssembly.dll"+109E2FB: CC                       -  int 3
"GameAssembly.dll"+109E2FC: CC                       -  int 3
"GameAssembly.dll"+109E2FD: CC                       -  int 3
"GameAssembly.dll"+109E2FE: CC                       -  int 3
"GameAssembly.dll"+109E2FF: CC                       -  int 3
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+109E300: 48 8B C4                 -  mov rax,rsp
"GameAssembly.dll"+109E303: 55                       -  push rbp
"GameAssembly.dll"+109E304: 57                       -  push rdi
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+109E305: 41 54                    -  push r12
"GameAssembly.dll"+109E307: 41 56                    -  push r14
"GameAssembly.dll"+109E309: 41 57                    -  push r15
"GameAssembly.dll"+109E30B: 48 8D 68 A1              -  lea rbp,[rax-5F]
"GameAssembly.dll"+109E30F: 48 81 EC A0 00 00 00     -  sub rsp,000000A0
"GameAssembly.dll"+109E316: 48 C7 45 C7 FE FF FF FF  -  mov qword ptr [rbp-39],FFFFFFFE
"GameAssembly.dll"+109E31E: 48 89 58 10              -  mov [rax+10],rbx
"GameAssembly.dll"+109E322: 48 89 70 18              -  mov [rax+18],rsi
"GameAssembly.dll"+109E326: 0F 29 70 C8              -  movaps [rax-38],xmm6
"GameAssembly.dll"+109E32A: 0F 29 78 B8              -  movaps [rax-48],xmm7
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8852</ID>
                  <Description>"Auto Survey (when map is opened)"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
panel_map_auto_survey_toggle:
  db 01

[DISABLE]
panel_map_auto_survey_toggle:
  db 00
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8859</ID>
                      <Description>"Range"</Description>
                      <Color>800080</Color>
                      <VariableType>Float</VariableType>
                      <Address>panel_map_auto_survey_range</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8853</ID>
                  <Description>"Show Player Arrow"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
panel_map_show_player_toggle:
  db 01

[DISABLE]
panel_map_show_player_toggle:
  db 00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8854</ID>
                  <Description>"Base"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>FF8080</Color>
                  <VariableType>8 Bytes</VariableType>
                  <Address>panel_map_base_ptr</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>8857</ID>
                  <Description>"Charcoal Survey Range"</Description>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>panel_map_base_ptr</Address>
                  <Offsets>
                    <Offset>F0</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8855</ID>
                  <Description>"Rock Cache Survey Range"</Description>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>panel_map_base_ptr</Address>
                  <Offsets>
                    <Offset>F4</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8856</ID>
                  <Description>"Spray Paint Survey Range"</Description>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>panel_map_base_ptr</Address>
                  <Offsets>
                    <Offset>F8</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>9081</ID>
                  <Description>"Polaroid Survey Range"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>panel_map_base_ptr</Address>
                  <Offsets>
                    <Offset>FC</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8872</ID>
              <Description>"Ice Never Cracks"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-27
  Author : sub1to
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(fall_in_water_hook)
label(fall_in_water_bytes)
registersymbol(fall_in_water_hook)
registersymbol(fall_in_water_bytes)

//  class: IceCrackingTrigger
//  RVA: 0x10F6580 Offset: 0x10F5580 VA: 0x7FFB0CAC6580
//  public void FallInWater() { }
aobScanModule(hook,GameAssembly.dll,40 53 48 83 ec ? 80 3d ? ? ? ? ? 48 8b d9 75 ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? c6 05 ? ? ? ? ? 48 8b 05 ? ? ? ? 48 8b 88)

newmem:
fall_in_water_bytes:
  readMem(hook, 6)
  jmp returnhere

code:
  xor rax, rax
  ret

hook:
fall_in_water_hook:
  jmp code
  returnhere:



[DISABLE]
fall_in_water_hook:
  readMem(fall_in_water_bytes, 6)

unregistersymbol(fall_in_water_hook)
unregistersymbol(fall_in_water_bytes)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+DD2860

GameAssembly.dll+DD284D: 33 D2                 - xor edx,edx
GameAssembly.dll+DD284F: E8 8C 71 53 FF        - call GameAssembly.DllCanUnloadNow+8A0
GameAssembly.dll+DD2854: CC                    - int 3
GameAssembly.dll+DD2855: E8 E6 64 51 FF        - call GameAssembly.il2cpp_value_box+60
GameAssembly.dll+DD285A: CC                    - int 3
GameAssembly.dll+DD285B: CC                    - int 3
GameAssembly.dll+DD285C: CC                    - int 3
GameAssembly.dll+DD285D: CC                    - int 3
GameAssembly.dll+DD285E: CC                    - int 3
GameAssembly.dll+DD285F: CC                    - int 3
// ---------- INJECTING HERE ----------
GameAssembly.dll+DD2860: 40 53                 - push rbx
// ---------- DONE INJECTING  ----------
GameAssembly.dll+DD2862: 48 83 EC 70           - sub rsp,70
GameAssembly.dll+DD2866: 80 3D 41 46 A7 03 00  - cmp byte ptr [GameAssembly.dll+4846EAE],00
GameAssembly.dll+DD286D: 48 8B D9              - mov rbx,rcx
GameAssembly.dll+DD2870: 75 5B                 - jne GameAssembly.dll+DD28CD
GameAssembly.dll+DD2872: 48 8D 0D 9F E3 84 03  - lea rcx,[GameAssembly.dll+4620C18]
GameAssembly.dll+DD2879: E8 D2 D5 59 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+DD287E: 48 8D 0D FB 52 88 03  - lea rcx,[GameAssembly.dll+4657B80]
GameAssembly.dll+DD2885: E8 C6 D5 59 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+DD288A: 48 8D 0D CF 57 88 03  - lea rcx,[GameAssembly.dll+4658060]
GameAssembly.dll+DD2891: E8 BA D5 59 FF        - call GameAssembly.dll+36FE50
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>9109</ID>
              <Description>"No Fall Damage"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.23 120705 S
  Date   : 2023-09-27
  Author : sub1to

  class FallDamage
}

[ENABLE]
alloc(newmem,$100,GameAssembly.dll)
label(returnhere)
label(code)
label(fall_damage_hook)
label(fall_damage_bytes)
label(fall_damage_base_ptr)
registersymbol(fall_damage_hook)
registersymbol(fall_damage_bytes)
registersymbol(fall_damage_base_ptr)

//FallDamage::ApplyFallDamage
aobscanmodule(hook,GameAssembly.dll,40 53 48 81 ec ? ? ? ? 80 3d ? ? ? ? ? 48 8b d9 44 0f 29 84 24)

newmem:
fall_damage_bytes:
  readMem(hook, 9)
  jmp returnhere

fall_damage_base_ptr:
  dq 0

code:
  xor rax, rax
  ret

hook:
fall_damage_hook:
  jmp code
  returnhere:

[DISABLE]
fall_damage_hook:
  readMem(fall_damage_bytes, 9)

unregistersymbol(fall_damage_hook)
unregistersymbol(fall_damage_bytes)
unregistersymbol(fall_damage_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+7E38B0

GameAssembly.dll+7E389A: F0 48 0F B1 0A              - lock cmpxchg [rdx],rcx
GameAssembly.dll+7E389F: 75 EF                       - jne GameAssembly.dll+7E3890
GameAssembly.dll+7E38A1: 48 83 C4 28                 - add rsp,28
GameAssembly.dll+7E38A5: C3                          - ret
GameAssembly.dll+7E38A6: E8 C5 B6 AE FF              - call GameAssembly.il2cpp_value_box+50
GameAssembly.dll+7E38AB: CC                          - int 3
GameAssembly.dll+7E38AC: CC                          - int 3
GameAssembly.dll+7E38AD: CC                          - int 3
GameAssembly.dll+7E38AE: CC                          - int 3
GameAssembly.dll+7E38AF: CC                          - int 3
// ---------- INJECTING HERE ----------
GameAssembly.dll+7E38B0: 40 53                       - push rbx
// ---------- DONE INJECTING  ----------
GameAssembly.dll+7E38B2: 48 81 EC C0 00 00 00        - sub rsp,000000C0
GameAssembly.dll+7E38B9: 80 3D 1B 0B B2 03 00        - cmp byte ptr [GameAssembly.dll+43043DB],00
GameAssembly.dll+7E38C0: 48 8B D9                    - mov rbx,rcx
GameAssembly.dll+7E38C3: 44 0F 29 84 24 80 00 00 00  - movaps [rsp+00000080],xmm8
GameAssembly.dll+7E38CC: 44 0F 28 C2                 - movaps xmm8,xmm2
GameAssembly.dll+7E38D0: 44 0F 29 54 24 60           - movaps [rsp+60],xmm10
GameAssembly.dll+7E38D6: 44 0F 28 D1                 - movaps xmm10,xmm1
GameAssembly.dll+7E38DA: 75 67                       - jne GameAssembly.dll+7E3943
GameAssembly.dll+7E38DC: 48 8D 0D DD B5 95 03        - lea rcx,[GameAssembly.dll+413EEC0]
GameAssembly.dll+7E38E3: E8 A8 27 B7 FF              - call GameAssembly.dll+356090
}
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>8831</ID>
          <Description>"Guns"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>C08000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8594</ID>
              <Description>"Infinite Ammo"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-28
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(reload_dec_hook)
label(reload_dec_bytes)
registersymbol(reload_dec_hook)
registersymbol(reload_dec_bytes)
label(reload_batch_hook)
label(reload_batch_bytes)
registersymbol(reload_batch_hook)
registersymbol(reload_batch_bytes)
label(reload_arrow_hook)
label(reload_arrow_bytes)
registersymbol(reload_arrow_hook)
registersymbol(reload_arrow_bytes)
aobscanmodule(hook1,GameAssembly.dll,ff 48 ? f3 0f 10 87)
aobscanmodule(hook2,GameAssembly.dll,29 79 ? 45 85 e4)
aobscanmodule(hook3,GameAssembly.dll,ff 48 ? 49 8b 4e)



newmem:
reload_dec_bytes:
  readMem(hook1, 3)

reload_batch_bytes:
  readMem(hook2, 3)

reload_arrow_bytes:
  readMem(hook3, 3)


hook1:
reload_dec_hook:
  nop
  nop
  nop

hook2:
reload_batch_hook:
  nop
  nop
  nop

hook3:
reload_arrow_hook:
  nop
  nop
  nop


[DISABLE]
reload_dec_hook:
  //db FF 48 18
  readMem(reload_dec_bytes, 3)

reload_batch_hook:
  //db 29 71 18
  readMem(reload_batch_bytes, 3)

reload_arrow_hook:
  //db FF 48 18
  readMem(reload_arrow_bytes, 3)

unregistersymbol(reload_dec_hook)
unregistersymbol(reload_dec_bytes)
unregistersymbol(reload_batch_hook)
unregistersymbol(reload_batch_bytes)
unregistersymbol(reload_arrow_hook)
unregistersymbol(reload_arrow_bytes)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+CF027D

GameAssembly.dll+CF024E: E8 FD FB 67 FF           - call GameAssembly.dll+36FE50
GameAssembly.dll+CF0253: C6 05 93 CB B6 03 01     - mov byte ptr [GameAssembly.dll+485CDED],01
GameAssembly.dll+CF025A: 48 8B 05 A7 AF 93 03     - mov rax,[GameAssembly.dll+462B208]
GameAssembly.dll+CF0261: 48 8B 88 B8 00 00 00     - mov rcx,[rax+000000B8]
GameAssembly.dll+CF0268: 48 8B 01                 - mov rax,[rcx]
GameAssembly.dll+CF026B: 48 39 47 10              - cmp [rdi+10],rax
GameAssembly.dll+CF026F: 74 50                    - je GameAssembly.dll+CF02C1
GameAssembly.dll+CF0271: 48 8B 87 18 02 00 00     - mov rax,[rdi+00000218]
GameAssembly.dll+CF0278: 48 85 C0                 - test rax,rax
GameAssembly.dll+CF027B: 74 48                    - je GameAssembly.dll+CF02C5
// ---------- INJECTING HERE ----------
GameAssembly.dll+CF027D: FF 48 18                 - dec [rax+18]
// ---------- DONE INJECTING  ----------
GameAssembly.dll+CF0280: F3 0F 10 87 10 03 00 00  - movss xmm0,[rdi+00000310]
GameAssembly.dll+CF0288: 48 8B 87 18 03 00 00     - mov rax,[rdi+00000318]
GameAssembly.dll+CF028F: 48 85 C0                 - test rax,rax
GameAssembly.dll+CF0292: 74 31                    - je GameAssembly.dll+CF02C5
GameAssembly.dll+CF0294: F3 0F 59 C6              - mulss xmm0,xmm6
GameAssembly.dll+CF0298: F3 0F 5E 40 48           - divss xmm0,[rax+48]
GameAssembly.dll+CF029D: E8 FE 62 80 FF           - call GameAssembly.dll+4F65A0
GameAssembly.dll+CF02A2: 4C 8D 9C 24 90 00 00 00  - lea r11,[rsp+00000090]
GameAssembly.dll+CF02AA: 49 8B 5B 18              - mov rbx,[r11+18]
GameAssembly.dll+CF02AE: 49 8B 73 20              - mov rsi,[r11+20]
}

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+CEFCBF

GameAssembly.dll+CEFC9F: 49 8B CE                 - mov rcx,r14
GameAssembly.dll+CEFCA2: E8 99 42 31 FF           - call GameAssembly.il2cpp_object_get_class+440
GameAssembly.dll+CEFCA7: FF C3                    - inc ebx
GameAssembly.dll+CEFCA9: EB E6                    - jmp GameAssembly.dll+CEFC91
GameAssembly.dll+CEFCAB: 44 2B E7                 - sub r12d,edi
GameAssembly.dll+CEFCAE: 48 85 F6                 - test rsi,rsi
GameAssembly.dll+CEFCB1: 74 71                    - je GameAssembly.dll+CEFD24
GameAssembly.dll+CEFCB3: 48 8B 8E 18 02 00 00     - mov rcx,[rsi+00000218]
GameAssembly.dll+CEFCBA: 48 85 C9                 - test rcx,rcx
GameAssembly.dll+CEFCBD: 74 60                    - je GameAssembly.dll+CEFD1F
// ---------- INJECTING HERE ----------
GameAssembly.dll+CEFCBF: 29 79 18                 - sub [rcx+18],edi
// ---------- DONE INJECTING  ----------
GameAssembly.dll+CEFCC2: 45 85 E4                 - test r12d,r12d
GameAssembly.dll+CEFCC5: 0F 85 59 FF FF FF        - jne GameAssembly.dll+CEFC24
GameAssembly.dll+CEFCCB: EB 11                    - jmp GameAssembly.dll+CEFCDE
GameAssembly.dll+CEFCCD: EB 0F                    - jmp GameAssembly.dll+CEFCDE
GameAssembly.dll+CEFCCF: 48 8B 4C 24 68           - mov rcx,[rsp+68]
GameAssembly.dll+CEFCD4: 48 85 C9                 - test rcx,rcx
GameAssembly.dll+CEFCD7: 75 60                    - jne GameAssembly.dll+CEFD39
GameAssembly.dll+CEFCD9: 4C 8B 74 24 20           - mov r14,[rsp+20]
GameAssembly.dll+CEFCDE: 49 8B C6                 - mov rax,r14
GameAssembly.dll+CEFCE1: 4C 8D 9C 24 E0 00 00 00  - lea r11,[rsp+000000E0]
}


{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+78810B

GameAssembly.dll+7880DA: E8 D1 76 03 00           - call GameAssembly.dll+7BF7B0
GameAssembly.dll+7880DF: 41 83 7E 70 05           - cmp dword ptr [r14+70],05
GameAssembly.dll+7880E4: 74 08                    - je GameAssembly.dll+7880EE
GameAssembly.dll+7880E6: 41 C7 46 70 05 00 00 00  - mov [r14+70],00000005
GameAssembly.dll+7880EE: 49 8B 46 60              - mov rax,[r14+60]
GameAssembly.dll+7880F2: 48 85 C0                 - test rax,rax
GameAssembly.dll+7880F5: 0F 84 D6 01 00 00        - je GameAssembly.dll+7882D1
GameAssembly.dll+7880FB: 48 8B 80 18 02 00 00     - mov rax,[rax+00000218]
GameAssembly.dll+788102: 48 85 C0                 - test rax,rax
GameAssembly.dll+788105: 0F 84 C6 01 00 00        - je GameAssembly.dll+7882D1
// ---------- INJECTING HERE ----------
GameAssembly.dll+78810B: FF 48 18                 - dec [rax+18]
// ---------- DONE INJECTING  ----------
GameAssembly.dll+78810E: 49 8B 4E 60              - mov rcx,[r14+60]
GameAssembly.dll+788112: 48 85 C9                 - test rcx,rcx
GameAssembly.dll+788115: 0F 84 B6 01 00 00        - je GameAssembly.dll+7882D1
GameAssembly.dll+78811B: 48 8B 81 18 02 00 00     - mov rax,[rcx+00000218]
GameAssembly.dll+788122: 48 85 C0                 - test rax,rax
GameAssembly.dll+788125: 0F 84 A6 01 00 00        - je GameAssembly.dll+7882D1
GameAssembly.dll+78812B: 83 78 18 00              - cmp dword ptr [rax+18],00
GameAssembly.dll+78812F: 74 5F                    - je GameAssembly.dll+788190
GameAssembly.dll+788131: 33 D2                    - xor edx,edx
GameAssembly.dll+788133: E8 B8 EB 10 00           - call GameAssembly.dll+896CF0
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>8834</ID>
              <Description>"Aim Fatigue (Rifle)"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-28
  Author : sub1to
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(aim_fatigue_hook)
label(aim_fatigue_bytes)
label(aim_fatigue_base_ptr)
label(aim_fatigue_toggle)
registersymbol(aim_fatigue_hook)
registersymbol(aim_fatigue_bytes)
registersymbol(aim_fatigue_base_ptr)
registersymbol(aim_fatigue_toggle)
aobScanModule(hook,GameAssembly.dll,f3 44 0f 58 c2 44 0f 2f 83)

newmem:
aim_fatigue_bytes:
  //addss xmm7,xmm9
  readMem(hook, 5)
  jmp returnhere

aim_fatigue_base_ptr:
  dq 0

aim_fatigue_toggle:
  db 0

code:
  mov [aim_fatigue_base_ptr], rbx

  cmp byte ptr [aim_fatigue_toggle], 0
  jz aim_fatigue_bytes
  xorps xmm8, xmm8
  movd [rbx+f8], xmm8
  jmp returnhere

hook:
aim_fatigue_hook:
  jmp code
  returnhere:



[DISABLE]
aim_fatigue_hook:
  //F3 41 0F 58 F9
  readMem(aim_fatigue_bytes, 5)

unregistersymbol(aim_fatigue_hook)
unregistersymbol(aim_fatigue_bytes)
unregistersymbol(aim_fatigue_base_ptr)
unregistersymbol(aim_fatigue_toggle)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+7D1EA7

GameAssembly.dll+7D1E7A: F3 44 0F 10 83 CC 00 00 00  - movss xmm8,[rbx+000000CC]
GameAssembly.dll+7D1E83: F3 44 0F 10 0D DC 95 AA 03  - movss xmm9,[GameAssembly.dll+427B468]
GameAssembly.dll+7D1E8C: 77 0C                       - ja GameAssembly.dll+7D1E9A
GameAssembly.dll+7D1E8E: 41 0F 2F C1                 - comiss xmm0,xmm9
GameAssembly.dll+7D1E92: 76 09                       - jna GameAssembly.dll+7D1E9D
GameAssembly.dll+7D1E94: 41 0F 28 C1                 - movaps xmm0,xmm9
GameAssembly.dll+7D1E98: EB 03                       - jmp GameAssembly.dll+7D1E9D
GameAssembly.dll+7D1E9A: 0F 57 C0                    - xorps xmm0,xmm0
GameAssembly.dll+7D1E9D: F3 44 0F 5C C2              - subss xmm8,xmm2
GameAssembly.dll+7D1EA2: F3 44 0F 59 C0              - mulss xmm8,xmm0
// ---------- INJECTING HERE ----------
GameAssembly.dll+7D1EA7: F3 44 0F 58 C2              - addss xmm8,xmm2
// ---------- DONE INJECTING  ----------
GameAssembly.dll+7D1EAC: 44 0F 2F 83 F8 00 00 00     - comiss xmm8,[rbx+000000F8]
GameAssembly.dll+7D1EB4: 76 09                       - jna GameAssembly.dll+7D1EBF
GameAssembly.dll+7D1EB6: F3 44 0F 11 83 F8 00 00 00  - movss [rbx+000000F8],xmm8
GameAssembly.dll+7D1EBF: F3 0F 10 BB F8 00 00 00     - movss xmm7,[rbx+000000F8]
GameAssembly.dll+7D1EC7: 33 C9                       - xor ecx,ecx
GameAssembly.dll+7D1EC9: E8 42 D4 EB 02              - call GameAssembly.dll+368F310
GameAssembly.dll+7D1ECE: 33 D2                       - xor edx,edx
GameAssembly.dll+7D1ED0: 48 8B CB                    - mov rcx,rbx
GameAssembly.dll+7D1ED3: 0F 28 F0                    - movaps xmm6,xmm0
GameAssembly.dll+7D1ED6: E8 65 F9 FF FF              - call GameAssembly.dll+7D1840
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8835</ID>
                  <Description>"No Aim Fatigue"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
aim_fatigue_toggle:
  db 01

[DISABLE]
aim_fatigue_toggle:
  db 00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8836</ID>
                  <Description>"Aim Fatigue"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>aim_fatigue_base_ptr</Address>
                  <Offsets>
                    <Offset>F8</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8992</ID>
              <Description>"Aim Fatigue (Bow)"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-28
  Author : sub1to
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(aim_fatigue_bow_hook)
label(aim_fatigue_bow_bytes)
label(aim_fatigue_bow_base_ptr)
label(aim_fatigue_bow_toggle)
registersymbol(aim_fatigue_bow_hook)
registersymbol(aim_fatigue_bow_bytes)
registersymbol(aim_fatigue_bow_base_ptr)
registersymbol(aim_fatigue_bow_toggle)

//BowItem::
aobScanModule(hook,GameAssembly.dll,f3 44 0f 58 c2 44 0f 2f 43)

newmem:
aim_fatigue_bow_bytes:
  //addss xmm7,xmm9
  readMem(hook, 5)
  jmp returnhere

aim_fatigue_bow_base_ptr:
  dq 0

aim_fatigue_bow_toggle:
  db 0

code:
  mov [aim_fatigue_bow_base_ptr], rbx

  cmp byte ptr [aim_fatigue_bow_toggle], 0
  jz aim_fatigue_bow_bytes
  xorps xmm8, xmm8
  movd [rbx+78], xmm8
  jmp returnhere

hook:
aim_fatigue_bow_hook:
  jmp code
  returnhere:



[DISABLE]
aim_fatigue_bow_hook:
  //F3 41 0F 58 F9
  readMem(aim_fatigue_bow_bytes, 5)

unregistersymbol(aim_fatigue_bow_hook)
unregistersymbol(aim_fatigue_bow_bytes)
unregistersymbol(aim_fatigue_bow_base_ptr)
unregistersymbol(aim_fatigue_bow_toggle)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+7878D9

GameAssembly.dll+7878AF: F3 44 0F 10 43 44           - movss xmm8,[rbx+44]
GameAssembly.dll+7878B5: F3 44 0F 10 0D AA 3B AF 03  - movss xmm9,[GameAssembly.dll+427B468]
GameAssembly.dll+7878BE: 77 0C                       - ja GameAssembly.dll+7878CC
GameAssembly.dll+7878C0: 41 0F 2F C1                 - comiss xmm0,xmm9
GameAssembly.dll+7878C4: 76 09                       - jna GameAssembly.dll+7878CF
GameAssembly.dll+7878C6: 41 0F 28 C1                 - movaps xmm0,xmm9
GameAssembly.dll+7878CA: EB 03                       - jmp GameAssembly.dll+7878CF
GameAssembly.dll+7878CC: 0F 57 C0                    - xorps xmm0,xmm0
GameAssembly.dll+7878CF: F3 44 0F 5C C2              - subss xmm8,xmm2
GameAssembly.dll+7878D4: F3 44 0F 59 C0              - mulss xmm8,xmm0
// ---------- INJECTING HERE ----------
GameAssembly.dll+7878D9: F3 44 0F 58 C2              - addss xmm8,xmm2
// ---------- DONE INJECTING  ----------
GameAssembly.dll+7878DE: 44 0F 2F 43 78              - comiss xmm8,[rbx+78]
GameAssembly.dll+7878E3: 76 06                       - jna GameAssembly.dll+7878EB
GameAssembly.dll+7878E5: F3 44 0F 11 43 78           - movss [rbx+78],xmm8
GameAssembly.dll+7878EB: 48 8B 05 C6 58 0D 04        - mov rax,[GameAssembly.dll+485D1B8]
GameAssembly.dll+7878F2: F3 44 0F 10 5B 78           - movss xmm11,[rbx+78]
GameAssembly.dll+7878F8: 48 85 C0                    - test rax,rax
GameAssembly.dll+7878FB: 75 1C                       - jne GameAssembly.dll+787919
GameAssembly.dll+7878FD: 48 8D 0D 8C 0E 41 03        - lea rcx,[GameAssembly.dll+3B98790]
GameAssembly.dll+787904: E8 77 42 B8 FF              - call GameAssembly.DllCanUnloadNow+2A40
GameAssembly.dll+787909: 48 85 C0                    - test rax,rax
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8993</ID>
                  <Description>"No Aim Fatigue"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
aim_fatigue_bow_toggle:
  db 01

[DISABLE]
aim_fatigue_bow_toggle:
  db 00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8994</ID>
                  <Description>"Aim Fatigue"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>aim_fatigue_bow_base_ptr</Address>
                  <Offsets>
                    <Offset>78</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>8707</ID>
          <Description>"Inventory"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>C08000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8555</ID>
              <Description>"Item Degrade"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.23 120705 S
  Date   : 2023-08-27
  Author : sub1to
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(code_pause)
label(code_max)
label(item_degrade_hook)
label(item_degrade_bytes)
label(item_degrade_base_ptr)
label(item_degrade_pause_toggle)
label(item_degrade_max_toggle)
registersymbol(item_degrade_hook)
registersymbol(item_degrade_bytes)
registersymbol(item_degrade_base_ptr)
registersymbol(item_degrade_pause_toggle)
registersymbol(item_degrade_max_toggle)
aobScanModule(hook,GameAssembly.dll,f3 0f 5c de 0f 2e d3)

newmem:
item_degrade_bytes:
  readMem(hook, 7)
  jmp returnhere

item_degrade_base_ptr:
  dq 0

item_degrade_pause_toggle:
  db 0

item_degrade_max_toggle:
  db 0

code:
  mov [item_degrade_base_ptr], rbx

code_pause:
  cmp byte ptr [item_degrade_pause_toggle], 0
  jz code_max
  jmp item_degrade_bytes+4


code_max:
  cmp byte ptr [item_degrade_max_toggle], 0
  jz item_degrade_bytes
  push rax
  mov rax, [rbx+310]   //private GearItemData GearItem::m_GearItemData; // 0x310
  movss xmm3, [rax+48] //private float GearItemData::m_MaxHP; // 0x48
  pop rax
  mov byte ptr [rbx+341], 0       //private bool GearItem::m_WornOut; // 0x341
  jmp item_degrade_bytes+4

hook:
item_degrade_hook:
  jmp code
  nop
  nop
  returnhere:



[DISABLE]
item_degrade_hook:
  readMem(item_degrade_bytes, 7)

unregistersymbol(item_degrade_hook)
unregistersymbol(item_degrade_bytes)
unregistersymbol(item_degrade_base_ptr)
unregistersymbol(item_degrade_pause_toggle)
unregistersymbol(item_degrade_max_toggle)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+7BF30D

GameAssembly.dll+7BF2D6: 80 3D 9A 57 08 04 00     - cmp byte ptr [GameAssembly.dll+4844A77],00
GameAssembly.dll+7BF2DD: 48 8B D9                 - mov rbx,rcx
GameAssembly.dll+7BF2E0: 0F 29 74 24 30           - movaps [rsp+30],xmm6
GameAssembly.dll+7BF2E5: 0F 28 F1                 - movaps xmm6,xmm1
GameAssembly.dll+7BF2E8: 75 13                    - jne GameAssembly.dll+7BF2FD
GameAssembly.dll+7BF2EA: 48 8D 0D 27 8E E9 03     - lea rcx,[GameAssembly.dll+4658118]
GameAssembly.dll+7BF2F1: E8 5A 0B BB FF           - call GameAssembly.dll+36FE50
GameAssembly.dll+7BF2F6: C6 05 7A 57 08 04 01     - mov byte ptr [GameAssembly.dll+4844A77],01
GameAssembly.dll+7BF2FD: F3 0F 10 9B 10 03 00 00  - movss xmm3,[rbx+00000310]
GameAssembly.dll+7BF305: F3 0F 10 93 10 03 00 00  - movss xmm2,[rbx+00000310]
// ---------- INJECTING HERE ----------
GameAssembly.dll+7BF30D: F3 0F 5C DE              - subss xmm3,xmm6
GameAssembly.dll+7BF311: 0F 2E D3                 - ucomiss xmm2,xmm3
// ---------- DONE INJECTING  ----------
GameAssembly.dll+7BF314: 7A 02                    - jp GameAssembly.dll+7BF318
GameAssembly.dll+7BF316: 74 28                    - je GameAssembly.dll+7BF340
GameAssembly.dll+7BF318: 4C 8B 83 08 03 00 00     - mov r8,[rbx+00000308]
GameAssembly.dll+7BF31F: F3 0F 11 9B 10 03 00 00  - movss [rbx+00000310],xmm3
GameAssembly.dll+7BF327: 4D 85 C0                 - test r8,r8
GameAssembly.dll+7BF32A: 74 14                    - je GameAssembly.dll+7BF340
GameAssembly.dll+7BF32C: 49 8B 40 28              - mov rax,[r8+28]
GameAssembly.dll+7BF330: 48 8B D3                 - mov rdx,rbx
GameAssembly.dll+7BF333: 49 8B 48 40              - mov rcx,[r8+40]
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8651</ID>
                  <Description>"Pause Degrade"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
item_degrade_pause_toggle:
  db 01

[DISABLE]
item_degrade_pause_toggle:
  db 00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8652</ID>
                  <Description>"Max Quality"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
item_degrade_max_toggle:
  db 01

[DISABLE]
item_degrade_max_toggle:
  db 00
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8751</ID>
              <Description>"Items Never Wet/Frozen"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-27
  Author : sub1to

  This script does blah blah blah

  +B0]
      +80  wet percent
      +84  frozen percent
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(item_wet_hook)
label(item_wet_bytes)
label(item_wet_base_ptr)
label(item_wet_toggle)
label(item_wet_value)
registersymbol(item_wet_hook)
registersymbol(item_wet_bytes)
registersymbol(item_wet_base_ptr)
registersymbol(item_wet_toggle)
registersymbol(item_wet_value)
aobScanModule(hook,GameAssembly.dll,f3 0f 10 80 ? ? ? ? 41 0f 2e c1 7a ? 74)

newmem:
item_wet_bytes:
  //movss xmm0,[rax+74]
  readMem(hook, 8)
  jmp returnhere

item_wet_base_ptr:
  dq 0

item_wet_toggle:
  db 1

item_wet_value:
  dd 0

code:
  mov [item_wet_base_ptr], rax

  cmp byte ptr [item_wet_toggle], 0
  jz item_wet_bytes
  //movss xmm6, [item_wet_value]
  //movss [rax+74], xmm6
  //movss [rax+78], xmm6
  //jmp returnhere
  mov qword ptr [rax+80], 0
  jmp item_wet_bytes

hook:
item_wet_hook:
  jmp code
  nop 3
  returnhere:



[DISABLE]
item_wet_hook:
  //db F3 0F 10 40 74
  readMem(item_wet_bytes, 8)

unregistersymbol(item_wet_hook)
unregistersymbol(item_wet_bytes)
unregistersymbol(item_wet_base_ptr)
unregistersymbol(item_wet_toggle)
unregistersymbol(item_wet_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+5F0BAA

GameAssembly.dll+5F0B7C: 48 8B 44 C1 20           - mov rax,[rcx+rax*8+20]
GameAssembly.dll+5F0B81: 48 85 C0                 - test rax,rax
GameAssembly.dll+5F0B84: 0F 84 B1 03 00 00        - je GameAssembly.dll+5F0F3B
GameAssembly.dll+5F0B8A: 48 8B 80 A8 00 00 00     - mov rax,[rax+000000A8]
GameAssembly.dll+5F0B91: 48 85 C0                 - test rax,rax
GameAssembly.dll+5F0B94: 0F 84 A1 03 00 00        - je GameAssembly.dll+5F0F3B
GameAssembly.dll+5F0B9A: F3 0F 10 80 84 00 00 00  - movss xmm0,[rax+00000084]
GameAssembly.dll+5F0BA2: 41 0F 2E C1              - ucomiss xmm0,xmm9
GameAssembly.dll+5F0BA6: 7A 12                    - jp GameAssembly.dll+5F0BBA
GameAssembly.dll+5F0BA8: 75 10                    - jne GameAssembly.dll+5F0BBA
// ---------- INJECTING HERE ----------
GameAssembly.dll+5F0BAA: F3 0F 10 80 80 00 00 00  - movss xmm0,[rax+00000080]
// ---------- DONE INJECTING  ----------
GameAssembly.dll+5F0BB2: 41 0F 2E C1              - ucomiss xmm0,xmm9
GameAssembly.dll+5F0BB6: 7A 02                    - jp GameAssembly.dll+5F0BBA
GameAssembly.dll+5F0BB8: 74 03                    - je GameAssembly.dll+5F0BBD
GameAssembly.dll+5F0BBA: 41 FF C7                 - inc r15d
GameAssembly.dll+5F0BBD: FF C3                    - inc ebx
GameAssembly.dll+5F0BBF: 83 FB 04                 - cmp ebx,04
GameAssembly.dll+5F0BC2: 0F 8C 98 FE FF FF        - jl GameAssembly.dll+5F0A60
GameAssembly.dll+5F0BC8: FF C6                    - inc esi
GameAssembly.dll+5F0BCA: 83 FE 08                 - cmp esi,08
GameAssembly.dll+5F0BCD: 0F 8C 7D FE FF FF        - jl GameAssembly.dll+5F0A50
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>8617</ID>
              <Description>"Select Item Hook"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.23 120705 S
  Date   : 2023-08-27
  Author : sub1to

}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(item_select_hook)
label(item_select_bytes)
label(item_select_base_ptr)
registersymbol(item_select_hook)
registersymbol(item_select_bytes)
registersymbol(item_select_base_ptr)
aobScanModule(hook,GameAssembly.dll,48 8b c6 48 8b 74 24 ? 48 8b 5c 24 ? 48 83 c4 ? 5f c3 48 8b 74 24)

newmem:
item_select_bytes:
  readMem(hook, 8)
  jmp code

item_select_base_ptr:
  dq 0

code:
  mov [item_select_base_ptr], rax
  jmp returnhere

hook:
item_select_hook:
  jmp item_select_bytes
  nop
  nop
  nop
  returnhere:



[DISABLE]
item_select_hook:
  readMem(item_select_bytes, 8)

unregistersymbol(item_select_hook)
unregistersymbol(item_select_bytes)
unregistersymbol(item_select_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+9B505B

GameAssembly.dll+9B503C: 03 87 68 03 00 00     - add eax,[rdi+00000368]
GameAssembly.dll+9B5042: 3B C3                 - cmp eax,ebx
GameAssembly.dll+9B5044: 74 15                 - je GameAssembly.dll+9B505B
GameAssembly.dll+9B5046: 48 8B 87 88 02 00 00  - mov rax,[rdi+00000288]
GameAssembly.dll+9B504D: FF C3                 - inc ebx
GameAssembly.dll+9B504F: 8B D3                 - mov edx,ebx
GameAssembly.dll+9B5051: 48 8B C8              - mov rcx,rax
GameAssembly.dll+9B5054: 48 85 C0              - test rax,rax
GameAssembly.dll+9B5057: 74 27                 - je GameAssembly.dll+9B5080
GameAssembly.dll+9B5059: EB 95                 - jmp GameAssembly.dll+9B4FF0
// ---------- INJECTING HERE ----------
GameAssembly.dll+9B505B: 48 8B C6              - mov rax,rsi
// ---------- DONE INJECTING  ----------
GameAssembly.dll+9B505E: 48 8B 74 24 38        - mov rsi,[rsp+38]
GameAssembly.dll+9B5063: 48 8B 5C 24 30        - mov rbx,[rsp+30]
GameAssembly.dll+9B5068: 48 83 C4 20           - add rsp,20
GameAssembly.dll+9B506C: 5F                    - pop rdi
GameAssembly.dll+9B506D: C3                    - ret
GameAssembly.dll+9B506E: 48 8B 74 24 38        - mov rsi,[rsp+38]
GameAssembly.dll+9B5073: 33 C0                 - xor eax,eax
GameAssembly.dll+9B5075: 48 8B 5C 24 30        - mov rbx,[rsp+30]
GameAssembly.dll+9B507A: 48 83 C4 20           - add rsp,20
GameAssembly.dll+9B507E: 5F                    - pop rdi
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8748</ID>
                  <Description>"Base"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>808080</Color>
                  <VariableType>8 Bytes</VariableType>
                  <Address>item_select_base_ptr</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>8797</ID>
                  <Description>"Display Name"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>String</VariableType>
                  <Length>32</Length>
                  <Unicode>1</Unicode>
                  <CodePage>0</CodePage>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>item_select_base_ptr</Address>
                  <Offsets>
                    <Offset>14</Offset>
                    <Offset>10</Offset>
                    <Offset>60</Offset>
                    <Offset>310</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>9005</ID>
                  <Description>"Description"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>String</VariableType>
                  <Length>32</Length>
                  <Unicode>1</Unicode>
                  <CodePage>0</CodePage>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>item_select_base_ptr</Address>
                  <Offsets>
                    <Offset>14</Offset>
                    <Offset>10</Offset>
                    <Offset>68</Offset>
                    <Offset>310</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>9003</ID>
                  <Description>"Stack Count"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>item_select_base_ptr</Address>
                  <Offsets>
                    <Offset>18</Offset>
                    <Offset>0x218</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8750</ID>
                  <Description>"Wet %"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>item_select_base_ptr</Address>
                  <Offsets>
                    <Offset>0x80</Offset>
                    <Offset>0xA8</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8753</ID>
                  <Description>"Frozen %"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>item_select_base_ptr</Address>
                  <Offsets>
                    <Offset>84</Offset>
                    <Offset>0xA8</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8619</ID>
                  <Description>"Quality"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>item_select_base_ptr</Address>
                  <Offsets>
                    <Offset>308</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8620</ID>
                  <Description>"Quality Max"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>item_select_base_ptr</Address>
                  <Offsets>
                    <Offset>0x48</Offset>
                    <Offset>0x310</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8791</ID>
                  <Description>"Ruined"</Description>
                  <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:No
1:yes
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Byte</VariableType>
                  <Address>item_select_base_ptr</Address>
                  <Offsets>
                    <Offset>0x341</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>9073</ID>
                  <Description>"EvolveItem (curing)"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>C08000</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>9074</ID>
                      <Description>"Time To Evolve (Game Days)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF8080</Color>
                      <VariableType>Float</VariableType>
                      <Address>item_select_base_ptr</Address>
                      <Offsets>
                        <Offset>0x2C</Offset>
                        <Offset>e8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>9075</ID>
                      <Description>"Require Indoors"</Description>
                      <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF8080</Color>
                      <VariableType>Byte</VariableType>
                      <Address>item_select_base_ptr</Address>
                      <Offsets>
                        <Offset>30</Offset>
                        <Offset>e8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>9076</ID>
                      <Description>"Time Spent Evolving (Game Hours)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF8080</Color>
                      <VariableType>Float</VariableType>
                      <Address>item_select_base_ptr</Address>
                      <Offsets>
                        <Offset>0x34</Offset>
                        <Offset>e8</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8795</ID>
                  <Description>"Contents"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>C08000</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8796</ID>
                      <Description>"Water"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF8080</Color>
                      <VariableType>Float</VariableType>
                      <Address>item_select_base_ptr</Address>
                      <Offsets>
                        <Offset>20</Offset>
                        <Offset>240</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>8800</ID>
                      <Description>"Calories"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF8080</Color>
                      <VariableType>Float</VariableType>
                      <Address>item_select_base_ptr</Address>
                      <Offsets>
                        <Offset>20</Offset>
                        <Offset>0x120</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>8799</ID>
                      <Description>"Antiseptic / Jerry Can"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF8080</Color>
                      <VariableType>Float</VariableType>
                      <Address>item_select_base_ptr</Address>
                      <Offsets>
                        <Offset>18</Offset>
                        <Offset>0x190</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>8798</ID>
                      <Description>"Gunpowder"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF8080</Color>
                      <VariableType>Float</VariableType>
                      <Address>item_select_base_ptr</Address>
                      <Offsets>
                        <Offset>20</Offset>
                        <Offset>0x1C8</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8845</ID>
              <Description>"Auto Crack Safe"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-27
  Author : sub1to

  +1C    = cracked (byte)
  +98    = rotation (float)
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(safe_open_hook)
label(safe_open_bytes)
label(safe_open_base_ptr)
label(safe_open_toggle)
registersymbol(safe_open_hook)
registersymbol(safe_open_bytes)
registersymbol(safe_open_base_ptr)
registersymbol(safe_open_toggle)

// public class SafeCracking : MonoBehaviour
// RVA: 0x76D170 Offset: 0x76BF70 VA: 0x18076D170
// public void Update() { }
aobScanModule(hook,GameAssembly.dll,40 53 41 57 48 83 ec ? 80 3d ? ? ? ? ? 4c 8b f9 75 ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? c6 05 ? ? ? ? ? 48 8b 05 ? ? ? ? 33 db)

newmem:
safe_open_bytes:
  readMem(hook, 8)
  jmp returnhere

safe_open_base_ptr:
  dq 0

safe_open_toggle:
  db 1

code:
  mov [safe_open_base_ptr], rcx

  cmp byte ptr [safe_open_toggle], 0
  jz safe_open_bytes
  mov byte ptr [rcx+1C], 1         // public bool m_Cracked; // 0x1C
  jmp safe_open_bytes

hook:
safe_open_hook:
  jmp code
  nop
  nop
  nop
  returnhere:



[DISABLE]
safe_open_hook:
  readMem(safe_open_bytes, 8)

unregistersymbol(safe_open_hook)
unregistersymbol(safe_open_bytes)
unregistersymbol(safe_open_base_ptr)
unregistersymbol(safe_open_toggle)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+76D170

GameAssembly.dll+76D166: CC                    - int 3
GameAssembly.dll+76D167: CC                    - int 3
GameAssembly.dll+76D168: CC                    - int 3
GameAssembly.dll+76D169: CC                    - int 3
GameAssembly.dll+76D16A: CC                    - int 3
GameAssembly.dll+76D16B: CC                    - int 3
GameAssembly.dll+76D16C: CC                    - int 3
GameAssembly.dll+76D16D: CC                    - int 3
GameAssembly.dll+76D16E: CC                    - int 3
GameAssembly.dll+76D16F: CC                    - int 3
// ---------- INJECTING HERE ----------
GameAssembly.dll+76D170: 40 53                 - push rbx
// ---------- DONE INJECTING  ----------
GameAssembly.dll+76D172: 41 57                 - push r15
GameAssembly.dll+76D174: 48 83 EC 68           - sub rsp,68
GameAssembly.dll+76D178: 80 3D 5F 77 0D 04 00  - cmp byte ptr [GameAssembly.dll+48448DE],00
GameAssembly.dll+76D17F: 4C 8B F9              - mov r15,rcx
GameAssembly.dll+76D182: 75 37                 - jne GameAssembly.dll+76D1BB
GameAssembly.dll+76D184: 48 8D 0D B5 C5 E7 03  - lea rcx,[GameAssembly.dll+45E9740]
GameAssembly.dll+76D18B: E8 C0 2C C0 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+76D190: 48 8D 0D A1 AF EE 03  - lea rcx,[GameAssembly.dll+4658138]
GameAssembly.dll+76D197: E8 B4 2C C0 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+76D19C: 48 8D 0D 9D E0 EB 03  - lea rcx,[GameAssembly.dll+462B240]
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>8956</ID>
              <Description>"Auto Unlock Lockers"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-27
  Author : sub1to
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(container_is_locked_hook)
label(container_is_locked_bytes)
label(container_is_locked_base_ptr)
registersymbol(container_is_locked_hook)
registersymbol(container_is_locked_bytes)
registersymbol(container_is_locked_base_ptr)
aobScanModule(hook,GameAssembly.dll,83 B8 80 00 00 00 00 0F 94 C0)

newmem:
container_is_locked_bytes:
  readMem(hook, 7)
  jmp returnhere

container_is_locked_base_ptr:
  dq 0

code:
  mov [container_is_locked_base_ptr], rax
  mov dword ptr [rax+80],1  // m_LockState = LockState.Unlocked;
  jmp container_is_locked_bytes

hook:
container_is_locked_hook:
  jmp code
  nop
  nop
  returnhere:



[DISABLE]
container_is_locked_hook:
  readMem(container_is_locked_bytes, 7)

unregistersymbol(container_is_locked_hook)
unregistersymbol(container_is_locked_bytes)
unregistersymbol(container_is_locked_progress_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+854CA5

GameAssembly.dll+854C79: E8 D2 B1 B1 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+854C7E: C6 05 68 81 00 04 01  - mov byte ptr [GameAssembly.dll+485CDED],01
GameAssembly.dll+854C85: 48 8B 05 7C 65 DD 03  - mov rax,[GameAssembly.dll+462B208]
GameAssembly.dll+854C8C: 48 8B 88 B8 00 00 00  - mov rcx,[rax+000000B8]
GameAssembly.dll+854C93: 48 8B 01              - mov rax,[rcx]
GameAssembly.dll+854C96: 48 39 47 10           - cmp [rdi+10],rax
GameAssembly.dll+854C9A: 74 1E                 - je GameAssembly.dll+854CBA
GameAssembly.dll+854C9C: 48 8B 43 68           - mov rax,[rbx+68]
GameAssembly.dll+854CA0: 48 85 C0              - test rax,rax
GameAssembly.dll+854CA3: 74 22                 - je GameAssembly.dll+854CC7
// ---------- INJECTING HERE ----------
GameAssembly.dll+854CA5: 83 B8 80 00 00 00 00  - cmp dword ptr [rax+00000080],00
// ---------- DONE INJECTING  ----------
GameAssembly.dll+854CAC: 0F 94 C0              - sete al
GameAssembly.dll+854CAF: 48 8B 5C 24 30        - mov rbx,[rsp+30]
GameAssembly.dll+854CB4: 48 83 C4 20           - add rsp,20
GameAssembly.dll+854CB8: 5F                    - pop rdi
GameAssembly.dll+854CB9: C3                    - ret
GameAssembly.dll+854CBA: 48 8B 5C 24 30        - mov rbx,[rsp+30]
GameAssembly.dll+854CBF: 32 C0                 - xor al,al
GameAssembly.dll+854CC1: 48 83 C4 20           - add rsp,20
GameAssembly.dll+854CC5: 5F                    - pop rdi
GameAssembly.dll+854CC6: C3                    - ret
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>8954</ID>
              <Description>"Instant Search/Open Containers"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.23 120705 S
  Date   : 2021-10-30
  Author : sub1to

  private float m_SearchTimeRemaining; // 0x12C
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(container_open_progress_hook)
label(container_open_progress_bytes)
label(container_open_progress_base_ptr)
registersymbol(container_open_progress_hook)
registersymbol(container_open_progress_bytes)
registersymbol(container_open_progress_base_ptr)

//ContainerInteraction::UpdateInteraction
aobScanModule(hook,GameAssembly.dll,40 53 48 83 ec ? 45 33 c0 0f 29 74 24 ? 0f 28 f1 48 8b d9 41 8d 50 ? e8 ? ? ? ? 80 7b ? ? 74 ? 48 8b 03 0f 28 ce 48 8b cb 4c 8b 80 ? ? ? ? ff 90 ? ? ? ? 80 7b ? ? 74 ? 48 8b 43 ? 48 85 c0 74 ? f3 0f 10 43 ? 0f 2f 80 ? ? ? ? 72 ? 45 33 c0 b2 ? 48 8b cb e8 ? ? ? ? f3 0f 58 73 ? f3 0f 11 73 ? 48 8b 4b)

newmem:
container_open_progress_bytes:
  readMem(hook, 6)
  jmp returnhere

container_open_progress_base_ptr:
  dq 0

code:
  mov [container_open_progress_base_ptr], rbx
  //TimedHoldInteraction::UpdateHoldInteraction:
  //*(float *)(a1 + 0x58) &gt;= *(float *)(a1 + 0x54)
  //private float &lt;HoldTime&gt;k__BackingField; // 0x54
  //private float m_Timer; // 0x58
  mov eax, [rcx+58]
  mov [rcx+54], eax
  jmp container_open_progress_bytes

hook:
container_open_progress_hook:
  jmp code
  nop
  returnhere:



[DISABLE]
container_open_progress_hook:
  readMem(container_open_progress_bytes, 6)

unregistersymbol(container_open_progress_hook)
unregistersymbol(container_open_progress_bytes)
unregistersymbol(container_open_progress_progress_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: container_open_progress_hook

GameAssembly.dll+839346: CC              - int 3
GameAssembly.dll+839347: CC              - int 3
GameAssembly.dll+839348: CC              - int 3
GameAssembly.dll+839349: CC              - int 3
GameAssembly.dll+83934A: CC              - int 3
GameAssembly.dll+83934B: CC              - int 3
GameAssembly.dll+83934C: CC              - int 3
GameAssembly.dll+83934D: CC              - int 3
GameAssembly.dll+83934E: CC              - int 3
GameAssembly.dll+83934F: CC              - int 3
// ---------- INJECTING HERE ----------
container_open_progress_hook: 40 53           - push rbx
// ---------- DONE INJECTING  ----------
GameAssembly.dll+839352: 48 83 EC 30     - sub rsp,30
GameAssembly.dll+839356: 45 33 C0        - xor r8d,r8d
GameAssembly.dll+839359: 0F 29 74 24 20  - movaps [rsp+20],xmm6
GameAssembly.dll+83935E: 0F 28 F1        - movaps xmm6,xmm1
GameAssembly.dll+839361: 48 8B D9        - mov rbx,rcx
GameAssembly.dll+839364: 41 8D 50 01     - lea edx,[r8+01]
GameAssembly.dll+839368: E8 C3 52 81 00  - call GameAssembly.dll+104E630
GameAssembly.dll+83936D: 80 7B 48 00     - cmp byte ptr [rbx+48],00
GameAssembly.dll+839371: 74 16           - je GameAssembly.dll+839389
GameAssembly.dll+839373: 48 8B 03        - mov rax,[rbx]
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>8941</ID>
              <Description>"Container (Open a container to activate)"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.23 120705 S
  Date   : 2023-08-23
  Author : sub1to

  Container::ShowContainerContents
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(code_searched)
label(code_capacity)
label(container_open_hook)
label(container_open_bytes)
label(container_open_base_ptr)
label(container_open_always_searched_toggle)
label(container_open_capacity_toggle)
label(container_open_capacity_value)
registersymbol(container_open_hook)
registersymbol(container_open_bytes)
registersymbol(container_open_base_ptr)
registersymbol(container_open_always_searched_toggle)
registersymbol(container_open_capacity_toggle)
registersymbol(container_open_capacity_value)
aobScanModule(hook,GameAssembly.dll,48 89 5c 24 ? 48 89 6c 24 ? 57 48 83 ec ? 80 3d ? ? ? ? ? 48 8b ea 48 8b d9 75 ? 48 8d 0d ? ? ? ? e8 ? ? ? ? c6 05 ? ? ? ? ? 80 3d)

newmem:
container_open_bytes:
  readMem(hook, 5)
  jmp returnhere

container_open_base_ptr:
  dq 0

container_open_always_searched_toggle:
  db 0

container_open_capacity_toggle:
  db 0

container_open_capacity_value:
  dd (float)999

code:
  mov [container_open_base_ptr], rcx

code_searched:
  cmp byte ptr [container_open_always_searched_toggle], 0
  jz code_capacity
  mov byte ptr [rcx+E8], 1	// protected bool m_Inspected; // 0xE8

code_capacity:
  cmp byte ptr [container_open_capacity_toggle], 0
  jz container_open_bytes
  // m_CapacityKG = container_open_capacity_value;
  movss xmm1, [container_open_capacity_value]
  movss [rcx+50], xmm1
  jmp container_open_bytes

hook:
container_open_hook:
  jmp code
  returnhere:



[DISABLE]
container_open_hook:
  readMem(container_open_bytes, 5)

unregistersymbol(container_open_hook)
unregistersymbol(container_open_bytes)
unregistersymbol(container_open_base_ptr)
unregistersymbol(container_open_always_searched_toggle)
unregistersymbol(container_open_capacity_toggle)
unregistersymbol(container_open_capacity_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+837190

GameAssembly.dll+83717E: CC                    - int 3
GameAssembly.dll+83717F: CC                    - int 3
GameAssembly.dll+837180: 48 8B 49 18           - mov rcx,[rcx+18]
GameAssembly.dll+837184: 33 D2                 - xor edx,edx
GameAssembly.dll+837186: E9 75 C6 9D 00        - jmp GameAssembly.dll+1213800
GameAssembly.dll+83718B: CC                    - int 3
GameAssembly.dll+83718C: CC                    - int 3
GameAssembly.dll+83718D: CC                    - int 3
GameAssembly.dll+83718E: CC                    - int 3
GameAssembly.dll+83718F: CC                    - int 3
// ---------- INJECTING HERE ----------
GameAssembly.dll+837190: 48 89 5C 24 18        - mov [rsp+18],rbx
// ---------- DONE INJECTING  ----------
GameAssembly.dll+837195: 48 89 6C 24 20        - mov [rsp+20],rbp
GameAssembly.dll+83719A: 57                    - push rdi
GameAssembly.dll+83719B: 48 83 EC 30           - sub rsp,30
GameAssembly.dll+83719F: 80 3D 32 DC 00 04 00  - cmp byte ptr [GameAssembly.dll+4844DD8],00
GameAssembly.dll+8371A6: 48 8B EA              - mov rbp,rdx
GameAssembly.dll+8371A9: 48 8B D9              - mov rbx,rcx
GameAssembly.dll+8371AC: 75 13                 - jne GameAssembly.dll+8371C1
GameAssembly.dll+8371AE: 48 8D 0D DB 96 D9 03  - lea rcx,[GameAssembly.dll+45D0890]
GameAssembly.dll+8371B5: E8 96 8C B3 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+8371BA: C6 05 17 DC 00 04 01  - mov byte ptr [GameAssembly.dll+4844DD8],01
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8943</ID>
                  <Description>"Always Searched"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
container_open_always_searched_toggle:
  db 01

[DISABLE]
container_open_always_searched_toggle:
  db 00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8957</ID>
                  <Description>"Overwrite Capacity"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
container_open_capacity_toggle:
  db 01

[DISABLE]
container_open_capacity_toggle:
  db 00
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8958</ID>
                      <Description>"Capacity"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>800080</Color>
                      <VariableType>Float</VariableType>
                      <Address>container_open_capacity_value</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8944</ID>
                  <Description>"m_CapacityKG"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>container_open_base_ptr</Address>
                  <Offsets>
                    <Offset>50</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8945</ID>
                  <Description>"m_Inspected"</Description>
                  <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Byte</VariableType>
                  <Address>container_open_base_ptr</Address>
                  <Offsets>
                    <Offset>f8</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8951</ID>
                  <Description>"m_SearchTimeRemaining"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>container_open_base_ptr</Address>
                  <Offsets>
                    <Offset>134</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8950</ID>
                  <Description>"Safe (If container is a safe)"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>C08000</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8949</ID>
                      <Description>"m_Safe-&gt;m_Cracked"</Description>
                      <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF8080</Color>
                      <VariableType>Byte</VariableType>
                      <Address>container_open_base_ptr</Address>
                      <Offsets>
                        <Offset>1C</Offset>
                        <Offset>108</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8960</ID>
                  <Description>"Lock (If container has a lock)"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>C08000</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8961</ID>
                      <Description>"m_Lock-&gt;m_LockState"</Description>
                      <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:Locked
1:Unlocked
2:Broken
</DropDownList>
                      <ShowAsSigned>0</ShowAsSigned>
                      <Color>FF8080</Color>
                      <VariableType>Byte</VariableType>
                      <Address>container_open_base_ptr</Address>
                      <Offsets>
                        <Offset>80</Offset>
                        <Offset>100</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>9077</ID>
              <Description>"Instant Cure/Dry Items"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-27
  Author : sub1to
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(_24f)
label(_1f)
label(evolve_item_hook)
label(evolve_item_bytes)
registersymbol(evolve_item_hook)
registersymbol(evolve_item_bytes)
aobScanModule(hook,GameAssembly.dll,f3 0f 11 73 ? 0f 28 74 24 ? 48 8b 7c 24)

newmem:
evolve_item_bytes:
  readMem(hook, 5)
  jmp returnhere

_24f:
  dd (float)24

_1f:
  dd (float)1

code:
  movd xmm7, [_24f]
  movd xmm6, [rbx+2C]	// m_TimeToEvolveGameDays
  mulss xmm6, xmm7
  movd xmm7, [_1f]
  addss xmm6, xmm7
  jmp evolve_item_bytes

hook:
evolve_item_hook:
  jmp code
  returnhere:



[DISABLE]
evolve_item_hook:
  readMem(evolve_item_bytes, 5)

unregistersymbol(evolve_item_hook)
unregistersymbol(evolve_item_bytes)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+7A1B0B

GameAssembly.dll+7A1ADE: 48 85 FF                 - test rdi,rdi
GameAssembly.dll+7A1AE1: 74 42                    - je GameAssembly.dll+7A1B25
GameAssembly.dll+7A1AE3: 48 8B 87 88 00 00 00     - mov rax,[rdi+00000088]
GameAssembly.dll+7A1AEA: 48 85 C0                 - test rax,rax
GameAssembly.dll+7A1AED: 74 36                    - je GameAssembly.dll+7A1B25
GameAssembly.dll+7A1AEF: F3 0F 10 88 A0 02 00 00  - movss xmm1,[rax+000002A0]
GameAssembly.dll+7A1AF7: F3 0F 59 88 80 00 00 00  - mulss xmm1,[rax+00000080]
GameAssembly.dll+7A1AFF: F3 0F 5E F1              - divss xmm6,xmm1
GameAssembly.dll+7A1B03: F3 0F 59 F0              - mulss xmm6,xmm0
GameAssembly.dll+7A1B07: F3 0F 58 F7              - addss xmm6,xmm7
// ---------- INJECTING HERE ----------
GameAssembly.dll+7A1B0B: F3 0F 11 73 34           - movss [rbx+34],xmm6
// ---------- DONE INJECTING  ----------
GameAssembly.dll+7A1B10: 0F 28 74 24 30           - movaps xmm6,[rsp+30]
GameAssembly.dll+7A1B15: 48 8B 7C 24 50           - mov rdi,[rsp+50]
GameAssembly.dll+7A1B1A: 0F 28 7C 24 20           - movaps xmm7,[rsp+20]
GameAssembly.dll+7A1B1F: 48 83 C4 40              - add rsp,40
GameAssembly.dll+7A1B23: 5B                       - pop rbx
GameAssembly.dll+7A1B24: C3                       - ret
GameAssembly.dll+7A1B25: E8 06 72 B4 FF           - call GameAssembly.il2cpp_value_box+50
GameAssembly.dll+7A1B2A: CC                       - int 3
GameAssembly.dll+7A1B2B: 48 8D 0D 5E 6C 3F 03     - lea rcx,[GameAssembly.dll+3B98790]
GameAssembly.dll+7A1B32: E8 A9 9C B6 FF           - call GameAssembly.DllCanUnloadNow+26A0
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>9064</ID>
              <Description>"Item Spawner"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-27
  Author : sub1to
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
alloc(string,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(code_strlen_next)
label(code_strlen_end)
label(code_get_gear_name)
label(code_get_number_of_params)
label(code_get_num)
label(playermanager_update_hook)
label(playermanager_update_bytes)
label(item_spawn_toggle)
label(item_spawn_count)
label(item_spawn_string)
label(uconsole_get_gear_name_bytes)
label(uconsole_getnumberofparams_bytes)
label(uconsole_get_num_bytes)
registersymbol(playermanager_update_hook)
registersymbol(playermanager_update_bytes)
registersymbol(item_spawn_toggle)
registersymbol(item_spawn_count)
registersymbol(item_spawn_string)
registersymbol(uconsole_get_gear_name_bytes)
registersymbol(uconsole_getnumberofparams_bytes)
registersymbol(uconsole_get_num_bytes)

//  class: PlayerManager
//  RVA: 0x15A7EC0 Offset: 0x15A6AC0 VA: 0x7FFB684A7EC0
//  public void Update() { }
aobScanModule(hook,GameAssembly.dll,40 53 41 56 48 83 ec ? 80 3d ? ? ? ? ? 48 8b d9 75 ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? c6 05 ? ? ? ? ? 48 8b 15)

// claass: uConsole
// RVA: 0xE5A2D0 Offset: 0xE590D0 VA: 0x180E5A2D0
// public static string GetString() { }
aobScanModule(uConsole_GetString,GameAssembly.dll,e8 ? ? ? ? 48 8b d8 48 85 c0 0f 84 ? ? ? ? 39 70 ? 0f 86 ? ? ? ? bf ? ? ? ? 48 8b 0d ? ? ? ? 39 b1 ? ? ? ? 75 ? e8 ? ? ? ? 33 c9 e8 ? ? ? ? 3b c7)

aobScanModule(uConsole_GetNumberOfParams,GameAssembly.dll,e8 ? ? ? ? 3b c7 7e ? 48 8b 0d)

aobScanModule(uConsole_GetInt,GameAssembly.dll,e8 ? ? ? ? 8b f8 f3 0f 10 35)

// class: ConsoleManager
// RVA: 0xB218F0 Offset: 0xB206F0 VA: 0x180B218F0
// public static void CONSOLE_gear_add() { }
aobScanModule(ConsoleManager_gear_add,GameAssembly.dll,48 89 5c 24 ? 48 89 74 24 ? 57 48 81 ec ? ? ? ? 0f 29 b4 24 ? ? ? ? 80 3d)

string:
item_spawn_string:
  dq 00 // +00 ptr
  dq 00 // +08 padding
  dd 16 // +10 len
  db 'G' 0 'E' 0 'A' 0 'R' 0 '_' 0 'T' 0 'e' 0 'c' 0 'h' 0 'n' 0 'i' 0 'c' 0 'a' 0 'l' 0 'B' 0 'a' 0 'c' 0 'k' 0 'p' 0 'a' 0 'c' 0 'k' 0 0
  //db 0 // +14 first byte

newmem:
playermanager_update_bytes:
  //push rbp
  //mov rbp,rsp
  readMem(hook, $8)
  jmp returnhere

uconsole_get_gear_name_bytes:
  readMem(uConsole_GetString, 5)

uconsole_getnumberofparams_bytes:
  readMem(uConsole_GetNumberOfParams, 5)

uconsole_get_num_bytes:
  readMem(uConsole_GetInt, 5)

item_spawn_toggle:
  db 0

item_spawn_count:
  dd 1

code_get_gear_name:
  lea rax, [string]
  ret

code_get_number_of_params:
  mov rax, 2
  ret

code_get_num:
  mov eax, [item_spawn_count]
  ret

code:
  cmp byte ptr [item_spawn_toggle], 0
  jz playermanager_update_bytes
  mov byte ptr [item_spawn_toggle], 0

  //get strlen
  xor r8d, r8d
  lea rdx, [item_spawn_string+14]
code_strlen_next:
  mov r9w, [rdx]
  test r9w, r9w
  jz code_strlen_end
  inc r8d
  lea rdx, [rdx+2]
  jmp code_strlen_next

code_strlen_end:
  mov [item_spawn_string+10], r8d

  // spawn item
  lea rsp, [rsp-28]
  mov [rsp+20], rcx
  call ConsoleManager_gear_add
  mov rcx, [rsp+20]
  lea rsp, [rsp+28]

  jmp playermanager_update_bytes

hook:
playermanager_update_hook:
  jmp code
  nop
  nop
  nop
  returnhere:

uConsole_GetString:
  call code_get_gear_name

uConsole_GetNumberOfParams:
  call code_get_number_of_params

uConsole_GetInt:
  call code_get_num



[DISABLE]
playermanager_update_hook:
  //40 55 48 8B EC
  readMem(playermanager_update_bytes, 8)

uConsole_GetString:
  readMem(uconsole_get_gear_name_bytes, 5)

uConsole_GetNumberOfParams:
  readMem(uconsole_getnumberofparams_bytes, 5)

uConsole_GetInt:
  readMem(uconsole_get_num_bytes, 5)

unregistersymbol(playermanager_update_hook)
unregistersymbol(playermanager_update_bytes)
unregistersymbol(item_spawn_toggle)
unregistersymbol(item_spawn_count)
unregistersymbol(item_spawn_string)
unregistersymbol(uconsole_get_gear_name_bytes)
unregistersymbol(uconsole_getnumberofparams_bytes)
unregistersymbol(uconsole_get_num_bytes)
dealloc(newmem)
dealloc(string)

{
PlayerManager::Update

// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+C04BF0

GameAssembly.dll+C04BD3: 74 14                 - je GameAssembly.dll+C04BE9
GameAssembly.dll+C04BD5: 33 D2                 - xor edx,edx
GameAssembly.dll+C04BD7: E8 E4 E4 0D 00        - call GameAssembly.dll+CE30C0
GameAssembly.dll+C04BDC: C6 83 90 01 00 00 00  - mov byte ptr [rbx+00000190],00
GameAssembly.dll+C04BE3: 48 83 C4 20           - add rsp,20
GameAssembly.dll+C04BE7: 5B                    - pop rbx
GameAssembly.dll+C04BE8: C3                    - ret
GameAssembly.dll+C04BE9: E8 42 41 6E FF        - call GameAssembly.il2cpp_value_box+50
GameAssembly.dll+C04BEE: CC                    - int 3
GameAssembly.dll+C04BEF: CC                    - int 3
// ---------- INJECTING HERE ----------
GameAssembly.dll+C04BF0: 40 53                 - push rbx
// ---------- DONE INJECTING  ----------
GameAssembly.dll+C04BF2: 41 56                 - push r14
GameAssembly.dll+C04BF4: 48 83 EC 68           - sub rsp,68
GameAssembly.dll+C04BF8: 80 3D 9C 18 C4 03 00  - cmp byte ptr [GameAssembly.dll+484649B],00
GameAssembly.dll+C04BFF: 48 8B D9              - mov rbx,rcx
GameAssembly.dll+C04C02: 75 73                 - jne GameAssembly.dll+C04C77
GameAssembly.dll+C04C04: 48 8D 0D 05 43 A6 03  - lea rcx,[GameAssembly.dll+4668F10]
GameAssembly.dll+C04C0B: E8 40 B2 76 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+C04C10: 48 8D 0D 41 2F A5 03  - lea rcx,[GameAssembly.dll+4657B58]
GameAssembly.dll+C04C17: E8 34 B2 76 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+C04C1C: 48 8D 0D 15 35 A5 03  - lea rcx,[GameAssembly.dll+4658138]
}

{
uConsole::GetString

// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+E5A2D0

GameAssembly.dll+E5A2B6: 48 85 C0              - test rax,rax
GameAssembly.dll+E5A2B9: 74 0E                 - je GameAssembly.dll+E5A2C9
GameAssembly.dll+E5A2BB: 8B 40 18              - mov eax,[rax+18]
GameAssembly.dll+E5A2BE: 39 41 38              - cmp [rcx+38],eax
GameAssembly.dll+E5A2C1: 0F 9C C0              - setl al
GameAssembly.dll+E5A2C4: 48 83 C4 28           - add rsp,28
GameAssembly.dll+E5A2C8: C3                    - ret
GameAssembly.dll+E5A2C9: E8 62 EA 48 FF        - call GameAssembly.il2cpp_value_box+50
GameAssembly.dll+E5A2CE: CC                    - int 3
GameAssembly.dll+E5A2CF: CC                    - int 3
// ---------- INJECTING HERE ----------
GameAssembly.dll+E5A2D0: 48 83 EC 28           - sub rsp,28
// ---------- DONE INJECTING  ----------
GameAssembly.dll+E5A2D4: 80 3D 03 CF 9E 03 00  - cmp byte ptr [GameAssembly.dll+48471DE],00
GameAssembly.dll+E5A2DB: 75 2B                 - jne GameAssembly.dll+E5A308
GameAssembly.dll+E5A2DD: 48 8D 0D 34 30 7E 03  - lea rcx,[GameAssembly.dll+463D318]
GameAssembly.dll+E5A2E4: E8 67 5B 51 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+E5A2E9: 48 8D 0D C8 2F 7E 03  - lea rcx,[GameAssembly.dll+463D2B8]
GameAssembly.dll+E5A2F0: E8 5B 5B 51 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+E5A2F5: 48 8D 0D E4 3C 81 03  - lea rcx,[GameAssembly.dll+466DFE0]
GameAssembly.dll+E5A2FC: E8 4F 5B 51 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+E5A301: C6 05 D6 CE 9E 03 01  - mov byte ptr [GameAssembly.dll+48471DE],01
GameAssembly.dll+E5A308: 48 8B 0D D1 3C 81 03  - mov rcx,[GameAssembly.dll+466DFE0]
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>9065</ID>
                  <Description>"State"</Description>
                  <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:Idle/Done
1:Spawn Item
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>800080</Color>
                  <VariableType>Byte</VariableType>
                  <Address>item_spawn_toggle</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>9066</ID>
                  <Description>"Count (Stackable Items)"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>800080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>item_spawn_count</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>9067</ID>
                  <Description>"Item Name"</Description>
                  <DropDownList>GEAR_Accelerant:GEAR_Accelerant
GEAR_AccelerantGunpowder:GEAR_AccelerantGunpowder
GEAR_AccelerantKerosene:GEAR_AccelerantKerosene
GEAR_AccelerantMedium:GEAR_AccelerantMedium
GEAR_AirlineFoodChick:GEAR_AirlineFoodChick
GEAR_AirlineFoodVeg:GEAR_AirlineFoodVeg
GEAR_Arrow:GEAR_Arrow
GEAR_ArrowHead:GEAR_ArrowHead
GEAR_ArrowShaft:GEAR_ArrowShaft
GEAR_AstridBackPack_hangar:GEAR_AstridBackPack_hangar
GEAR_AstridBoots:GEAR_AstridBoots
GEAR_AstridGloves:GEAR_AstridGloves
GEAR_AstridJacket:GEAR_AstridJacket
GEAR_AstridJeans:GEAR_AstridJeans
GEAR_AstridSweater:GEAR_AstridSweater
GEAR_AstridToque:GEAR_AstridToque
GEAR_AuroraHatchCode:GEAR_AuroraHatchCode
GEAR_AuroraObservationNote:GEAR_AuroraObservationNote
GEAR_Balaclava:GEAR_Balaclava
GEAR_BankManagerHouseKey:GEAR_BankManagerHouseKey
GEAR_BankVaultCode:GEAR_BankVaultCode
GEAR_BarkTinder:GEAR_BarkTinder
GEAR_BaseballCap:GEAR_BaseballCap
GEAR_BasicBoots:GEAR_BasicBoots
GEAR_BasicGloves:GEAR_BasicGloves
GEAR_BasicShoes:GEAR_BasicShoes
GEAR_BasicWinterCoat:GEAR_BasicWinterCoat
GEAR_BasicWoolHat:GEAR_BasicWoolHat
GEAR_BasicWoolScarf:GEAR_BasicWoolScarf
GEAR_BearEar:GEAR_BearEar
GEAR_BearHide:GEAR_BearHide
GEAR_BearHideDried:GEAR_BearHideDried
GEAR_BearQuarter:GEAR_BearQuarter
GEAR_BearSkinBedRoll:GEAR_BearSkinBedRoll
GEAR_BearSkinCoat:GEAR_BearSkinCoat
GEAR_BearSpear:GEAR_BearSpear
GEAR_BearSpearBroken:GEAR_BearSpearBroken
GEAR_BearSpearBrokenStory:GEAR_BearSpearBrokenStory
GEAR_BearSpearRelic:GEAR_BearSpearRelic
GEAR_BearSpearStory:GEAR_BearSpearStory
GEAR_BedRoll:GEAR_BedRoll
GEAR_BeefJerky:GEAR_BeefJerky
GEAR_BirchbarkPrepared:GEAR_BirchbarkPrepared
GEAR_BirchbarkTea:GEAR_BirchbarkTea
GEAR_BirchSapling:GEAR_BirchSapling
GEAR_BirchSaplingDried:GEAR_BirchSaplingDried
GEAR_BlackrockConvictNote1:GEAR_BlackrockConvictNote1
GEAR_BlackrockConvictNote2:GEAR_BlackrockConvictNote2
GEAR_BlackrockConvictNote3:GEAR_BlackrockConvictNote3
GEAR_BlackrockMemo:GEAR_BlackrockMemo
GEAR_BlueFlare:GEAR_BlueFlare
GEAR_BoltCutters:GEAR_BoltCutters
GEAR_BookA:GEAR_BookA
GEAR_BookArchery:GEAR_BookArchery
GEAR_BookB:GEAR_BookB
GEAR_BookBopen:GEAR_BookBopen
GEAR_BookC:GEAR_BookC
GEAR_BookCarcassHarvesting:GEAR_BookCarcassHarvesting
GEAR_BookCooking:GEAR_BookCooking
GEAR_BookD:GEAR_BookD
GEAR_BookE:GEAR_BookE
GEAR_BookEopen:GEAR_BookEopen
GEAR_BookF:GEAR_BookF
GEAR_BookFireStarting:GEAR_BookFireStarting
GEAR_BookFopen:GEAR_BookFopen
GEAR_BookG:GEAR_BookG
GEAR_BookGunsmithing:GEAR_BookGunsmithing
GEAR_BookH:GEAR_BookH
GEAR_BookHopen:GEAR_BookHopen
GEAR_BookI:GEAR_BookI
GEAR_BookIceFishing:GEAR_BookIceFishing
GEAR_BookLabE_01:GEAR_BookLabE_01
GEAR_BookLabE_02:GEAR_BookLabE_02
GEAR_BookLabE_03:GEAR_BookLabE_03
GEAR_BookLabE_Open_01:GEAR_BookLabE_Open_01
GEAR_BookManual:GEAR_BookManual
GEAR_BookMending:GEAR_BookMending
GEAR_BookRevolverFirearm:GEAR_BookRevolverFirearm
GEAR_BookRifleFirearm:GEAR_BookRifleFirearm
GEAR_BookRifleFirearmAdvanced:GEAR_BookRifleFirearmAdvanced
GEAR_BookTallTalesFishing:GEAR_BookTallTalesFishing
GEAR_BookTallTalesGlowCave:GEAR_BookTallTalesGlowCave
GEAR_BookTallTalesStag:GEAR_BookTallTalesStag
GEAR_BookTallTalesYeti:GEAR_BookTallTalesYeti
GEAR_BottleAntibiotics:GEAR_BottleAntibiotics
GEAR_BottleHydrogenPeroxide:GEAR_BottleHydrogenPeroxide
GEAR_BottlePainKillers:GEAR_BottlePainKillers
GEAR_Bow:GEAR_Bow
GEAR_Brand:GEAR_Brand
GEAR_BrokenArrow:GEAR_BrokenArrow
GEAR_BrokenRifle:GEAR_BrokenRifle
GEAR_Bullet:GEAR_Bullet
GEAR_CacheNote_ChurchMarshDir:GEAR_CacheNote_ChurchMarshDir
GEAR_CampOfficeCollectible:GEAR_CampOfficeCollectible
GEAR_CandyBar:GEAR_CandyBar
GEAR_CannedBeans:GEAR_CannedBeans
GEAR_CannedSardines:GEAR_CannedSardines
GEAR_CanOpener:GEAR_CanOpener
GEAR_CarBattery:GEAR_CarBattery
GEAR_CargoPants:GEAR_CargoPants
GEAR_CashBundle:GEAR_CashBundle
GEAR_CattailPlant:GEAR_CattailPlant
GEAR_CattailStalk:GEAR_CattailStalk
GEAR_CattailTinder:GEAR_CattailTinder
GEAR_CaveCacheNote:GEAR_CaveCacheNote
GEAR_Charcoal:GEAR_Charcoal
GEAR_ChurchHymn:GEAR_ChurchHymn
GEAR_ChurchNoteEP1:GEAR_ChurchNoteEP1
GEAR_ClimbingSocks:GEAR_ClimbingSocks
GEAR_Cloth:GEAR_Cloth
GEAR_ClothSheet:GEAR_ClothSheet
GEAR_Coal:GEAR_Coal
GEAR_CombatBoots:GEAR_CombatBoots
GEAR_CombatPants:GEAR_CombatPants
GEAR_CompressionBandage:GEAR_CompressionBandage
GEAR_CondensedMilk:GEAR_CondensedMilk
GEAR_ConvictCorpseNote:GEAR_ConvictCorpseNote
GEAR_CookedMeatBear:GEAR_CookedMeatBear
GEAR_CookedMeatDeer:GEAR_CookedMeatDeer
GEAR_CookedMeatMoose:GEAR_CookedMeatMoose
GEAR_CookedMeatRabbit:GEAR_CookedMeatRabbit
GEAR_CookedMeatWolf:GEAR_CookedMeatWolf
GEAR_CookingPot:GEAR_CookingPot
GEAR_CookingPotDummy:GEAR_CookingPotDummy
GEAR_CottonHoodie:GEAR_CottonHoodie
GEAR_CottonScarf:GEAR_CottonScarf
GEAR_CottonShirt:GEAR_CottonShirt
GEAR_CottonSocks:GEAR_CottonSocks
GEAR_CottonSocksStart:GEAR_CottonSocksStart
GEAR_CowichanSweater:GEAR_CowichanSweater
GEAR_Crackers:GEAR_Crackers
GEAR_Crampons:GEAR_Crampons
GEAR_CrowFeather:GEAR_CrowFeather
GEAR_DamCollectible1:GEAR_DamCollectible1
GEAR_DamControlRoomCodeNote:GEAR_DamControlRoomCodeNote
GEAR_DamElevatorNotice:GEAR_DamElevatorNotice
GEAR_DamExitCodeNote:GEAR_DamExitCodeNote
GEAR_DamFenceKey:GEAR_DamFenceKey
GEAR_DamGarbageLetter:GEAR_DamGarbageLetter
GEAR_DamLockerKey:GEAR_DamLockerKey
GEAR_DamOfficeKey:GEAR_DamOfficeKey
GEAR_DamTrailerBCrewNote:GEAR_DamTrailerBCrewNote
GEAR_DarkwalkerDiary1:GEAR_DarkwalkerDiary1
GEAR_DarkwalkerDiary10:GEAR_DarkwalkerDiary10
GEAR_DarkwalkerDiary11:GEAR_DarkwalkerDiary11
GEAR_DarkwalkerDiary2:GEAR_DarkwalkerDiary2
GEAR_DarkwalkerDiary3:GEAR_DarkwalkerDiary3
GEAR_DarkwalkerDiary4:GEAR_DarkwalkerDiary4
GEAR_DarkwalkerDiary5:GEAR_DarkwalkerDiary5
GEAR_DarkwalkerDiary6:GEAR_DarkwalkerDiary6
GEAR_DarkwalkerDiary7:GEAR_DarkwalkerDiary7
GEAR_DarkwalkerDiary8:GEAR_DarkwalkerDiary8
GEAR_DarkwalkerDiary9:GEAR_DarkwalkerDiary9
GEAR_DarkwalkerID:GEAR_DarkwalkerID
GEAR_DeadmanNote1:GEAR_DeadmanNote1
GEAR_DeadmanNote2:GEAR_DeadmanNote2
GEAR_DeadmanNote3:GEAR_DeadmanNote3
GEAR_DeadmanNote4:GEAR_DeadmanNote4
GEAR_DeadmanNote5:GEAR_DeadmanNote5
GEAR_DeerSkinBoots:GEAR_DeerSkinBoots
GEAR_DeerSkinPants:GEAR_DeerSkinPants
GEAR_DogFood:GEAR_DogFood
GEAR_DownParka:GEAR_DownParka
GEAR_DownSkiJacket:GEAR_DownSkiJacket
GEAR_DownVest:GEAR_DownVest
GEAR_DustingSulfur:GEAR_DustingSulfur
GEAR_EarMuffs:GEAR_EarMuffs
GEAR_ElevatorCrank:GEAR_ElevatorCrank
GEAR_ElevatorParts:GEAR_ElevatorParts
GEAR_ElevatorPartsDead:GEAR_ElevatorPartsDead
GEAR_EmergencyKitNote:GEAR_EmergencyKitNote
GEAR_EmergencyStim:GEAR_EmergencyStim
GEAR_EnergyBar:GEAR_EnergyBar
GEAR_Ep3ForestTalkers_FTCollectible1:GEAR_Ep3ForestTalkers_FTCollectible1
GEAR_Ep3ForestTalkers_FTCollectible2:GEAR_Ep3ForestTalkers_FTCollectible2
GEAR_Ep3ForestTalkers_FTCollectible3:GEAR_Ep3ForestTalkers_FTCollectible3
GEAR_Ep3ForestTalkers_PVCollectible1:GEAR_Ep3ForestTalkers_PVCollectible1
GEAR_Ep3ForestTalkers_PVCollectible2:GEAR_Ep3ForestTalkers_PVCollectible2
GEAR_Ep3ForestTalkers_PVCollectible3:GEAR_Ep3ForestTalkers_PVCollectible3
GEAR_Ep3HallFlyer:GEAR_Ep3HallFlyer
GEAR_Ep3Rosary:GEAR_Ep3Rosary
GEAR_Ep3TomsMap:GEAR_Ep3TomsMap
GEAR_Ep3_ChurchArtifact:GEAR_Ep3_ChurchArtifact
GEAR_Ep3_ChurchFlyer:GEAR_Ep3_ChurchFlyer
GEAR_Ep3_ChurchMotelLetter:GEAR_Ep3_ChurchMotelLetter
GEAR_Ep3_ChurchNewsClipping:GEAR_Ep3_ChurchNewsClipping
GEAR_Ep3_ChurchThankyouLetter:GEAR_Ep3_ChurchThankyouLetter
GEAR_Ep3_ChurchTheftReport:GEAR_Ep3_ChurchTheftReport
GEAR_EP3_JoplinBunkerNote:GEAR_EP3_JoplinBunkerNote
GEAR_EP3_JoplinBunkerNote2:GEAR_EP3_JoplinBunkerNote2
GEAR_EP3_JoplinCacheNote:GEAR_EP3_JoplinCacheNote
GEAR_EP3_PatientHistory01:GEAR_EP3_PatientHistory01
GEAR_EP3_PatientHistory02:GEAR_EP3_PatientHistory02
GEAR_EP3_PatientHistory03:GEAR_EP3_PatientHistory03
GEAR_EP3_PatientHistory04:GEAR_EP3_PatientHistory04
GEAR_EP3_PatientHistory05:GEAR_EP3_PatientHistory05
GEAR_EP3_PatientHistory06:GEAR_EP3_PatientHistory06
GEAR_FarmerDepositBoxKey:GEAR_FarmerDepositBoxKey
GEAR_FireAxe:GEAR_FireAxe
GEAR_Firelog:GEAR_Firelog
GEAR_Firestriker:GEAR_Firestriker
GEAR_FishermanSweater:GEAR_FishermanSweater
GEAR_FishingLine:GEAR_FishingLine
GEAR_FixedRifle:GEAR_FixedRifle
GEAR_FlareA:GEAR_FlareA
GEAR_FlareGun:GEAR_FlareGun
GEAR_FlareGunAmmoSingle:GEAR_FlareGunAmmoSingle
GEAR_FlareGunAmmoSingle_SurvivorMission:GEAR_FlareGunAmmoSingle_SurvivorMission
GEAR_FlareGunCase_hangar:GEAR_FlareGunCase_hangar
GEAR_Flashlight:GEAR_Flashlight
GEAR_FleeceMittens:GEAR_FleeceMittens
GEAR_FleeceSweater:GEAR_FleeceSweater
GEAR_FlintAndSteel:GEAR_FlintAndSteel
GEAR_FoodSupplies_hangar:GEAR_FoodSupplies_hangar
GEAR_ForestTalkerBloodyItem:GEAR_ForestTalkerBloodyItem
GEAR_ForestTalkerDamNote:GEAR_ForestTalkerDamNote
GEAR_ForestTalkerFlyer:GEAR_ForestTalkerFlyer
GEAR_ForestTalkerHiddenItem:GEAR_ForestTalkerHiddenItem
GEAR_ForestTalkerMap:GEAR_ForestTalkerMap
GEAR_ForestTalkerThankyou:GEAR_ForestTalkerThankyou
GEAR_ForestTalkerThankyou2:GEAR_ForestTalkerThankyou2
GEAR_ForgeBlueprints:GEAR_ForgeBlueprints
GEAR_ForgeCacheNote:GEAR_ForgeCacheNote
GEAR_Gauntlets:GEAR_Gauntlets
GEAR_GMExtraSuppliesNote:GEAR_GMExtraSuppliesNote
GEAR_GranolaBar:GEAR_GranolaBar
GEAR_GreyMotherBoots:GEAR_GreyMotherBoots
GEAR_GreyMotherPearls:GEAR_GreyMotherPearls
GEAR_GreyMotherTrunkKey:GEAR_GreyMotherTrunkKey
GEAR_GunpowderCan:GEAR_GunpowderCan
GEAR_Gut:GEAR_Gut
GEAR_GutDried:GEAR_GutDried
GEAR_Hacksaw:GEAR_Hacksaw
GEAR_Hammer:GEAR_Hammer
GEAR_HandheldShortwave:GEAR_HandheldShortwave
GEAR_HankHatchCode:GEAR_HankHatchCode
GEAR_HankJournal1:GEAR_HankJournal1
GEAR_HankJournal2:GEAR_HankJournal2
GEAR_HankLockboxKey:GEAR_HankLockboxKey
GEAR_HankNeiceLetter:GEAR_HankNeiceLetter
GEAR_HardCase:GEAR_HardCase
GEAR_HardCase_hangar:GEAR_HardCase_hangar
GEAR_Hardwood:GEAR_Hardwood
GEAR_Hatchet:GEAR_Hatchet
GEAR_HatchetImprovised:GEAR_HatchetImprovised
GEAR_HC_EP1_FM_TreeRoots_Dir:GEAR_HC_EP1_FM_TreeRoots_Dir
GEAR_HC_EP1_ML_AlansCave_Dir:GEAR_HC_EP1_ML_AlansCave_Dir
GEAR_HC_EP1_ML_ClearCut_Dir:GEAR_HC_EP1_ML_ClearCut_Dir
GEAR_HC_EP1_ML_TracksEnt_Dir:GEAR_HC_EP1_ML_TracksEnt_Dir
GEAR_HC_EP1_RW_HunterLodge_Dir:GEAR_HC_EP1_RW_HunterLodge_Dir
GEAR_HC_EP1_RW_RavineEnd_Dir:GEAR_HC_EP1_RW_RavineEnd_Dir
GEAR_HeavyBandage:GEAR_HeavyBandage
GEAR_HeavyParka:GEAR_HeavyParka
GEAR_HeavyWoolSweater:GEAR_HeavyWoolSweater
GEAR_HighQualityTools:GEAR_HighQualityTools
GEAR_HomeMadeSoup:GEAR_HomeMadeSoup
GEAR_Hook:GEAR_Hook
GEAR_HookAndLine:GEAR_HookAndLine
GEAR_ImprovisedHat:GEAR_ImprovisedHat
GEAR_ImprovisedMittens:GEAR_ImprovisedMittens
GEAR_InsulatedBoots:GEAR_InsulatedBoots
GEAR_InsulatedPants:GEAR_InsulatedPants
GEAR_InsulatedVest:GEAR_InsulatedVest
GEAR_Insulin:GEAR_Insulin
GEAR_Jeans:GEAR_Jeans
GEAR_JeremiahKnife:GEAR_JeremiahKnife
GEAR_JeremiahsCoat:GEAR_JeremiahsCoat
GEAR_JerrycanRusty:GEAR_JerrycanRusty
GEAR_KeroseneLampB:GEAR_KeroseneLampB
GEAR_KetchupChips:GEAR_KetchupChips
GEAR_Knife:GEAR_Knife
GEAR_KnifeImprovised:GEAR_KnifeImprovised
GEAR_KnifeScrapMetal:GEAR_KnifeScrapMetal
GEAR_KnowledgeCarterDam:GEAR_KnowledgeCarterDam
GEAR_KnowledgeCollapse1:GEAR_KnowledgeCollapse1
GEAR_KnowledgeCollapse2:GEAR_KnowledgeCollapse2
GEAR_KnowledgeCollapse3:GEAR_KnowledgeCollapse3
GEAR_KnowledgeCollapse4:GEAR_KnowledgeCollapse4
GEAR_KnowledgeMilton:GEAR_KnowledgeMilton
GEAR_KnowledgeMysteryLake:GEAR_KnowledgeMysteryLake
GEAR_KnowledgePVbook1:GEAR_KnowledgePVbook1
GEAR_KnowledgePVbook2:GEAR_KnowledgePVbook2
GEAR_KnowledgePVbook3:GEAR_KnowledgePVbook3
GEAR_LakeCabinKey1:GEAR_LakeCabinKey1
GEAR_LakeCabinKey2:GEAR_LakeCabinKey2
GEAR_LakeCabinKey3:GEAR_LakeCabinKey3
GEAR_LakeDeerHuntNote:GEAR_LakeDeerHuntNote
GEAR_LakeIncidentNote:GEAR_LakeIncidentNote
GEAR_LakeLetter1:GEAR_LakeLetter1
GEAR_LakesFlareCacheNote:GEAR_LakesFlareCacheNote
GEAR_LakeTrailerKey1:GEAR_LakeTrailerKey1
GEAR_LakeWolfCullNote:GEAR_LakeWolfCullNote
GEAR_LampFuel:GEAR_LampFuel
GEAR_LampFuelFull:GEAR_LampFuelFull
GEAR_Leather:GEAR_Leather
GEAR_LeatherDried:GEAR_LeatherDried
GEAR_LeatherHide:GEAR_LeatherHide
GEAR_LeatherHideDried:GEAR_LeatherHideDried
GEAR_LeatherShoes:GEAR_LeatherShoes
GEAR_LeatherStrips:GEAR_LeatherStrips
GEAR_LetterBundle:GEAR_LetterBundle
GEAR_LightParka:GEAR_LightParka
GEAR_LilyClimbMap:GEAR_LilyClimbMap
GEAR_Line:GEAR_Line
GEAR_LongUnderwear:GEAR_LongUnderwear
GEAR_LongUnderwearStart:GEAR_LongUnderwearStart
GEAR_LongUnderwearWool:GEAR_LongUnderwearWool
GEAR_MackinawJacket:GEAR_MackinawJacket
GEAR_MagnifyingLens:GEAR_MagnifyingLens
GEAR_MapleSapling:GEAR_MapleSapling
GEAR_MapleSaplingDried:GEAR_MapleSaplingDried
GEAR_MapleSyrup:GEAR_MapleSyrup
GEAR_MedicalSupplies:GEAR_MedicalSupplies
GEAR_MedicalSupplies_hangar:GEAR_MedicalSupplies_hangar
GEAR_MilitaryParka:GEAR_MilitaryParka
GEAR_MiltonCaveLetter:GEAR_MiltonCaveLetter
GEAR_MiltonDepositBoxKey1:GEAR_MiltonDepositBoxKey1
GEAR_MiltonDepositBoxKey2:GEAR_MiltonDepositBoxKey2
GEAR_MiltonDepositBoxKey3:GEAR_MiltonDepositBoxKey3
GEAR_MiltonFlareGunNote:GEAR_MiltonFlareGunNote
GEAR_MiltonGardenCache:GEAR_MiltonGardenCache
GEAR_MiltonLetter1:GEAR_MiltonLetter1
GEAR_MiltonLetter2:GEAR_MiltonLetter2
GEAR_MiltonParkNotice:GEAR_MiltonParkNotice
GEAR_MiltonPostOfficeCollectible1:GEAR_MiltonPostOfficeCollectible1
GEAR_MiltonStoreNotice:GEAR_MiltonStoreNotice
GEAR_Mittens:GEAR_Mittens
GEAR_MooseHide:GEAR_MooseHide
GEAR_MooseHideBag:GEAR_MooseHideBag
GEAR_MooseHideCloak:GEAR_MooseHideCloak
GEAR_MooseHideDried:GEAR_MooseHideDried
GEAR_MooseQuarter:GEAR_MooseQuarter
GEAR_MountainTownFarmKey:GEAR_MountainTownFarmKey
GEAR_MountainTownFarmNote:GEAR_MountainTownFarmNote
GEAR_MountainTownLockBoxKey:GEAR_MountainTownLockBoxKey
GEAR_MRE:GEAR_MRE
GEAR_MuklukBoots:GEAR_MuklukBoots
GEAR_Newsprint:GEAR_Newsprint
GEAR_NewsprintBootStuffing:GEAR_NewsprintBootStuffing
GEAR_NewsprintInsulation:GEAR_NewsprintInsulation
GEAR_NewsprintRoll:GEAR_NewsprintRoll
GEAR_NoteMCU:GEAR_NoteMCU
GEAR_NULL:GEAR_NULL
GEAR_Nylon:GEAR_Nylon
GEAR_OldLadyStolenItem:GEAR_OldLadyStolenItem
GEAR_OldMansBeardDressing:GEAR_OldMansBeardDressing
GEAR_OldMansBeardHarvested:GEAR_OldMansBeardHarvested
GEAR_PackMatches:GEAR_PackMatches
GEAR_PaperStack:GEAR_PaperStack
GEAR_PassengerManifest:GEAR_PassengerManifest
GEAR_PeanutButter:GEAR_PeanutButter
GEAR_PinnacleCanPeaches:GEAR_PinnacleCanPeaches
GEAR_PlaidShirt:GEAR_PlaidShirt
GEAR_PlaneCrashID1:GEAR_PlaneCrashID1
GEAR_PlaneCrashID10:GEAR_PlaneCrashID10
GEAR_PlaneCrashID2:GEAR_PlaneCrashID2
GEAR_PlaneCrashID3:GEAR_PlaneCrashID3
GEAR_PlaneCrashID4:GEAR_PlaneCrashID4
GEAR_PlaneCrashID5:GEAR_PlaneCrashID5
GEAR_PlaneCrashID6:GEAR_PlaneCrashID6
GEAR_PlaneCrashID7:GEAR_PlaneCrashID7
GEAR_PlaneCrashID8:GEAR_PlaneCrashID8
GEAR_PlaneCrashID9:GEAR_PlaneCrashID9
GEAR_PlantSurvivalNote:GEAR_PlantSurvivalNote
GEAR_PostCard_AC_CentralSpire:GEAR_PostCard_AC_CentralSpire
GEAR_PostCard_AC_TopShelf:GEAR_PostCard_AC_TopShelf
GEAR_PostCard_BI_EchoOne-RadioTower:GEAR_PostCard_BI_EchoOne-RadioTower
GEAR_PostCard_CR_AbandonedLookout:GEAR_PostCard_CR_AbandonedLookout
GEAR_PostCard_FM_MuskegOverlook:GEAR_PostCard_FM_MuskegOverlook
GEAR_PostCard_FM_ShortwaveTower:GEAR_PostCard_FM_ShortwaveTower
GEAR_PostCard_ML_ForestryLookout:GEAR_PostCard_ML_ForestryLookout
GEAR_PostCard_ML_LakeOverlook:GEAR_PostCard_ML_LakeOverlook
GEAR_PostCard_MT_RadioTower:GEAR_PostCard_MT_RadioTower
GEAR_PostCard_PV_SignalHill:GEAR_PostCard_PV_SignalHill
GEAR_PostCard_RV_Pensive:GEAR_PostCard_RV_Pensive
GEAR_PostCard_TM_AndresPeak:GEAR_PostCard_TM_AndresPeak
GEAR_PostCard_TM_TailSection:GEAR_PostCard_TM_TailSection
GEAR_PremiumWinterCoat:GEAR_PremiumWinterCoat
GEAR_PrisonBusNote:GEAR_PrisonBusNote
GEAR_Prybar:GEAR_Prybar
GEAR_QualityWinterCoat:GEAR_QualityWinterCoat
GEAR_RabbitCarcass:GEAR_RabbitCarcass
GEAR_RabbitPelt:GEAR_RabbitPelt
GEAR_RabbitPeltDried:GEAR_RabbitPeltDried
GEAR_RabbitskinHat:GEAR_RabbitskinHat
GEAR_RabbitSkinMittens:GEAR_RabbitSkinMittens
GEAR_RadioParts:GEAR_RadioParts
GEAR_RawMeatBear:GEAR_RawMeatBear
GEAR_RawMeatDeer:GEAR_RawMeatDeer
GEAR_RawMeatMoose:GEAR_RawMeatMoose
GEAR_RawMeatRabbit:GEAR_RawMeatRabbit
GEAR_RawMeatWolf:GEAR_RawMeatWolf
GEAR_ReclaimedWoodB:GEAR_ReclaimedWoodB
GEAR_RecycledCan:GEAR_RecycledCan
GEAR_ReishiMushroom:GEAR_ReishiMushroom
GEAR_ReishiPrepared:GEAR_ReishiPrepared
GEAR_ReishiTea:GEAR_ReishiTea
GEAR_Revolver:GEAR_Revolver
GEAR_RevolverAmmoBox:GEAR_RevolverAmmoBox
GEAR_RevolverAmmoCasing:GEAR_RevolverAmmoCasing
GEAR_RevolverAmmoSingle:GEAR_RevolverAmmoSingle
GEAR_Rifle:GEAR_Rifle
GEAR_RifleAmmoBox:GEAR_RifleAmmoBox
GEAR_RifleAmmoCasing:GEAR_RifleAmmoCasing
GEAR_RifleAmmoSingle:GEAR_RifleAmmoSingle
GEAR_RifleCleaningKit:GEAR_RifleCleaningKit
GEAR_RifleHuntingLodge:GEAR_RifleHuntingLodge
GEAR_Rope:GEAR_Rope
GEAR_RoseHip:GEAR_RoseHip
GEAR_RosehipsPrepared:GEAR_RosehipsPrepared
GEAR_RoseHipTea:GEAR_RoseHipTea
GEAR_RuralRegionFarmKey:GEAR_RuralRegionFarmKey
GEAR_ScrapLead:GEAR_ScrapLead
GEAR_ScrapMetal:GEAR_ScrapMetal
GEAR_SewingKit:GEAR_SewingKit
GEAR_SharpeningStone:GEAR_SharpeningStone
GEAR_ShedCodeNote:GEAR_ShedCodeNote
GEAR_Shovel:GEAR_Shovel
GEAR_SimpleTools:GEAR_SimpleTools
GEAR_SkiBoots:GEAR_SkiBoots
GEAR_SkiGloves:GEAR_SkiGloves
GEAR_SkiJacket:GEAR_SkiJacket
GEAR_Snare:GEAR_Snare
GEAR_Soda:GEAR_Soda
GEAR_SodaEnergy:GEAR_SodaEnergy
GEAR_SodaGrape:GEAR_SodaGrape
GEAR_SodaOrange:GEAR_SodaOrange
GEAR_Softwood:GEAR_Softwood
GEAR_SpearHead:GEAR_SpearHead
GEAR_SprayPaintCan:GEAR_SprayPaintCan
GEAR_SprayPaintCanGlyphA:GEAR_SprayPaintCanGlyphA
GEAR_StagQuarter:GEAR_StagQuarter
GEAR_Stick:GEAR_Stick
GEAR_Stone:GEAR_Stone
GEAR_StumpRemover:GEAR_StumpRemover
GEAR_SurvivalSchoolClothing:GEAR_SurvivalSchoolClothing
GEAR_SurvivalSchoolDeerHunt:GEAR_SurvivalSchoolDeerHunt
GEAR_SurvivalSchoolFishing:GEAR_SurvivalSchoolFishing
GEAR_SurvivalSchoolPlants:GEAR_SurvivalSchoolPlants
GEAR_SurvivalSchoolRabbits:GEAR_SurvivalSchoolRabbits
GEAR_SurvivalSchoolWolfHunt:GEAR_SurvivalSchoolWolfHunt
GEAR_TechnicalBackpack:GEAR_TechnicalBackpack
GEAR_TeeShirt:GEAR_TeeShirt
GEAR_TimberwolfQuarter:GEAR_TimberwolfQuarter
GEAR_Tinder:GEAR_Tinder
Gear_TomatoSoupCan:Gear_TomatoSoupCan
GEAR_Toque:GEAR_Toque
GEAR_Torch:GEAR_Torch
GEAR_TrailerSupplies:GEAR_TrailerSupplies
GEAR_TransponderParts:GEAR_TransponderParts
GEAR_UtilitiesBill:GEAR_UtilitiesBill
GEAR_Water1000ml:GEAR_Water1000ml
GEAR_Water500ml:GEAR_Water500ml
GEAR_WaterPurificationTablets:GEAR_WaterPurificationTablets
GEAR_WaterSupplyNotPotable:GEAR_WaterSupplyNotPotable
GEAR_WaterSupplyPotable:GEAR_WaterSupplyPotable
GEAR_WaterTowerNote:GEAR_WaterTowerNote
GEAR_WillBoots:GEAR_WillBoots
GEAR_WillBootsStart:GEAR_WillBootsStart
GEAR_WillPants:GEAR_WillPants
GEAR_WillPantsStart:GEAR_WillPantsStart
GEAR_WillParka:GEAR_WillParka
GEAR_WillParkaHangar:GEAR_WillParkaHangar
GEAR_WillParka_Table:GEAR_WillParka_Table
GEAR_WillParka_Tossed:GEAR_WillParka_Tossed
GEAR_WillShirt:GEAR_WillShirt
GEAR_WillShirtStart:GEAR_WillShirtStart
GEAR_WillSweater:GEAR_WillSweater
GEAR_WillSweaterStart:GEAR_WillSweaterStart
GEAR_WillToque:GEAR_WillToque
GEAR_WolfCarcass:GEAR_WolfCarcass
GEAR_WolfPelt:GEAR_WolfPelt
GEAR_WolfPeltDried:GEAR_WolfPeltDried
GEAR_WolfQuarter:GEAR_WolfQuarter
GEAR_WolfSkinCape:GEAR_WolfSkinCape
GEAR_WolfSkinCapeTallTales:GEAR_WolfSkinCapeTallTales
GEAR_WoodMatches:GEAR_WoodMatches
GEAR_WoolShirt:GEAR_WoolShirt
GEAR_WoolSocks:GEAR_WoolSocks
GEAR_WoolSweater:GEAR_WoolSweater
GEAR_WoolWrap:GEAR_WoolWrap
GEAR_WoolWrapCap:GEAR_WoolWrapCap
GEAR_WorkBoots:GEAR_WorkBoots
GEAR_WorkGloves:GEAR_WorkGloves
GEAR_WorkPants:GEAR_WorkPants
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>800080</Color>
                  <VariableType>String</VariableType>
                  <Length>128</Length>
                  <Unicode>1</Unicode>
                  <CodePage>0</CodePage>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>item_spawn_string+14</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>8708</ID>
          <Description>"Fire"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>C08000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8686</ID>
              <Description>"Campfire Tick"</Description>
              <Options moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-27
  Author : sub1to

}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(code_temp)
label(fire_burn_hook)
label(fire_burn_bytes)
label(fire_burn_base_ptr)
label(fire_burn_infinite_toggle)
label(fire_burn_temp_toggle)
label(fire_burn_temp_value)
registersymbol(fire_burn_hook)
registersymbol(fire_burn_bytes)
registersymbol(fire_burn_base_ptr)
registersymbol(fire_burn_infinite_toggle)
registersymbol(fire_burn_temp_toggle)
registersymbol(fire_burn_temp_value)
aobScanModule(hook,GameAssembly.dll,f3 0f 10 b3 ? ? ? ? 33 c9 e8 ? ? ? ? 45 33 c0)

newmem:
fire_burn_bytes:
  //movss xmm6,[rbx+000000B8]
  readMem(hook, 8)
  jmp returnhere

fire_burn_base_ptr:
  dq 0

fire_burn_infinite_toggle:
  db 0

fire_burn_temp_toggle:
  db 0

fire_burn_temp_value:
  dd (float)80

code:
  mov [fire_burn_base_ptr], rbx

  cmp byte ptr [fire_burn_infinite_toggle], 0
  jz code_temp
  mov qword ptr [rbx+BC], 0

code_temp:
  cmp byte ptr [fire_burn_temp_toggle], 0
  jz fire_burn_bytes
  mov ecx, [fire_burn_temp_value]
  mov [rbx+D0], ecx

  jmp fire_burn_bytes

hook:
fire_burn_hook:
  jmp code
  nop
  nop
  nop
  returnhere:



[DISABLE]
fire_burn_hook:
  //db F3 0F 10 B3 B8 00 00 00
  readMem(fire_burn_bytes, 8)

unregistersymbol(fire_burn_hook)
unregistersymbol(fire_burn_bytes)
unregistersymbol(fire_burn_base_ptr)
unregistersymbol(fire_burn_infinite_toggle)
unregistersymbol(fire_burn_temp_toggle)
unregistersymbol(fire_burn_temp_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+1198427

"GameAssembly.dll"+11983FC: 83 BB 80 00 00 00 00     -  cmp dword ptr [rbx+00000080],00
"GameAssembly.dll"+1198403: 0F 84 2E 03 00 00        -  je GameAssembly.dll+1198737
"GameAssembly.dll"+1198409: 33 D2                    -  xor edx,edx
"GameAssembly.dll"+119840B: 48 8B CB                 -  mov rcx,rbx
"GameAssembly.dll"+119840E: E8 AD 3C 00 00           -  call GameAssembly.dll+119C0C0
"GameAssembly.dll"+1198413: 80 7B 21 00              -  cmp byte ptr [rbx+21],00
"GameAssembly.dll"+1198417: 0F 85 8B 00 00 00        -  jne GameAssembly.dll+11984A8
"GameAssembly.dll"+119841D: 33 D2                    -  xor edx,edx
"GameAssembly.dll"+119841F: 48 8B CB                 -  mov rcx,rbx
"GameAssembly.dll"+1198422: E8 B9 3F 00 00           -  call GameAssembly.dll+119C3E0
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+1198427: F3 0F 10 B3 B8 00 00 00  -  movss xmm6,[rbx+000000B8]
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+119842F: 33 C9                    -  xor ecx,ecx
"GameAssembly.dll"+1198431: E8 2A 3E 88 01           -  call GameAssembly.dll+2A1C260
"GameAssembly.dll"+1198436: 45 33 C0                 -  xor r8d,r8d
"GameAssembly.dll"+1198439: 0F 28 C8                 -  movaps xmm1,xmm0
"GameAssembly.dll"+119843C: 48 8B CB                 -  mov rcx,rbx
"GameAssembly.dll"+119843F: E8 2C FC FF FF           -  call GameAssembly.dll+1198070
"GameAssembly.dll"+1198444: F3 0F 58 C6              -  addss xmm0,xmm6
"GameAssembly.dll"+1198448: F3 0F 11 83 B8 00 00 00  -  movss [rbx+000000B8],xmm0
"GameAssembly.dll"+1198450: F3 0F 10 B3 BC 00 00 00  -  movss xmm6,[rbx+000000BC]
"GameAssembly.dll"+1198458: 48 8B 0D 21 1C 2F 03     -  mov rcx,[GameAssembly.dll+448A080]
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8694</ID>
                  <Description>"Infinite Burn Time"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
fire_burn_infinite_toggle:
  db 01

[DISABLE]
fire_burn_infinite_toggle:
  db 00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8705</ID>
                  <Description>"Set Temperature (Requires fuel to activate/sync)"</Description>
                  <LastState/>
                  <Color>800080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
fire_burn_temp_toggle:
  db 01

[DISABLE]
fire_burn_temp_toggle:
  db 00
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>8706</ID>
                      <Description>"Temp"</Description>
                      <Color>800080</Color>
                      <VariableType>Float</VariableType>
                      <Address>fire_burn_temp_value</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>8688</ID>
                  <Description>"m_EmberDurationSecondsTOD"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>fire_burn_base_ptr</Address>
                  <Offsets>
                    <Offset>0xB0</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8687</ID>
                  <Description>"m_EmberTimer"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>fire_burn_base_ptr</Address>
                  <Offsets>
                    <Offset>0xB4</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8689</ID>
                  <Description>"m_ElapsedOnTODSeconds"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>fire_burn_base_ptr</Address>
                  <Offsets>
                    <Offset>0xBC</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8690</ID>
                  <Description>"m_ElapsedOnTODSecondsUnmodified"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>fire_burn_base_ptr</Address>
                  <Offsets>
                    <Offset>c0</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8691</ID>
                  <Description>"m_MaxOnTODSeconds"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>fire_burn_base_ptr</Address>
                  <Offsets>
                    <Offset>0xC4</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8692</ID>
                  <Description>"m_FuelHeatIncrease"</Description>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>fire_burn_base_ptr</Address>
                  <Offsets>
                    <Offset>D0</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>8891</ID>
          <Description>"Weather / Time"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>C08000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8892</ID>
              <Description>"UniStormWeatherSystem"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-27
  Author : sub1to

}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(weather_hook)
label(weather_bytes)
label(weather_base_ptr)
registersymbol(weather_hook)
registersymbol(weather_bytes)
registersymbol(weather_base_ptr)

//  class: UniStormWeatherSystem
//  RVA: 0xDE5D00 Offset: 0xDE4B00 VA: 0x180DE5D00
//	public void Update() { }
aobScanModule(hook,GameAssembly.dll,48 8b c4 48 89 48 ? 53 56 57 41 54 41 55 41 56 41 57 48 81 ec ? ? ? ? 0f 29 70 ? 0f 29 78 ? 44 0f 29 40 ? 44 0f 29 48 ? 44 0f 29 90 ? ? ? ? 44 0f 29 98 ? ? ? ? 44 0f 29 a0 ? ? ? ? 44 0f 29 a8 ? ? ? ? 44 0f 29 b0 ? ? ? ? 44 0f 29 b8 ? ? ? ? 48 8b d9)

newmem:
weather_bytes:
  //push rbp
  //push r15
  //lea rbp,[rsp-00000128]
  readMem(hook, 7)
  jmp returnhere

weather_base_ptr:
  dq 0

code:
  mov [weather_base_ptr], rcx
  jmp weather_bytes

hook:
weather_hook:
  jmp code
  nop
  nop
  returnhere:



[DISABLE]
weather_hook:
  //movss [rbp+60],xmm8
  //db 40 55 41 57 48 8D AC 24 D8 FE FF FF
  readMem(weather_bytes, 7)

unregistersymbol(weather_hook)
unregistersymbol(weather_bytes)
unregistersymbol(weather_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+DE5D00

GameAssembly.dll+DE5CF6: CC                    - int 3
GameAssembly.dll+DE5CF7: CC                    - int 3
GameAssembly.dll+DE5CF8: CC                    - int 3
GameAssembly.dll+DE5CF9: CC                    - int 3
GameAssembly.dll+DE5CFA: CC                    - int 3
GameAssembly.dll+DE5CFB: CC                    - int 3
GameAssembly.dll+DE5CFC: CC                    - int 3
GameAssembly.dll+DE5CFD: CC                    - int 3
GameAssembly.dll+DE5CFE: CC                    - int 3
GameAssembly.dll+DE5CFF: CC                    - int 3
// ---------- INJECTING HERE ----------
GameAssembly.dll+DE5D00: 48 8B C4              - mov rax,rsp
// ---------- DONE INJECTING  ----------
GameAssembly.dll+DE5D03: 48 89 48 08           - mov [rax+08],rcx
GameAssembly.dll+DE5D07: 53                    - push rbx
GameAssembly.dll+DE5D08: 56                    - push rsi
GameAssembly.dll+DE5D09: 57                    - push rdi
GameAssembly.dll+DE5D0A: 41 54                 - push r12
GameAssembly.dll+DE5D0C: 41 55                 - push r13
GameAssembly.dll+DE5D0E: 41 56                 - push r14
GameAssembly.dll+DE5D10: 41 57                 - push r15
GameAssembly.dll+DE5D12: 48 81 EC 60 02 00 00  - sub rsp,00000260
GameAssembly.dll+DE5D19: 0F 29 70 B8           - movaps [rax-48],xmm6
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>9030</ID>
                  <Description>"Weather Stage"</Description>
                  <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:DenseFog
1:LightSnow
2:HeavySnow
3:PartlyCloudy
4:Clear
5:Cloudy
6:LightFog
7:Blizzard
8:ClearAurora
9:ToxicFog
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>weather_base_ptr</Address>
                  <Offsets>
                    <Offset>0xDC</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>9029</ID>
                  <Description>"Minute Counter"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>weather_base_ptr</Address>
                  <Offsets>
                    <Offset>0x70</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8897</ID>
                  <Description>"Hour Counter"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>weather_base_ptr</Address>
                  <Offsets>
                    <Offset>0x74</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8898</ID>
                  <Description>"Day Counter"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>weather_base_ptr</Address>
                  <Offsets>
                    <Offset>0x78</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8899</ID>
                  <Description>"Temperature"</Description>
                  <ShowAsSigned>1</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>weather_base_ptr</Address>
                  <Offsets>
                    <Offset>0x7C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8900</ID>
                  <Description>"Day Length"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>weather_base_ptr</Address>
                  <Offsets>
                    <Offset>0x80</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>8901</ID>
                  <Description>"Normalized Time (use to set time of day)"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>weather_base_ptr</Address>
                  <Offsets>
                    <Offset>84</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>9026</ID>
                  <Description>"Fog Density"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>808080</Color>
                  <VariableType>Float</VariableType>
                  <Address>weather_base_ptr</Address>
                  <Offsets>
                    <Offset>0x144</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>8912</ID>
              <Description>"TimeOfDay"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-27
  Author : sub1to
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(time_of_day_hook)
label(time_of_day_bytes)
label(time_of_day_base_ptr)
registersymbol(time_of_day_hook)
registersymbol(time_of_day_bytes)
registersymbol(time_of_day_base_ptr)

//  class: TimeOfDay
//  RVA: 0x1C34E90 Offset: 0x1C33A90 VA: 0x7FFB68B34E90
//  public void Update() { }
aobScanModule(hook,GameAssembly.dll,48 89 5c 24 ? 48 89 6c 24 ? 48 89 74 24 ? 57 48 83 ec ? 80 3d ? ? ? ? ? 48 8b d9 75 ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? c6 05 ? ? ? ? ? 48 8b 15)

newmem:
time_of_day_bytes:
  readMem(hook, 5)
  jmp returnhere

time_of_day_base_ptr:
  dq 0

code:
  mov [time_of_day_base_ptr], rcx

  jmp time_of_day_bytes

hook:
time_of_day_hook:
  jmp code
  returnhere:



[DISABLE]
time_of_day_hook:
  readMem(time_of_day_bytes, 5)

unregistersymbol(time_of_day_hook)
unregistersymbol(time_of_day_bytes)
unregistersymbol(time_of_day_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+693820

GameAssembly.dll+69380B: E8 D0 7F C7 FF        - call GameAssembly.DllCanUnloadNow+26A0
GameAssembly.dll+693810: 48 8B C8              - mov rcx,rax
GameAssembly.dll+693813: 33 D2                 - xor edx,edx
GameAssembly.dll+693815: E8 C6 61 C7 FF        - call GameAssembly.DllCanUnloadNow+8A0
GameAssembly.dll+69381A: CC                    - int 3
GameAssembly.dll+69381B: CC                    - int 3
GameAssembly.dll+69381C: CC                    - int 3
GameAssembly.dll+69381D: CC                    - int 3
GameAssembly.dll+69381E: CC                    - int 3
GameAssembly.dll+69381F: CC                    - int 3
// ---------- INJECTING HERE ----------
GameAssembly.dll+693820: 48 89 5C 24 08        - mov [rsp+08],rbx
// ---------- DONE INJECTING  ----------
GameAssembly.dll+693825: 48 89 6C 24 10        - mov [rsp+10],rbp
GameAssembly.dll+69382A: 48 89 74 24 18        - mov [rsp+18],rsi
GameAssembly.dll+69382F: 57                    - push rdi
GameAssembly.dll+693830: 48 83 EC 30           - sub rsp,30
GameAssembly.dll+693834: 80 3D 3B 0C 1B 04 00  - cmp byte ptr [GameAssembly.dll+4844476],00
GameAssembly.dll+69383B: 48 8B D9              - mov rbx,rcx
GameAssembly.dll+69383E: 75 2B                 - jne GameAssembly.dll+69386B
GameAssembly.dll+693840: 48 8D 0D F1 48 FC 03  - lea rcx,[GameAssembly.dll+4658138]
GameAssembly.dll+693847: E8 04 C6 CD FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+69384C: 48 8D 0D ED AA FD 03  - lea rcx,[GameAssembly.dll+466E340]
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>8914</ID>
                  <Description>"Day Length Scale"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>FF8080</Color>
                  <VariableType>Float</VariableType>
                  <Address>time_of_day_base_ptr</Address>
                  <Offsets>
                    <Offset>90</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>9035</ID>
              <Description>"Weather Override"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-27
  Author : sub1to
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(weather_stage_hook)
label(weather_stage_bytes)
label(weather_stage_value)
registersymbol(weather_stage_hook)
registersymbol(weather_stage_bytes)
registersymbol(weather_stage_value)

//  class: UniStormWeatherSystem
//  RVA: 0x19A01B0 Offset: 0x199F1B0 VA: 0x7FFB0D3701B0
//  public void SetWeatherStateAndBlendDirectly(WeatherStage ws, WeatherStage prevWS, float elapsedGameTimeInStage, float transitionGameTimeForStage)
aobScanModule(hook,GameAssembly.dll,48 89 5c 24 ? 48 89 74 24 ? 57 48 83 ec ? 80 3d ? ? ? ? ? 41 8b f0 0f 29 7c 24)

newmem:
weather_stage_bytes:
  readMem(hook, 5)
  jmp returnhere

weather_stage_value:
  db FF

code:

  movzx eax, byte ptr [weather_stage_value]
  cmp al, FF
  jz weather_stage_bytes
  mov rdx, eax

  jmp weather_stage_bytes

hook:
weather_stage_hook:
  jmp code
  returnhere:



[DISABLE]
weather_stage_hook:
  readMem(weather_stage_bytes, 5)

unregistersymbol(weather_stage_hook)
unregistersymbol(weather_stage_bytes)
unregistersymbol(weather_stage_value)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+DEB910

GameAssembly.dll+DEB8F7: 33 D2                 - xor edx,edx
GameAssembly.dll+DEB8F9: 48 8B C8              - mov rcx,rax
GameAssembly.dll+DEB8FC: E8 9F 51 D5 FF        - call GameAssembly.dll+B40AA0
GameAssembly.dll+DEB901: E9 5B FF FF FF        - jmp GameAssembly.dll+DEB861
GameAssembly.dll+DEB906: E8 25 D4 4F FF        - call GameAssembly.il2cpp_value_box+50
GameAssembly.dll+DEB90B: CC                    - int 3
GameAssembly.dll+DEB90C: CC                    - int 3
GameAssembly.dll+DEB90D: CC                    - int 3
GameAssembly.dll+DEB90E: CC                    - int 3
GameAssembly.dll+DEB90F: CC                    - int 3
// ---------- INJECTING HERE ----------
GameAssembly.dll+DEB910: 48 89 5C 24 08        - mov [rsp+08],rbx
// ---------- DONE INJECTING  ----------
GameAssembly.dll+DEB915: 48 89 74 24 10        - mov [rsp+10],rsi
GameAssembly.dll+DEB91A: 57                    - push rdi
GameAssembly.dll+DEB91B: 48 83 EC 40           - sub rsp,40
GameAssembly.dll+DEB91F: 80 3D 0D B6 A5 03 00  - cmp byte ptr [GameAssembly.dll+4846F33],00
GameAssembly.dll+DEB926: 41 8B F0              - mov esi,r8d
GameAssembly.dll+DEB929: 0F 29 7C 24 20        - movaps [rsp+20],xmm7
GameAssembly.dll+DEB92E: 8B DA                 - mov ebx,edx
GameAssembly.dll+DEB930: 0F 28 FB              - movaps xmm7,xmm3
GameAssembly.dll+DEB933: 48 8B F9              - mov rdi,rcx
GameAssembly.dll+DEB936: 75 13                 - jne GameAssembly.dll+DEB94B
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>9028</ID>
                  <Description>"Weather"</Description>
                  <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:DenseFog
1:LightSnow
2:HeavySnow
3:PartlyCloudy
4:Clear
5:Cloudy
6:LightFog
7:Blizzard
8:ClearAurora
9:ToxicFog
255:None
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>800080</Color>
                  <VariableType>Byte</VariableType>
                  <Address>weather_stage_value</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>9092</ID>
          <Description>"Misc"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>C08000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8976</ID>
              <Description>"Craft Anything Anywhere In 1 Minute (Gotta reload to undo)"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-08-27
  Author : sub1to

}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(blueprint_item_can_craft_blueprint_hook)
label(blueprint_item_can_craft_blueprint_bytes)
registersymbol(blueprint_item_can_craft_blueprint_hook)
registersymbol(blueprint_item_can_craft_blueprint_bytes)
aobScanModule(hook,GameAssembly.dll,8b 4e ? 3b c8 74)

newmem:
blueprint_item_can_craft_blueprint_bytes:
  //mov eax,[rsi+64]
  //cmp eax,edi
  readMem(hook, 5)
  jmp returnhere

code:
  xor rax, rax

  //CraftingLocation.Anywhere
  //public CraftingLocation m_RequiredCraftingLocation; // 0x78
  mov [rsi+78], eax

  //public bool m_RequiresLitFire; // 0x7C
  mov [rsi+7c], al

  //Remove required tools
  //public ToolsItem m_RequiredTool; // 0x20
  mov [rsi+20], rax

  //public float m_KeroseneLitersRequired; // 0x60
  //public float m_GunpowderKGRequired; // 0x64
  mov [rsi+60], rax

  //required gear amount
  //public BlueprintData.RequiredGearItem[] m_RequiredGear; // 0x18
  mov rcx, [rsi+18]
  mov [rcx+18], eax

  //public int m_DurationMinutes; // 0x54
  mov ecx, 1
  mov [rsi+54], ecx

  jmp blueprint_item_can_craft_blueprint_bytes

hook:
blueprint_item_can_craft_blueprint_hook:
  jmp code
  returnhere:



[DISABLE]
blueprint_item_can_craft_blueprint_hook:
  //8B 46 64 3B C7
  readMem(blueprint_item_can_craft_blueprint_bytes, 5)

unregistersymbol(blueprint_item_can_craft_blueprint_hook)
unregistersymbol(blueprint_item_can_craft_blueprint_bytes)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+127D86C

GameAssembly.dll+127D846: FF 15 E4 D8 ED 02     - call qword ptr [GameAssembly.dll+415B130]
GameAssembly.dll+127D84C: 90                    - nop
GameAssembly.dll+127D84D: C6 05 96 5A 1D 03 01  - mov byte ptr [GameAssembly.dll+44532EA],01
GameAssembly.dll+127D854: 48 85 DB              - test rbx,rbx
GameAssembly.dll+127D857: 74 13                 - je GameAssembly.dll+127D86C
GameAssembly.dll+127D859: 4C 8B C3              - mov r8,rbx
GameAssembly.dll+127D85C: 48 8B 15 9D B9 26 03  - mov rdx,[GameAssembly.dll+44E9200]
GameAssembly.dll+127D863: 33 C9                 - xor ecx,ecx
GameAssembly.dll+127D865: E8 A6 29 D9 FE        - call GameAssembly.il2cpp_class_get_static_field_data+30
GameAssembly.dll+127D86A: 8B F8                 - mov edi,eax
// ---------- INJECTING HERE ----------
GameAssembly.dll+127D86C: 8B 46 64              - mov eax,[rsi+64]
GameAssembly.dll+127D86F: 3B C7                 - cmp eax,edi
// ---------- DONE INJECTING  ----------
GameAssembly.dll+127D871: 74 04                 - je GameAssembly.dll+127D877
GameAssembly.dll+127D873: 85 C0                 - test eax,eax
GameAssembly.dll+127D875: 75 4B                 - jne GameAssembly.dll+127D8C2
GameAssembly.dll+127D877: 33 D2                 - xor edx,edx
GameAssembly.dll+127D879: 48 8B CE              - mov rcx,rsi
GameAssembly.dll+127D87C: E8 5F 00 00 00        - call GameAssembly.dll+127D8E0
GameAssembly.dll+127D881: 84 C0                 - test al,al
GameAssembly.dll+127D883: 74 3D                 - je GameAssembly.dll+127D8C2
GameAssembly.dll+127D885: 33 D2                 - xor edx,edx
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>9087</ID>
              <Description>"Misc Actions"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-09-03
  Author : sub1to
}

[ENABLE]
alloc(newmem,$1000,GameAssembly.dll)
label(returnhere)
label(code)
label(code_save)
label(code_feat_unlock)
label(code_recipe_unlock)
label(code_achievement_unlock)
label(code_fly)
label(gamemanager_update_hook)
label(gamemanager_update_bytes)
label(game_update_save_toggle)
label(game_update_feat_unlock_toggle)
label(game_update_recipe_unlock_toggle)
label(game_update_achievement_unlock_toggle)
label(game_update_fly_toggle)
registersymbol(gamemanager_update_hook)
registersymbol(gamemanager_update_bytes)
registersymbol(game_update_save_toggle)
registersymbol(game_update_feat_unlock_toggle)
registersymbol(game_update_recipe_unlock_toggle)
registersymbol(game_update_achievement_unlock_toggle)
registersymbol(game_update_fly_toggle)

//  GameManager::Update()
aobScanModule(hook,GameAssembly.dll,48 8b 05 ? ? ? ? 33 f6 48 89 74 24 ? 48 85 c0 75 ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 85 c0 0f 84 ? ? ? ? 48 89 05 ? ? ? ? ff d0 48 8b 0d)

define(hook_offset, 105)
ASSERT(hook-hook_offset,48 89 74 24)

// ConsoleManager::CONSOLE_save
aobScanModule(CONSOLE_save,GameAssembly.dll,48 83 ec ? 80 3d ? ? ? ? ? 75 ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? c6 05 ? ? ? ? ? 48 8b 0d ? ? ? ? 48 c7 44 24 ? ? ? ? ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? 33 c9 e8 ? ? ? ? 48 8b 0d ? ? ? ? 83 b9)

// ConsoleManager::CONSOLE_feat_unlock_all
aobScanModule(CONSOLE_feat_unlock_all,GameAssembly.dll,48 89 5c 24 ? 56 57 41 56 48 83 ec ? 0f 29 74 24 ? 80 3d)

// ConsoleManager::CONSOLE_recipe_unlock_all
aobScanModule(CONSOLE_recipe_unlock_all,GameAssembly.dll,40 53 48 83 ec ? 80 3d ? ? ? ? ? 75 ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? c6 05 ? ? ? ? ? 80 3d)

// ConsoleManager::CONSOLE_achievement_unlock
aobScanModule(CONSOLE_achievement_unlock,GameAssembly.dll,40 53 56 57 48 83 ec ? 80 3d ? ? ? ? ? 75 ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d)

//ConsoleManager::CONSOLE_fly
aobScanModule(CONSOLE_fly,GameAssembly.dll,48 83 ec ? 80 3d ? ? ? ? ? 75 ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 8d 0d ? ? ? ? e8 ? ? ? ? c6 05 ? ? ? ? ? 48 8b 05 ? ? ? ? 48 8b 88 ? ? ? ? 80 39)


newmem:
gamemanager_update_bytes:
  readMem(hook-hook_offset, 5)
  jmp returnhere

game_update_save_toggle:
  db 0

game_update_feat_unlock_toggle:
  db 0

game_update_recipe_unlock_toggle:
  db 0

game_update_achievement_unlock_toggle:
  db 0

game_update_fly_toggle:
  db 0

code:
code_save:
  cmp byte ptr [game_update_save_toggle], 0
  jz code_feat_unlock
  mov byte ptr [game_update_save_toggle], 0

  // save game
  lea rsp, [rsp-28]
  mov [rsp+20], rcx
  call CONSOLE_save
  mov rcx, [rsp+20]
  lea rsp, [rsp+28]

code_feat_unlock:
  cmp byte ptr [game_update_feat_unlock_toggle], 0
  jz code_recipe_unlock
  mov byte ptr [game_update_feat_unlock_toggle], 0

  // unlock all feats
  lea rsp, [rsp-28]
  mov [rsp+20], rcx
  call CONSOLE_feat_unlock_all
  mov rcx, [rsp+20]
  lea rsp, [rsp+28]

code_recipe_unlock:
  cmp byte ptr [game_update_recipe_unlock_toggle], 0
  jz code_achievement_unlock
  mov byte ptr [game_update_recipe_unlock_toggle], 0

  // unlock all recipes
  lea rsp, [rsp-28]
  mov [rsp+20], rcx
  call CONSOLE_recipe_unlock_all
  mov rcx, [rsp+20]
  lea rsp, [rsp+28]

code_achievement_unlock:
  cmp byte ptr [game_update_achievement_unlock_toggle], 0
  jz code_fly
  mov byte ptr [game_update_achievement_unlock_toggle], 0

  // unlock all achievements
  lea rsp, [rsp-28]
  mov [rsp+20], rcx
  call CONSOLE_achievement_unlock
  mov rcx, [rsp+20]
  lea rsp, [rsp+28]

code_fly:
  cmp byte ptr [game_update_fly_toggle], 0
  jz gamemanager_update_bytes
  mov byte ptr [game_update_fly_toggle], 0

  // fly
  lea rsp, [rsp-28]
  mov [rsp+20], rcx
  call CONSOLE_fly
  mov rcx, [rsp+20]
  lea rsp, [rsp+28]

  jmp gamemanager_update_bytes

hook-hook_offset:
gamemanager_update_hook:
  jmp code
  returnhere:

[DISABLE]
gamemanager_update_hook:
  readMem(gamemanager_update_bytes, 5)

unregistersymbol(gamemanager_update_hook)
unregistersymbol(gamemanager_update_bytes)
unregistersymbol(game_update_save_toggle)
unregistersymbol(game_update_feat_unlock_toggle)
unregistersymbol(game_update_recipe_unlock_toggle)
unregistersymbol(game_update_achievement_unlock_toggle)
unregistersymbol(game_update_fly_toggle)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: gamemanager_update_hook

GameAssembly.dll+B64662: E8 79 53 7A FF        - call GameAssembly.DllCanUnloadNow+8A0
GameAssembly.dll+B64667: CC                    - int 3
GameAssembly.dll+B64668: CC                    - int 3
GameAssembly.dll+B64669: CC                    - int 3
GameAssembly.dll+B6466A: CC                    - int 3
GameAssembly.dll+B6466B: CC                    - int 3
GameAssembly.dll+B6466C: CC                    - int 3
GameAssembly.dll+B6466D: CC                    - int 3
GameAssembly.dll+B6466E: CC                    - int 3
GameAssembly.dll+B6466F: CC                    - int 3
// ---------- INJECTING HERE ----------
gamemanager_update_hook: 48 89 74 24 10        - mov [rsp+10],rsi
// ---------- DONE INJECTING  ----------
GameAssembly.dll+B64675: 57                    - push rdi
GameAssembly.dll+B64676: 48 83 EC 50           - sub rsp,50
GameAssembly.dll+B6467A: 80 3D C5 19 CE 03 00  - cmp byte ptr [GameAssembly.dll+4846046],00
GameAssembly.dll+B64681: 48 8B F9              - mov rdi,rcx
GameAssembly.dll+B64684: 0F 85 DF 00 00 00     - jne GameAssembly.dll+B64769
GameAssembly.dll+B6468A: 48 8D 0D D7 55 B0 03  - lea rcx,[GameAssembly.dll+4669C68]
GameAssembly.dll+B64691: E8 BA B7 80 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+B64696: 48 8D 0D 1B 73 AC 03  - lea rcx,[GameAssembly.dll+462B9B8]
GameAssembly.dll+B6469D: E8 AE B7 80 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+B646A2: 48 8D 0D 37 3C A7 03  - lea rcx,[GameAssembly.dll+45D82E0]
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>9088</ID>
                  <Description>"Save Game"</Description>
                  <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:Idle/Done
1:Save Game
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>800080</Color>
                  <VariableType>Byte</VariableType>
                  <Address>game_update_save_toggle</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>9089</ID>
                  <Description>"Unlock All Feats"</Description>
                  <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:Idle/Done
1:Unlock
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>800080</Color>
                  <VariableType>Byte</VariableType>
                  <Address>game_update_feat_unlock_toggle</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>9091</ID>
                  <Description>"Unlock All Recipes"</Description>
                  <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:Idle/Done
1:Unlock
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>800080</Color>
                  <VariableType>Byte</VariableType>
                  <Address>game_update_recipe_unlock_toggle</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>9090</ID>
                  <Description>"Unlock All Achievements"</Description>
                  <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:Idle/Done
1:Unlock
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>800080</Color>
                  <VariableType>Byte</VariableType>
                  <Address>game_update_achievement_unlock_toggle</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>9103</ID>
                  <Description>"Fly Mode"</Description>
                  <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:Idle/Done
1:Start
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <Color>800080</Color>
                  <VariableType>Byte</VariableType>
                  <Address>game_update_fly_toggle</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>9093</ID>
              <Description>"Instant Body Harvest"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-09-25
  Author : sub1to

  Panel_BodyHarvest::UpdateHarvest

	private float m_ElapsedProgressBarSeconds; // 0x188
	private float m_ProgressBarTimeSeconds; // 0x18C
	private float m_DayLengthScaleBeforeHarvest; // 0x190
	private float m_MeatHarvestAmountBefore; // 0x194
	private int m_HideHarvestAmountBefore; // 0x198
	private int m_GutHarvestAmountBefore; // 0x19C
}

[ENABLE]
alloc(newmem,$100,GameAssembly.dll)
label(returnhere)
label(code)
label(bodyharvest_hook)
label(bodyharvest_bytes)
label(bodyharvest_base_ptr)
registersymbol(bodyharvest_hook)
registersymbol(bodyharvest_bytes)
registersymbol(bodyharvest_base_ptr)
aobscanmodule(hook,GameAssembly.dll,33 d2 48 8b cb e8 ? ? ? ? 33 d2 48 8b cb e8 ? ? ? ? 33 d2 48 8b cb e8 ? ? ? ? 33 d2 48 8b cb 48 8b 7c 24)

newmem:
bodyharvest_bytes:
  readMem(hook, 5)
  jmp returnhere

bodyharvest_base_ptr:
  dq 0

code:
  mov [bodyharvest_base_ptr], rbx
  mov ecx, [rbx+18C]
  mov [rbx+188], ecx
  jmp bodyharvest_bytes

hook:
bodyharvest_hook:
  jmp code
  returnhere:

[DISABLE]
bodyharvest_hook:
  readMem(bodyharvest_bytes, 5)

unregistersymbol(bodyharvest_hook)
unregistersymbol(bodyharvest_bytes)
unregistersymbol(bodyharvest_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+8F2E4F

GameAssembly.dll+8F2E2C: E8 BF 13 00 00  - call GameAssembly.dll+8F41F0
GameAssembly.dll+8F2E31: 33 D2           - xor edx,edx
GameAssembly.dll+8F2E33: 48 8B CB        - mov rcx,rbx
GameAssembly.dll+8F2E36: E8 95 E9 FF FF  - call GameAssembly.dll+8F17D0
GameAssembly.dll+8F2E3B: 33 D2           - xor edx,edx
GameAssembly.dll+8F2E3D: 48 8B CB        - mov rcx,rbx
GameAssembly.dll+8F2E40: E8 8B EE FF FF  - call GameAssembly.dll+8F1CD0
GameAssembly.dll+8F2E45: 33 D2           - xor edx,edx
GameAssembly.dll+8F2E47: 48 8B CB        - mov rcx,rbx
GameAssembly.dll+8F2E4A: E8 61 F0 FF FF  - call GameAssembly.dll+8F1EB0
// ---------- INJECTING HERE ----------
GameAssembly.dll+8F2E4F: 33 D2           - xor edx,edx
GameAssembly.dll+8F2E51: 48 8B CB        - mov rcx,rbx
// ---------- DONE INJECTING  ----------
GameAssembly.dll+8F2E54: E8 37 03 00 00  - call GameAssembly.dll+8F3190	// call Panel_BodyHarvest::UpdateHarvest
GameAssembly.dll+8F2E59: 33 D2           - xor edx,edx
GameAssembly.dll+8F2E5B: 48 8B CB        - mov rcx,rbx
GameAssembly.dll+8F2E5E: E8 3D 06 00 00  - call GameAssembly.dll+8F34A0
GameAssembly.dll+8F2E63: 33 D2           - xor edx,edx
GameAssembly.dll+8F2E65: 48 8B CB        - mov rcx,rbx
GameAssembly.dll+8F2E68: E8 73 17 00 00  - call GameAssembly.dll+8F45E0
GameAssembly.dll+8F2E6D: 33 D2           - xor edx,edx
GameAssembly.dll+8F2E6F: 48 8B CB        - mov rcx,rbx
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>9097</ID>
              <Description>"Instant Breakdown"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-09-25
  Author : sub1to

  Panel_BreakDown::Update

  private float m_TimeSpentBreakingDown; // 0x10C
}

[ENABLE]
alloc(newmem,$100,GameAssembly.dll)
label(returnhere)
label(code)
label(breakdown_hook)
label(breakdown_bytes)
label(breakdown_base_ptr)
registersymbol(breakdown_hook)
registersymbol(breakdown_bytes)
registersymbol(breakdown_base_ptr)
aobscanmodule(hook,GameAssembly.dll,48 8b 13 33 f6 48 89 74 24 ? 48 8b cb 48 8b 82 ? ? ? ? 48 8b 92 ? ? ? ? ff d0 84 c0 0f 84 ? ? ? ? 48 8b 0d)

newmem:
breakdown_bytes:
  readMem(hook, 5)
  jmp returnhere

breakdown_base_ptr:
  dq 0

code:
  mov [breakdown_base_ptr], rbx
  mov [rbx+10C], (float)99999
  jmp breakdown_bytes

hook:
breakdown_hook:
  jmp code
  returnhere:

[DISABLE]
breakdown_hook:
  readMem(breakdown_bytes, 5)

unregistersymbol(breakdown_hook)
unregistersymbol(breakdown_bytes)
unregistersymbol(breakdown_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+8F7E6D

GameAssembly.dll+8F7E31: E8 1A 80 A7 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+8F7E36: 48 8D 0D 03 34 D3 03  - lea rcx,[GameAssembly.dll+462B240]
GameAssembly.dll+8F7E3D: E8 0E 80 A7 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+8F7E42: 48 8D 0D B7 E7 D6 03  - lea rcx,[GameAssembly.dll+4666600]
GameAssembly.dll+8F7E49: E8 02 80 A7 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+8F7E4E: 48 8D 0D C3 02 D6 03  - lea rcx,[GameAssembly.dll+4658118]
GameAssembly.dll+8F7E55: E8 F6 7F A7 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+8F7E5A: 48 8D 0D 17 D7 D1 03  - lea rcx,[GameAssembly.dll+4615578]
GameAssembly.dll+8F7E61: E8 EA 7F A7 FF        - call GameAssembly.dll+36FE50
GameAssembly.dll+8F7E66: C6 05 BB D3 F4 03 01  - mov byte ptr [GameAssembly.dll+4845228],01
// ---------- INJECTING HERE ----------
GameAssembly.dll+8F7E6D: 48 8B 13              - mov rdx,[rbx]
GameAssembly.dll+8F7E70: 33 F6                 - xor esi,esi
// ---------- DONE INJECTING  ----------
GameAssembly.dll+8F7E72: 48 89 74 24 60        - mov [rsp+60],rsi
GameAssembly.dll+8F7E77: 48 8B CB              - mov rcx,rbx
GameAssembly.dll+8F7E7A: 48 8B 82 88 01 00 00  - mov rax,[rdx+00000188]
GameAssembly.dll+8F7E81: 48 8B 92 90 01 00 00  - mov rdx,[rdx+00000190]
GameAssembly.dll+8F7E88: FF D0                 - call rax
GameAssembly.dll+8F7E8A: 84 C0                 - test al,al
GameAssembly.dll+8F7E8C: 0F 84 D1 07 00 00     - je GameAssembly.dll+8F8663
GameAssembly.dll+8F7E92: 48 8B 0D F7 FC D5 03  - mov rcx,[GameAssembly.dll+4657B90]
GameAssembly.dll+8F7E99: 39 B1 E0 00 00 00     - cmp [rcx+000000E0],esi
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>9102</ID>
              <Description>"Skip Hold Interactions"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.22
  Date   : 2023-09-25
  Author : sub1to

  class HarvestableInteraction : TimedHoldInteraction

  private float &lt;HoldTime&gt;k__BackingField; // 0x54
  private float m_Timer; // 0x58
}

[ENABLE]
alloc(newmem,$100,GameAssembly.dll)
label(returnhere)
label(code)
label(time_hold_interaction__hook)
label(time_hold_interaction__bytes)
label(time_hold_interaction__base_ptr)
registersymbol(time_hold_interaction__hook)
registersymbol(time_hold_interaction__bytes)
registersymbol(time_hold_interaction__base_ptr)

// TimeHoldInteraction::UpdateHoldInteraction
aobscanmodule(hook,GameAssembly.dll,40 53 48 83 ec ? f3 0f 10 41 ? 48 8b d9 0f 2f 41)

newmem:
time_hold_interaction__bytes:
  readMem(hook, 6)
  jmp returnhere

time_hold_interaction__base_ptr:
  dq 0

code:
  mov [time_hold_interaction__base_ptr], rcx
  //*(float *)(a1 + 0x58) &gt;= *(float *)(a1 + 0x54)
  mov eax, [rcx+58]
  mov [rcx+54], eax
  jmp time_hold_interaction__bytes

hook:
time_hold_interaction__hook:
  jmp code
  nop
  returnhere:

[DISABLE]
time_hold_interaction__hook:
  readMem(time_hold_interaction__bytes, 6)

unregistersymbol(time_hold_interaction__hook)
unregistersymbol(time_hold_interaction__bytes)
unregistersymbol(time_hold_interaction__base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+11CC9C0

GameAssembly.dll+11CC9A3: 48 89 7C 24 20        - mov [rsp+20],rdi
GameAssembly.dll+11CC9A8: E8 03 C7 7C FF        - call GameAssembly.dll+9990B0
GameAssembly.dll+11CC9AD: 48 8B 5C 24 48        - mov rbx,[rsp+48]
GameAssembly.dll+11CC9B2: 48 83 C4 30           - add rsp,30
GameAssembly.dll+11CC9B6: 5F                    - pop rdi
GameAssembly.dll+11CC9B7: C3                    - ret
GameAssembly.dll+11CC9B8: E8 73 C3 11 FF        - call GameAssembly.il2cpp_value_box+50
GameAssembly.dll+11CC9BD: CC                    - int 3
GameAssembly.dll+11CC9BE: CC                    - int 3
GameAssembly.dll+11CC9BF: CC                    - int 3
// ---------- INJECTING HERE ----------
GameAssembly.dll+11CC9C0: 40 53                 - push rbx
// ---------- DONE INJECTING  ----------
GameAssembly.dll+11CC9C2: 48 83 EC 30           - sub rsp,30
GameAssembly.dll+11CC9C6: F3 0F 10 41 58        - movss xmm0,[rcx+58]
GameAssembly.dll+11CC9CB: 48 8B D9              - mov rbx,rcx
GameAssembly.dll+11CC9CE: 0F 2F 41 54           - comiss xmm0,[rcx+54]
GameAssembly.dll+11CC9D2: 0F 29 74 24 20        - movaps [rsp+20],xmm6
GameAssembly.dll+11CC9D7: 0F 28 F1              - movaps xmm6,xmm1
GameAssembly.dll+11CC9DA: 72 23                 - jb GameAssembly.dll+11CC9FF
GameAssembly.dll+11CC9DC: 48 8B 01              - mov rax,[rcx]
GameAssembly.dll+11CC9DF: 48 8B 90 50 02 00 00  - mov rdx,[rax+00000250]
GameAssembly.dll+11CC9E6: FF 90 48 02 00 00     - call qword ptr [rax+00000248]
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>9108</ID>
              <Description>"AI Ignore Player"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.23 120705 S
  Date   : 2023-09-27
  Author : sub1to

  class BaseAI

  public bool m_DisableScanForTargets; // 0x55C
}

[ENABLE]
alloc(newmem,$100,GameAssembly.dll)
label(returnhere)
label(returnhere2)
label(code)
label(code2)
label(ai_target_scan_hook)
label(ai_target_scan_bytes)
label(ai_target_scan_hook2)
label(ai_target_scan_bytes2)
label(ai_target_scan_base_ptr)
registersymbol(ai_target_scan_hook)
registersymbol(ai_target_scan_bytes)
registersymbol(ai_target_scan_hook2)
registersymbol(ai_target_scan_bytes2)
registersymbol(ai_target_scan_base_ptr)

//BaseAI::ScanForNewTarget
aobscanmodule(hook,GameAssembly.dll,80 be ? ? ? ? ? 0f 85 ? ? ? ? 48 8b 05 ? ? ? ? 48 85 c0 75 ? 48 8d 0d ? ? ? ? e8 ? ? ? ? 48 85 c0 0f 84 ? ? ? ? 48 89 05 ? ? ? ? ff d0)

//BaseAI::IgnoreAudioEvent
aobscanmodule(hook2,GameAssembly.dll,80 be ? ? ? ? ? 0f 85 ? ? ? ? 8b 86)

newmem:
ai_target_scan_bytes:
  readMem(hook, 7)
  jmp returnhere

ai_target_scan_bytes2:
  readMem(hook, 7)
  jmp returnhere2

ai_target_scan_base_ptr:
  dq 0

code:
  //cmp byte ptr [rsi+55Ch], 0
  test rsi, rsi
  jmp returnhere

code2:
  //cmp byte ptr [rsi+55Ch], 0
  test rsi, rsi
  jmp returnhere2

hook:
ai_target_scan_hook:
  jmp code
  nop 2
  returnhere:

hook2:
ai_target_scan_hook2:
  jmp code2
  nop 2
  returnhere2:

[DISABLE]
ai_target_scan_hook:
  readMem(ai_target_scan_bytes, 7)

ai_target_scan_hook2:
  readMem(ai_target_scan_bytes2, 7)

unregistersymbol(ai_target_scan_hook)
unregistersymbol(ai_target_scan_bytes)
unregistersymbol(ai_target_scan_hook2)
unregistersymbol(ai_target_scan_bytes2)
unregistersymbol(ai_target_scan_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+53A37A

GameAssembly.dll+53A33E: E8 4D BD E1 FF        - call GameAssembly.dll+356090
GameAssembly.dll+53A343: 48 8D 0D A6 94 C0 03  - lea rcx,[GameAssembly.dll+41437F0]
GameAssembly.dll+53A34A: E8 41 BD E1 FF        - call GameAssembly.dll+356090
GameAssembly.dll+53A34F: 48 8D 0D 92 94 C0 03  - lea rcx,[GameAssembly.dll+41437E8]
GameAssembly.dll+53A356: E8 35 BD E1 FF        - call GameAssembly.dll+356090
GameAssembly.dll+53A35B: 48 8D 0D D6 B3 BD 03  - lea rcx,[GameAssembly.dll+4115738]
GameAssembly.dll+53A362: E8 29 BD E1 FF        - call GameAssembly.dll+356090
GameAssembly.dll+53A367: 48 8D 0D 22 4B C0 03  - lea rcx,[GameAssembly.dll+413EE90]
GameAssembly.dll+53A36E: E8 1D BD E1 FF        - call GameAssembly.dll+356090
GameAssembly.dll+53A373: C6 05 5A 91 DC 03 01  - mov byte ptr [GameAssembly.dll+43034D4],01
// ---------- INJECTING HERE ----------
GameAssembly.dll+53A37A: 80 BE 5C 05 00 00 00  - cmp byte ptr [rsi+0000055C],00
// ---------- DONE INJECTING  ----------
GameAssembly.dll+53A381: 0F 85 36 07 00 00     - jne GameAssembly.dll+53AABD
GameAssembly.dll+53A387: 48 8B 05 A2 FA DD 03  - mov rax,[GameAssembly.dll+4319E30]
GameAssembly.dll+53A38E: 48 85 C0              - test rax,rax
GameAssembly.dll+53A391: 75 1C                 - jne GameAssembly.dll+53A3AF
GameAssembly.dll+53A393: 48 8D 0D F6 E7 1F 03  - lea rcx,[GameAssembly.dll+3738B90]
GameAssembly.dll+53A39A: E8 21 7A DB FF        - call GameAssembly.DllCanUnloadNow+2A40
GameAssembly.dll+53A39F: 48 85 C0              - test rax,rax
GameAssembly.dll+53A3A2: 0F 84 1E 0E 00 00     - je GameAssembly.dll+53B1C6
GameAssembly.dll+53A3A8: 48 89 05 81 FA DD 03  - mov [GameAssembly.dll+4319E30],rax
GameAssembly.dll+53A3AF: FF D0                 - call rax
}

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+53CC51

GameAssembly.dll+53CC21: C6 05 5D CE DD 03 01     - mov byte ptr [GameAssembly.dll+4319A85],01
GameAssembly.dll+53CC28: 48 85 FF                 - test rdi,rdi
GameAssembly.dll+53CC2B: 0F 84 23 01 00 00        - je GameAssembly.dll+53CD54
GameAssembly.dll+53CC31: 48 8B 05 80 88 BD 03     - mov rax,[GameAssembly.dll+41154B8]
GameAssembly.dll+53CC38: 48 8B 88 B8 00 00 00     - mov rcx,[rax+000000B8]
GameAssembly.dll+53CC3F: 48 8B 01                 - mov rax,[rcx]
GameAssembly.dll+53CC42: 48 39 47 10              - cmp [rdi+10],rax
GameAssembly.dll+53CC46: 0F 94 C0                 - sete al
GameAssembly.dll+53CC49: 84 C0                    - test al,al
GameAssembly.dll+53CC4B: 0F 84 D6 00 00 00        - je GameAssembly.dll+53CD27
// ---------- INJECTING HERE ----------
GameAssembly.dll+53CC51: 80 BE 5C 05 00 00 00     - cmp byte ptr [rsi+0000055C],00
// ---------- DONE INJECTING  ----------
GameAssembly.dll+53CC58: 0F 85 C9 00 00 00        - jne GameAssembly.dll+53CD27
GameAssembly.dll+53CC5E: 8B 86 68 04 00 00        - mov eax,[rsi+00000468]
GameAssembly.dll+53CC64: 83 F8 04                 - cmp eax,04
GameAssembly.dll+53CC67: 0F 8E D1 00 00 00        - jng GameAssembly.dll+53CD3E
GameAssembly.dll+53CC6D: 83 F8 08                 - cmp eax,08
GameAssembly.dll+53CC70: 0F 85 A7 00 00 00        - jne GameAssembly.dll+53CD1D
GameAssembly.dll+53CC76: 0F 29 74 24 40           - movaps [rsp+40],xmm6
GameAssembly.dll+53CC7B: F2 0F 10 86 2C 08 00 00  - movsd xmm0,[rsi+0000082C]
GameAssembly.dll+53CC83: F2 0F 10 4D 00           - movsd xmm1,[rbp+00]
GameAssembly.dll+53CC88: 0F 28 D8                 - movaps xmm3,xmm0
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>9110</ID>
              <Description>"Instant Inventory Examine Actions"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 2.23 120705 S
  Date   : 2023-09-28
  Author : sub1to

	private float m_ElapsedProgressBarSeconds; // 0x4E4
	private float m_ProgressBarTimeSeconds; // 0x4E8
}

[ENABLE]
alloc(newmem,$100,GameAssembly.dll)
label(returnhere)
label(code)
label(inventory_examine_hook)
label(inventory_examine_bytes)
label(inventory_examine_base_ptr)
registersymbol(inventory_examine_hook)
registersymbol(inventory_examine_bytes)
registersymbol(inventory_examine_base_ptr)

//Panel_Inventory_Examine::UpdateActionProgressBar
aobscanmodule(hook,GameAssembly.dll,80 bb ? ? ? ? ? 48 c7 44 24 ? ? ? ? ? 75 ? 80 bb)

newmem:
inventory_examine_bytes:
  readMem(hook, 7)
  jmp returnhere

inventory_examine_base_ptr:
  dq 0

code:
  mov [inventory_examine_base_ptr], rbx
  mov ecx, [rbx+4e8]
  mov [rbx+4e4], ecx
  jmp inventory_examine_bytes

hook:
inventory_examine_hook:
  jmp code
  nop 2
  returnhere:

[DISABLE]
inventory_examine_hook:
  readMem(inventory_examine_bytes, 7)

unregistersymbol(inventory_examine_hook)
unregistersymbol(inventory_examine_bytes)
unregistersymbol(inventory_examine_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GameAssembly.dll+998BB9

GameAssembly.dll+998B7D: E8 0E D5 9B FF              - call GameAssembly.dll+356090
GameAssembly.dll+998B82: 48 8D 0D C7 86 7B 03        - lea rcx,[GameAssembly.dll+4151250]
GameAssembly.dll+998B89: E8 02 D5 9B FF              - call GameAssembly.dll+356090
GameAssembly.dll+998B8E: 48 8D 0D E3 62 7A 03        - lea rcx,[GameAssembly.dll+413EE78]
GameAssembly.dll+998B95: E8 F6 D4 9B FF              - call GameAssembly.dll+356090
GameAssembly.dll+998B9A: 48 8D 0D 0F 40 77 03        - lea rcx,[GameAssembly.dll+410CBB0]
GameAssembly.dll+998BA1: E8 EA D4 9B FF              - call GameAssembly.dll+356090
GameAssembly.dll+998BA6: 48 8D 0D BB 3F 77 03        - lea rcx,[GameAssembly.dll+410CB68]
GameAssembly.dll+998BAD: E8 DE D4 9B FF              - call GameAssembly.dll+356090
GameAssembly.dll+998BB2: C6 05 BB C1 96 03 01        - mov byte ptr [GameAssembly.dll+4304D74],01
// ---------- INJECTING HERE ----------
GameAssembly.dll+998BB9: 80 BB F9 04 00 00 00        - cmp byte ptr [rbx+000004F9],00
// ---------- DONE INJECTING  ----------
GameAssembly.dll+998BC0: 48 C7 44 24 60 00 00 00 00  - mov qword ptr [rsp+60],00000000
GameAssembly.dll+998BC9: 75 28                       - jne GameAssembly.dll+998BF3
GameAssembly.dll+998BCB: 80 BB FC 04 00 00 00        - cmp byte ptr [rbx+000004FC],00
GameAssembly.dll+998BD2: 75 1F                       - jne GameAssembly.dll+998BF3
GameAssembly.dll+998BD4: 80 BB F1 04 00 00 00        - cmp byte ptr [rbx+000004F1],00
GameAssembly.dll+998BDB: 75 16                       - jne GameAssembly.dll+998BF3
GameAssembly.dll+998BDD: 80 BB D9 04 00 00 00        - cmp byte ptr [rbx+000004D9],00
GameAssembly.dll+998BE4: 75 0D                       - jne GameAssembly.dll+998BF3
GameAssembly.dll+998BE6: 80 BB F2 04 00 00 00        - cmp byte ptr [rbx+000004F2],00
GameAssembly.dll+998BED: 0F 84 DE 02 00 00           - je GameAssembly.dll+998ED1
}
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>8666</ID>
      <Description>"--------------------------"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>8667</ID>
      <Description>"Credits"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>8670</ID>
          <Description>"sub1to: https://fearlessrevolution.com/viewtopic.php?f=4&amp;t=17899"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>8671</ID>
          <Description>"JLee3D: https://fearlessrevolution.com/viewtopic.php?f=4&amp;t=10805"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>8864</ID>
          <Description>"https://github.com/Perfare/Il2CppDumper"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>8669</ID>
      <Description>"--------------------------"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>8665</ID>
      <Description>"Old Stuff"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>4080FF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>8832</ID>
          <Description>"Sprint Instant Recharge"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : tld.exe
  Version: 1.74 58755
  Date   : 2020-04-03
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(sprint_recovery_hook,GameAssembly.dll,f3 41 0f 58 f3 f3 0f 11 73)
alloc(newmem,$1000,"GameAssembly.dll"+516921)

label(code)
label(return)

newmem:
  push rax
  mov rax, 42c80000 //100.f
  movq xmm6, rax
  pop rax

code:
  //addss xmm6,xmm11
  jmp return

sprint_recovery_hook:
  jmp newmem
return:
registersymbol(sprint_recovery_hook)

[DISABLE]

sprint_recovery_hook:
  db F3 41 0F 58 F3

unregistersymbol(sprint_recovery_hook)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+516921

"GameAssembly.dll"+5168FB: 84 C0                    -  test al,al
"GameAssembly.dll"+5168FD: 74 14                    -  je GameAssembly.dll+516913
"GameAssembly.dll"+5168FF: 66 0F 6E 47 5C           -  movd xmm0,[rdi+5C]
"GameAssembly.dll"+516904: 0F 5B C0                 -  cvtdq2ps xmm0,xmm0
"GameAssembly.dll"+516907: F3 41 0F 5E C0           -  divss xmm0,xmm8
"GameAssembly.dll"+51690C: F3 0F 58 C7              -  addss xmm0,xmm7
"GameAssembly.dll"+516910: 0F 28 F8                 -  movaps xmm7,xmm0
"GameAssembly.dll"+516913: F3 41 0F 59 F4           -  mulss xmm6,xmm12
"GameAssembly.dll"+516918: F3 41 0F 59 F2           -  mulss xmm6,xmm10
"GameAssembly.dll"+51691D: F3 0F 59 F7              -  mulss xmm6,xmm7
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+516921: F3 41 0F 58 F3           -  addss xmm6,xmm11
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+516926: F3 0F 11 73 78           -  movss [rbx+78],xmm6
"GameAssembly.dll"+51692B: 33 D2                    -  xor edx,edx
"GameAssembly.dll"+51692D: 48 8B CB                 -  mov rcx,rbx
"GameAssembly.dll"+516930: E8 CB 07 00 00           -  call GameAssembly.dll+517100
"GameAssembly.dll"+516935: 44 0F 2F CE              -  comiss xmm9,xmm6
"GameAssembly.dll"+516939: 77 0A                    -  ja GameAssembly.dll+516945
"GameAssembly.dll"+51693B: 0F 2F F0                 -  comiss xmm6,xmm0
"GameAssembly.dll"+51693E: 76 08                    -  jna GameAssembly.dll+516948
"GameAssembly.dll"+516940: 0F 28 F0                 -  movaps xmm6,xmm0
"GameAssembly.dll"+516943: EB 03                    -  jmp GameAssembly.dll+516948
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8575</ID>
          <Description>"Infinite Ammo"</Description>
          <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8569</ID>
              <Description>"Infinite Ammo"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.74 58755
  Date   : 2020-04-03
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
aobscanmodule(reload_dec_hook,GameAssembly.dll,ff 48 ? 33 d2 48 8b cf)
alloc(newmem,$1000,"GameAssembly.dll"+BB15BD)

label(code)
label(return)

newmem:
  //mov [rax+18], 20

code:
  //dec [rax+18]
  xor edx,edx
  jmp return

reload_dec_hook:
  jmp newmem
return:
registersymbol(reload_dec_hook)

[DISABLE]
reload_dec_hook:
  db FF 48 18 33 D2

unregistersymbol(reload_dec_hook)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+BB15BD

"GameAssembly.dll"+BB15A6: 41 5C                    -  pop r12
"GameAssembly.dll"+BB15A8: 5F                       -  pop rdi
"GameAssembly.dll"+BB15A9: 5E                       -  pop rsi
"GameAssembly.dll"+BB15AA: 5D                       -  pop rbp
"GameAssembly.dll"+BB15AB: C3                       -  ret 
"GameAssembly.dll"+BB15AC: 48 85 F6                 -  test rsi,rsi
"GameAssembly.dll"+BB15AF: 74 49                    -  je GameAssembly.dll+BB15FA
"GameAssembly.dll"+BB15B1: 48 8B 86 20 02 00 00     -  mov rax,[rsi+00000220]
"GameAssembly.dll"+BB15B8: 48 85 C0                 -  test rax,rax
"GameAssembly.dll"+BB15BB: 74 37                    -  je GameAssembly.dll+BB15F4
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+BB15BD: FF 48 18                 -  dec [rax+18]
"GameAssembly.dll"+BB15C0: 33 D2                    -  xor edx,edx
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+BB15C2: 48 8B CE                 -  mov rcx,rsi
"GameAssembly.dll"+BB15C5: E8 C6 EB FB FF           -  call GameAssembly.dll+B70190
"GameAssembly.dll"+BB15CA: EB C9                    -  jmp GameAssembly.dll+BB1595
"GameAssembly.dll"+BB15CC: E8 1F 19 6E FF           -  call GameAssembly.dll+292EF0
"GameAssembly.dll"+BB15D1: 90                       -  nop 
"GameAssembly.dll"+BB15D2: E8 19 19 6E FF           -  call GameAssembly.dll+292EF0
"GameAssembly.dll"+BB15D7: 90                       -  nop 
"GameAssembly.dll"+BB15D8: E8 13 19 6E FF           -  call GameAssembly.dll+292EF0
"GameAssembly.dll"+BB15DD: E8 0E 19 6E FF           -  call GameAssembly.dll+292EF0
"GameAssembly.dll"+BB15E2: E8 09 19 6E FF           -  call GameAssembly.dll+292EF0
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>8574</ID>
              <Description>"Infinite Ammo 2"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 1.74 58755
  Date   : 2020-04-03
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(reload_dec_batch_hook,GameAssembly.dll,29 71 ? 45 85 ed)
alloc(newmem,$1000,"GameAssembly.dll"+BB1DFB)

label(code)
label(return)

newmem:
  //mov [rcx+18], 20

code:
  //sub [rcx+18],esi
  test r13d,r13d
  jmp return

reload_dec_batch_hook:
  jmp newmem
  nop
return:
registersymbol(reload_dec_batch_hook)

[DISABLE]

reload_dec_batch_hook:
  db 29 71 18 45 85 ED

unregistersymbol(reload_dec_batch_hook)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+BB1DFB

"GameAssembly.dll"+BB1DD3: 44 89 7C 91 20        -  mov [rcx+rdx*4+20],r15d
"GameAssembly.dll"+BB1DD8: FF 43 1C              -  inc [rbx+1C]
"GameAssembly.dll"+BB1DDB: FF C7                 -  inc edi
"GameAssembly.dll"+BB1DDD: EB 91                 -  jmp GameAssembly.dll+BB1D70
"GameAssembly.dll"+BB1DDF: 44 2B EE              -  sub r13d,esi
"GameAssembly.dll"+BB1DE2: 4D 85 F6              -  test r14,r14
"GameAssembly.dll"+BB1DE5: 0F 84 F3 00 00 00     -  je GameAssembly.dll+BB1EDE
"GameAssembly.dll"+BB1DEB: 49 8B 8E 20 02 00 00  -  mov rcx,[r14+00000220]
"GameAssembly.dll"+BB1DF2: 48 85 C9              -  test rcx,rcx
"GameAssembly.dll"+BB1DF5: 0F 84 DE 00 00 00     -  je GameAssembly.dll+BB1ED9
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+BB1DFB: 29 71 18              -  sub [rcx+18],esi
"GameAssembly.dll"+BB1DFE: 45 85 ED              -  test r13d,r13d
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+BB1E01: 0F 85 F9 FE FF FF     -  jne GameAssembly.dll+BB1D00
"GameAssembly.dll"+BB1E07: 41 FF C4              -  inc r12d
"GameAssembly.dll"+BB1E0A: 44 89 A5 C0 00 00 00  -  mov [rbp+000000C0],r12d
"GameAssembly.dll"+BB1E11: 49 63 C4              -  movsxd  rax,r12d
"GameAssembly.dll"+BB1E14: 48 8B 7D 10           -  mov rdi,[rbp+10]
"GameAssembly.dll"+BB1E18: C7 04 87 2D 01 00 00  -  mov [rdi+rax*4],0000012D
"GameAssembly.dll"+BB1E1F: 48 8B 4D 00           -  mov rcx,[rbp+00]
"GameAssembly.dll"+BB1E23: EB 31                 -  jmp GameAssembly.dll+BB1E56
"GameAssembly.dll"+BB1E25: 41 FF C4              -  inc r12d
"GameAssembly.dll"+BB1E28: 44 89 A5 C0 00 00 00  -  mov [rbp+000000C0],r12d
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>8596</ID>
              <Description>"Infinite Arrows"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : tld.exe
  Version: 
  Date   : 2020-04-06
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(arrow_dec_hook,GameAssembly.dll,FF 48 18 48 8B 4F 58) // should be unique
alloc(newmem,$1000,"GameAssembly.dll"+57868A)

label(code)
label(return)

newmem:
  //mov [rax+18], 20

code:
  //dec [rax+18]
  mov rcx,[rdi+58]
  jmp return

arrow_dec_hook:
  jmp newmem
  nop
  nop
return:
registersymbol(arrow_dec_hook)

[DISABLE]

arrow_dec_hook:
  db FF 48 18 48 8B 4F 58

unregistersymbol(arrow_dec_hook)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+57868A

"GameAssembly.dll"+57865D: 48 85 C9              -  test rcx,rcx
"GameAssembly.dll"+578660: 0F 84 D8 03 00 00     -  je GameAssembly.dll+578A3E
"GameAssembly.dll"+578666: 33 D2                 -  xor edx,edx
"GameAssembly.dll"+578668: E8 D3 FF 7B 00        -  call GameAssembly.dll+D38640
"GameAssembly.dll"+57866D: 48 8B 47 58           -  mov rax,[rdi+58]
"GameAssembly.dll"+578671: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+578674: 0F 84 BE 03 00 00     -  je GameAssembly.dll+578A38
"GameAssembly.dll"+57867A: 48 8B 80 20 02 00 00  -  mov rax,[rax+00000220]
"GameAssembly.dll"+578681: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+578684: 0F 84 A8 03 00 00     -  je GameAssembly.dll+578A32
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+57868A: FF 48 18              -  dec [rax+18]
"GameAssembly.dll"+57868D: 48 8B 4F 58           -  mov rcx,[rdi+58]
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+578691: 48 85 C9              -  test rcx,rcx
"GameAssembly.dll"+578694: 0F 84 92 03 00 00     -  je GameAssembly.dll+578A2C
"GameAssembly.dll"+57869A: 48 8B 81 20 02 00 00  -  mov rax,[rcx+00000220]
"GameAssembly.dll"+5786A1: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+5786A4: 0F 84 7C 03 00 00     -  je GameAssembly.dll+578A26
"GameAssembly.dll"+5786AA: 83 78 18 00           -  cmp dword ptr [rax+18],00
"GameAssembly.dll"+5786AE: 74 73                 -  je GameAssembly.dll+578723
"GameAssembly.dll"+5786B0: 48 85 C9              -  test rcx,rcx
"GameAssembly.dll"+5786B3: 0F 84 49 03 00 00     -  je GameAssembly.dll+578A02
"GameAssembly.dll"+5786B9: 33 D2                 -  xor edx,edx
}
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>8519</ID>
          <Description>"Infinite Water"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : tld.exe
  Version: 1.74 58755
  Date   : 2020-04-01
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,2048,GameAssembly.dll)
label(returnhere)
label(originalcode)
label(exit)
label(drink_hook)
registersymbol(drink_hook)
aobScanModule(hook,GameAssembly.dll,f3 0f 5c f7 f3 0f 11 73 ? 48 8b 0d)

newmem:

originalcode:
//subss xmm6,xmm7
movss [rbx+1C],xmm6

exit:
jmp returnhere

//"GameAssembly.dll"+3301C3:
hook:
drink_hook:
jmp newmem
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
dealloc(newmem)
drink_hook:
subss xmm6,xmm7
movss [rbx+1C],xmm6
//Alt: db F3 0F 5C F7 F3 0F 11 73 1C
unregistersymbol(drink_hook)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8527</ID>
          <Description>"Infinite Food Calories"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : tld.exe
  Version: 1.74 58755
  Date   : 2020-04-01
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
aobscanmodule(eat_hook,GameAssembly.dll,f3 41 0f 5c c0 f3 0f 11 40 ? 48 8b bb)
alloc(newmem,$1000,"GameAssembly.dll"+814B2E)

label(code)
label(return)

newmem:

code:
  //subss xmm0,xmm8
  jmp return

eat_hook:
  jmp newmem
return:
registersymbol(eat_hook)

[DISABLE]
eat_hook:
  db F3 41 0F 5C C0

unregistersymbol(eat_hook)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+814B2E

"GameAssembly.dll"+814AFE: 0F 84 DE 00 00 00           -  je GameAssembly.dll+814BE2
"GameAssembly.dll"+814B04: 0F 57 35 85 A3 B2 02        -  xorps xmm6,[GameAssembly.dll+333EE90]
"GameAssembly.dll"+814B0B: 45 33 C0                    -  xor r8d,r8d
"GameAssembly.dll"+814B0E: 0F 28 CE                    -  movaps xmm1,xmm6
"GameAssembly.dll"+814B11: 48 8B C8                    -  mov rcx,rax
"GameAssembly.dll"+814B14: E8 67 33 10 00              -  call GameAssembly.dll+917E80
"GameAssembly.dll"+814B19: 48 8B 83 B8 00 00 00        -  mov rax,[rbx+000000B8]
"GameAssembly.dll"+814B20: 48 85 C0                    -  test rax,rax
"GameAssembly.dll"+814B23: 0F 84 B3 00 00 00           -  je GameAssembly.dll+814BDC
"GameAssembly.dll"+814B29: F3 0F 10 40 20              -  movss xmm0,[rax+20]
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+814B2E: F3 41 0F 5C C0              -  subss xmm0,xmm8
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+814B33: F3 0F 11 40 20              -  movss [rax+20],xmm0
"GameAssembly.dll"+814B38: 48 8B BB B8 00 00 00        -  mov rdi,[rbx+000000B8]
"GameAssembly.dll"+814B3F: 48 85 FF                    -  test rdi,rdi
"GameAssembly.dll"+814B42: 0F 84 8E 00 00 00           -  je GameAssembly.dll+814BD6
"GameAssembly.dll"+814B48: F3 0F 10 77 20              -  movss xmm6,[rdi+20]
"GameAssembly.dll"+814B4D: F3 44 0F 10 47 24           -  movss xmm8,[rdi+24]
"GameAssembly.dll"+814B53: 48 8B 0D AE 0E 44 03        -  mov rcx,[GameAssembly.dll+3C55A08]
"GameAssembly.dll"+814B5A: F6 81 27 01 00 00 02        -  test byte ptr [rcx+00000127],02
"GameAssembly.dll"+814B61: 74 0E                       -  je GameAssembly.dll+814B71
"GameAssembly.dll"+814B63: 83 B9 D8 00 00 00 00        -  cmp dword ptr [rcx+000000D8],00
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8522</ID>
          <Description>"Infinite Fire Supplies (Stacked Only)"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : tld.exe
  Version: 1.74 58755
  Date   : 2020-04-01
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,2048,GameAssembly.dll)
label(returnhere)
label(originalcode)
label(exit)
label(fire_add_hook)
registersymbol(fire_add_hook)
aobScanModule(hook,GameAssembly.dll,ff 4b ? 40 0f b6 ff)

newmem:

originalcode:
//dec [rbx+18]
movzx edi,dil

exit:
jmp returnhere

hook:
fire_add_hook:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
dealloc(newmem)
fire_add_hook:
dec [rbx+18]
movzx edi,dil
//Alt: db FF 4B 18 40 0F B6 FF
unregistersymbol(fire_add_hook)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8525</ID>
          <Description>"Infinite Matches (light directly)"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : tld.exe
  Version: 1.74 58755
  Date   : 2020-04-01
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
aobscanmodule(burn_match_hook,GameAssembly.dll,ff c8 89 41 ? 48 8b 43)
alloc(newmem,$1000,"GameAssembly.dll"+851C33)
label(code)
label(return)

newmem:

code:
  //dec eax
  mov [rcx+18],eax
  jmp return

INJECT:
  jmp newmem
return:
registersymbol(burn_match_hook)

[DISABLE]
INJECT:
  db FF C8 89 41 18

unregistersymbol(burn_match_hook)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+851C33

"GameAssembly.dll"+851C12: 84 C0                 -  test al,al
"GameAssembly.dll"+851C14: 74 7E                 -  je GameAssembly.dll+851C94
"GameAssembly.dll"+851C16: 48 8B 4B 58           -  mov rcx,[rbx+58]
"GameAssembly.dll"+851C1A: 48 85 C9              -  test rcx,rcx
"GameAssembly.dll"+851C1D: 0F 84 0A 03 00 00     -  je GameAssembly.dll+851F2D
"GameAssembly.dll"+851C23: 8B 41 18              -  mov eax,[rcx+18]
"GameAssembly.dll"+851C26: 85 C0                 -  test eax,eax
"GameAssembly.dll"+851C28: 7E 6A                 -  jle GameAssembly.dll+851C94
"GameAssembly.dll"+851C2A: 48 85 C9              -  test rcx,rcx
"GameAssembly.dll"+851C2D: 0F 84 F4 02 00 00     -  je GameAssembly.dll+851F27
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+851C33: FF C8                 -  dec eax
"GameAssembly.dll"+851C35: 89 41 18              -  mov [rcx+18],eax
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+851C38: 48 8B 43 58           -  mov rax,[rbx+58]
"GameAssembly.dll"+851C3C: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+851C3F: 0F 84 DC 02 00 00     -  je GameAssembly.dll+851F21
"GameAssembly.dll"+851C45: 83 78 18 00           -  cmp dword ptr [rax+18],00
"GameAssembly.dll"+851C49: 7F 49                 -  jg GameAssembly.dll+851C94
"GameAssembly.dll"+851C4B: 48 8B 0D DE 16 44 03  -  mov rcx,[GameAssembly.dll+3C93330]
"GameAssembly.dll"+851C52: F6 81 27 01 00 00 02  -  test byte ptr [rcx+00000127],02
"GameAssembly.dll"+851C59: 74 0E                 -  je GameAssembly.dll+851C69
"GameAssembly.dll"+851C5B: 83 B9 D8 00 00 00 00  -  cmp dword ptr [rcx+000000D8],00
"GameAssembly.dll"+851C62: 75 05                 -  jne GameAssembly.dll+851C69
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8833</ID>
          <Description>"No Aim Fatigue - Rifle"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : tld.exe
  Version: 1.74 58755
  Date   : 2020-04-03
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(aim_fatigue_hook,GameAssembly.dll,f3 41 0f 58 f9 f3 0f 11 bb)
alloc(newmem,$1000,"GameAssembly.dll"+7F3C68)

label(code)
label(return)

newmem:

code:
  //addss xmm7,xmm9
  jmp return

aim_fatigue_hook:
  jmp newmem
return:
registersymbol(aim_fatigue_hook)

[DISABLE]

aim_fatigue_hook:
  db F3 41 0F 58 F9

unregistersymbol(aim_fatigue_hook)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+7F3C68

"GameAssembly.dll"+7F3C40: F3 44 0F 11 83 F8 00 00 00  -  movss [rbx+000000F8],xmm8
"GameAssembly.dll"+7F3C49: 44 0F 28 C8                 -  movaps xmm9,xmm0
"GameAssembly.dll"+7F3C4D: 33 C9                       -  xor ecx,ecx
"GameAssembly.dll"+7F3C4F: E8 1C E0 24 02              -  call GameAssembly.dll+2A41C70
"GameAssembly.dll"+7F3C54: 0F 28 F0                    -  movaps xmm6,xmm0
"GameAssembly.dll"+7F3C57: 33 D2                       -  xor edx,edx
"GameAssembly.dll"+7F3C59: 48 8B CB                    -  mov rcx,rbx
"GameAssembly.dll"+7F3C5C: E8 BF F8 FF FF              -  call GameAssembly.dll+7F3520
"GameAssembly.dll"+7F3C61: 0F 28 F8                    -  movaps xmm7,xmm0
"GameAssembly.dll"+7F3C64: F3 0F 59 FE                 -  mulss xmm7,xmm6
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+7F3C68: F3 41 0F 58 F9              -  addss xmm7,xmm9
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+7F3C6D: F3 0F 11 BB F8 00 00 00     -  movss [rbx+000000F8],xmm7
"GameAssembly.dll"+7F3C75: 48 8B 0D 8C 1D 46 03        -  mov rcx,[GameAssembly.dll+3C55A08]
"GameAssembly.dll"+7F3C7C: F6 81 27 01 00 00 02        -  test byte ptr [rcx+00000127],02
"GameAssembly.dll"+7F3C83: 74 0E                       -  je GameAssembly.dll+7F3C93
"GameAssembly.dll"+7F3C85: 83 B9 D8 00 00 00 00        -  cmp dword ptr [rcx+000000D8],00
"GameAssembly.dll"+7F3C8C: 75 05                       -  jne GameAssembly.dll+7F3C93
"GameAssembly.dll"+7F3C8E: E8 ED E2 A7 FF              -  call GameAssembly.dll+271F80
"GameAssembly.dll"+7F3C93: F3 0F 10 35 49 67 B4 02     -  movss xmm6,[GameAssembly.dll+333A3E4]
"GameAssembly.dll"+7F3C9B: 44 0F 2F C7                 -  comiss xmm8,xmm7
"GameAssembly.dll"+7F3C9F: 77 0A                       -  ja GameAssembly.dll+7F3CAB
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8591</ID>
          <Description>"Aim Fatigue Instant Recharge"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : tld.exe
  Version: 1.74 58755
  Date   : 2020-04-03
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(aim_fatigue_recovery_hook,GameAssembly.dll,f3 0f 5c f8 f3 0f 11 bb ? ? ? ? 48 8b 0d ? ? ? ? f6 81 ? ? ? ? ? 74 ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? 44 0f 2f c7 77 ? f3 0f 10 05 ? ? ? ? 0f 2f f8 76 ? 0f 28 f8 f3 0f 11 bb)
alloc(newmem,$1000,"GameAssembly.dll"+7F3E15)

label(code)
label(return)

newmem:
  push rax
  xor rax, rax
  movq xmm7, rax
  pop rax

code:
  //subss xmm7,xmm0
  movss [rbx+000000F8],xmm7
  jmp return

aim_fatigue_recovery_hook:
  jmp newmem
  nop
  nop
  nop
  nop
  nop
  nop
  nop
return:
registersymbol(aim_fatigue_recovery_hook)

[DISABLE]

aim_fatigue_recovery_hook:
  db F3 0F 5C F8 F3 0F 11 BB F8 00 00 00

unregistersymbol(aim_fatigue_recovery_hook)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+7F3E15

"GameAssembly.dll"+7F3DEB: F3 0F 10 BB F8 00 00 00     -  movss xmm7,[rbx+000000F8]
"GameAssembly.dll"+7F3DF3: 41 0F 2F F8                 -  comiss xmm7,xmm8
"GameAssembly.dll"+7F3DF7: 0F 86 14 FF FF FF           -  jbe GameAssembly.dll+7F3D11
"GameAssembly.dll"+7F3DFD: 33 C9                       -  xor ecx,ecx
"GameAssembly.dll"+7F3DFF: E8 6C DE 24 02              -  call GameAssembly.dll+2A41C70
"GameAssembly.dll"+7F3E04: 0F 28 F0                    -  movaps xmm6,xmm0
"GameAssembly.dll"+7F3E07: 33 D2                       -  xor edx,edx
"GameAssembly.dll"+7F3E09: 48 8B CB                    -  mov rcx,rbx
"GameAssembly.dll"+7F3E0C: E8 9F F9 FF FF              -  call GameAssembly.dll+7F37B0
"GameAssembly.dll"+7F3E11: F3 0F 59 C6                 -  mulss xmm0,xmm6
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+7F3E15: F3 0F 5C F8                 -  subss xmm7,xmm0
"GameAssembly.dll"+7F3E19: F3 0F 11 BB F8 00 00 00     -  movss [rbx+000000F8],xmm7
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+7F3E21: 48 8B 0D E0 1B 46 03        -  mov rcx,[GameAssembly.dll+3C55A08]
"GameAssembly.dll"+7F3E28: F6 81 27 01 00 00 02        -  test byte ptr [rcx+00000127],02
"GameAssembly.dll"+7F3E2F: 74 0E                       -  je GameAssembly.dll+7F3E3F
"GameAssembly.dll"+7F3E31: 83 B9 D8 00 00 00 00        -  cmp dword ptr [rcx+000000D8],00
"GameAssembly.dll"+7F3E38: 75 05                       -  jne GameAssembly.dll+7F3E3F
"GameAssembly.dll"+7F3E3A: E8 41 E1 A7 FF              -  call GameAssembly.dll+271F80
"GameAssembly.dll"+7F3E3F: 44 0F 2F C7                 -  comiss xmm8,xmm7
"GameAssembly.dll"+7F3E43: 77 1D                       -  ja GameAssembly.dll+7F3E62
"GameAssembly.dll"+7F3E45: F3 0F 10 05 97 65 B4 02     -  movss xmm0,[GameAssembly.dll+333A3E4]
"GameAssembly.dll"+7F3E4D: 0F 2F F8                    -  comiss xmm7,xmm0
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8770</ID>
          <Description>"Infinite Charcoal"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : tld.exe
  Version: 1.95 83861 S
  Date   : 2021-10-18
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(survey_charcoal_hook)
label(survey_charcoal_bytes)
label(survey_charcoal_base_ptr)
registersymbol(survey_charcoal_hook)
registersymbol(survey_charcoal_bytes)
registersymbol(survey_charcoal_base_ptr)
aobScanModule(hook,GameAssembly.dll,ff 48 ? 48 8b 43 ? 48 85 c0)

newmem:
survey_charcoal_bytes:
  //dec [rax+18]
  //mov rax,[rbx+28]
  readMem(hook, 7)
  jmp returnhere

survey_charcoal_base_ptr:
  dq 0

code:
  mov [survey_charcoal_base_ptr], rax
  jmp survey_charcoal_bytes+3 // skip decrement

hook:
survey_charcoal_hook:
  jmp code
  nop
  nop
  returnhere:



[DISABLE]
survey_charcoal_hook:
  //db FF 48 18 48 8B 43 30
  readMem(survey_charcoal_bytes, 7)

unregistersymbol(survey_charcoal_hook)
unregistersymbol(survey_charcoal_bytes)
unregistersymbol(survey_charcoal_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+8F5851

"GameAssembly.dll"+8F5824: 48 8B CF              -  mov rcx,rdi
"GameAssembly.dll"+8F5827: E8 E4 66 93 01        -  call GameAssembly.dll+222BF10
"GameAssembly.dll"+8F582C: 84 C0                 -  test al,al
"GameAssembly.dll"+8F582E: 0F 84 A7 00 00 00     -  je GameAssembly.dll+8F58DB
"GameAssembly.dll"+8F5834: 48 8B 43 28           -  mov rax,[rbx+28]
"GameAssembly.dll"+8F5838: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+8F583B: 0F 84 14 01 00 00     -  je GameAssembly.dll+8F5955
"GameAssembly.dll"+8F5841: 48 8B 80 20 02 00 00  -  mov rax,[rax+00000220]
"GameAssembly.dll"+8F5848: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+8F584B: 0F 84 FE 00 00 00     -  je GameAssembly.dll+8F594F
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+8F5851: FF 48 18              -  dec [rax+18]
"GameAssembly.dll"+8F5854: 48 8B 43 28           -  mov rax,[rbx+28]
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+8F5858: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+8F585B: 0F 84 E8 00 00 00     -  je GameAssembly.dll+8F5949
"GameAssembly.dll"+8F5861: 48 8B 80 20 02 00 00  -  mov rax,[rax+00000220]
"GameAssembly.dll"+8F5868: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+8F586B: 0F 84 D2 00 00 00     -  je GameAssembly.dll+8F5943
"GameAssembly.dll"+8F5871: 83 78 18 00           -  cmp dword ptr [rax+18],00
"GameAssembly.dll"+8F5875: 7F 64                 -  jg GameAssembly.dll+8F58DB
"GameAssembly.dll"+8F5877: 48 8B 0D B2 DA 39 03  -  mov rcx,[GameAssembly.dll+3C93330]
"GameAssembly.dll"+8F587E: F6 81 27 01 00 00 02  -  test byte ptr [rcx+00000127],02
"GameAssembly.dll"+8F5885: 74 0E                 -  je GameAssembly.dll+8F5895
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8771</ID>
          <Description>"Super Survey"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : tld.exe
  Version: 1.95 83861 S
  Date   : 2021-10-18
  Author : sub1to

  This script does blah blah blah
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(returnhere)
label(code)
label(map_survey_hook)
label(map_survey_bytes)
label(map_survey_base_ptr)
registersymbol(map_survey_hook)
registersymbol(map_survey_bytes)
registersymbol(map_survey_base_ptr)
aobScanModule(hook,GameAssembly.dll,F3 0F 10 B3 F0 00 00 00 40)

newmem:
map_survey_bytes:
  //movss xmm6,[rbx+000000F0]
  readMem(hook, 8)
  jmp returnhere

map_survey_base_ptr:
  dq 0

code:
  mov [map_survey_base_ptr], rbx
  push rax
  mov rax, (float)9999
  movq xmm6, rax
  pop rax
  jmp returnhere

hook:
map_survey_hook:
  jmp code
  nop
  nop
  nop
  returnhere:



[DISABLE]
map_survey_hook:
  //db F3 0F 10 B3 F0 00 00 00
  readMem(map_survey_bytes, 8)

unregistersymbol(map_survey_hook)
unregistersymbol(map_survey_bytes)
unregistersymbol(map_survey_base_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+1063E4F

"GameAssembly.dll"+1063E29: 49 89 6B C8              -  mov [r11-38],rbp
"GameAssembly.dll"+1063E2D: 49 89 6B D0              -  mov [r11-30],rbp
"GameAssembly.dll"+1063E31: 49 89 6B D8              -  mov [r11-28],rbp
"GameAssembly.dll"+1063E35: 4D 8D 43 C8              -  lea r8,[r11-38]
"GameAssembly.dll"+1063E39: E8 02 DD 01 FF           -  call GameAssembly.dll+81B40
"GameAssembly.dll"+1063E3E: 90                       -  nop
"GameAssembly.dll"+1063E3F: 33 C9                    -  xor ecx,ecx
"GameAssembly.dll"+1063E41: FF 15 E9 52 0F 03        -  call qword ptr [GameAssembly.dll+4159130]
"GameAssembly.dll"+1063E47: 90                       -  nop
"GameAssembly.dll"+1063E48: C6 05 44 77 3E 03 01     -  mov byte ptr [GameAssembly.dll+444B593],01
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+1063E4F: F3 0F 10 B3 F0 00 00 00  -  movss xmm6,[rbx+000000F0]
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+1063E57: 40 B7 01                 -  mov dil,01
"GameAssembly.dll"+1063E5A: 83 FE 01                 -  cmp esi,01
"GameAssembly.dll"+1063E5D: 75 0A                    -  jne GameAssembly.dll+1063E69
"GameAssembly.dll"+1063E5F: F3 0F 10 B3 F4 00 00 00  -  movss xmm6,[rbx+000000F4]
"GameAssembly.dll"+1063E67: EB 0D                    -  jmp GameAssembly.dll+1063E76
"GameAssembly.dll"+1063E69: 83 FE 02                 -  cmp esi,02
"GameAssembly.dll"+1063E6C: 75 0B                    -  jne GameAssembly.dll+1063E79
"GameAssembly.dll"+1063E6E: F3 0F 10 B3 F8 00 00 00  -  movss xmm6,[rbx+000000F8]
"GameAssembly.dll"+1063E76: 40 32 FF                 -  xor dil,dil
"GameAssembly.dll"+1063E79: 48 8B 0D A0 38 47 03     -  mov rcx,[GameAssembly.dll+44D7720]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8827</ID>
          <Description>"No Rope Required To Deploy A Rope (Requires at least one stackable item in inventory)"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : tld.exe
  Version: 1.97 85101 S
  Date   : 2021-10-29
  Author : sub1to

  This script substitutes a mountaineering rope with any stackable item
  and increments the stack amount by 1, so nothing is lost.
}

[ENABLE]
alloc(newmem,$ff,GameAssembly.dll)
label(item_loop_returnhere)
label(finalize_returnhere)
label(code_item_loop)
label(code_finalize)
label(rope_deploy_hook_item_loop)
label(rope_deploy_bytes_item_loop)
label(rope_deploy_hook_finalize)
label(rope_deploy_bytes_finalize)
registersymbol(rope_deploy_hook_item_loop)
registersymbol(rope_deploy_bytes_item_loop)
registersymbol(rope_deploy_hook_finalize)
registersymbol(rope_deploy_bytes_finalize)
aobScanModule(hook,GameAssembly.dll,33 d2 48 8b 5c 24 ? 48 8b cb e8 ? ? ? ? 84 c0 0f 84 ? ? ? ? 48 85 db 0f 84 ? ? ? ? 48 8b ab ? ? ? ? 48 8b 0d ? ? ? ? f6 81 ? ? ? ? ? 74 ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? 33 d2 48 8b cd e8 ? ? ? ? 84 c0 0f 84 ? ? ? ? f3 0f 10 b3 ? ? ? ? 48 8b 0d ? ? ? ? f6 81 ? ? ? ? ? 74 ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? 45 33 c0 0f 28 cf 0f 28 c6 e8 ? ? ? ? 84 c0 75 ? 48 8b 0d ? ? ? ? f6 81 ? ? ? ? ? 74 ? 83 b9 ? ? ? ? ? 75 ? e8 ? ? ? ? 45 33 c0 33 d2 48 8b cf e8 ? ? ? ? 84 c0 75 ? 48 85 ff)
aobScanModule(hook2,GameAssembly.dll,48 8B CF FF D0 48 85 F6 0F 84 A6)

newmem:
rope_deploy_bytes_item_loop:
  // mov rbx,[rsp+28]
  readMem(hook+2, 5)
  jmp code_item_loop

code_item_loop:
  // +230] +18 = stack amount
  // rdi = return value
  mov rcx, [rbx+238]
  test rcx, rcx
  jz item_loop_returnhere
  mov rdi, rbx
  jmp item_loop_returnhere



// make sure we don't lose 1 item.. increment the count
rope_deploy_bytes_finalize:
  // mov rcx,rdi
  // call rax
  readMem(hook2, 5)
  jmp finalize_returnhere

code_finalize:
  // +230] +18 = stack amount
  mov rdx, [rdi+238]
  test rdx, rdx
  jz rope_deploy_bytes_finalize
  inc dword ptr [rdx+18]
  jmp rope_deploy_bytes_finalize





hook+2:
rope_deploy_hook_item_loop:
  jmp rope_deploy_bytes_item_loop
  item_loop_returnhere:

hook2:
rope_deploy_hook_finalize:
  jmp code_finalize
  finalize_returnhere:


[DISABLE]
rope_deploy_hook_item_loop:
  //48 8B 5C 24 28
  readMem(rope_deploy_bytes_item_loop, 5)

rope_deploy_hook_finalize:
  //48 8B CF FF D0
  readMem(rope_deploy_bytes_finalize, 5)

unregistersymbol(rope_deploy_hook_item_loop)
unregistersymbol(rope_deploy_bytes_item_loop)
unregistersymbol(rope_deploy_hook_finalize)
unregistersymbol(rope_deploy_bytes_finalize)
dealloc(newmem)

{
hook / rope_deploy_hook_item_loop
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+176AF72

"GameAssembly.dll"+176AF44: 49 8B 47 10              -  mov rax,[r15+10]
"GameAssembly.dll"+176AF48: 42 0F 10 04 30           -  movups xmm0,[rax+r14]
"GameAssembly.dll"+176AF4D: 0F 11 44 24 28           -  movups [rsp+28],xmm0
"GameAssembly.dll"+176AF52: 48 8B 0D C7 4B D7 02     -  mov rcx,[GameAssembly.dll+44DFB20]
"GameAssembly.dll"+176AF59: F6 81 2F 01 00 00 02     -  test byte ptr [rcx+0000012F],02
"GameAssembly.dll"+176AF60: 74 0E                    -  je GameAssembly.dll+176AF70
"GameAssembly.dll"+176AF62: 83 B9 E0 00 00 00 00     -  cmp dword ptr [rcx+000000E0],00
"GameAssembly.dll"+176AF69: 75 05                    -  jne GameAssembly.dll+176AF70
"GameAssembly.dll"+176AF6B: E8 60 07 92 FE           -  call GameAssembly.dll+8B6D0
"GameAssembly.dll"+176AF70: 33 D2                    -  xor edx,edx
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+176AF72: 48 8B 5C 24 28           -  mov rbx,[rsp+28]
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+176AF77: 48 8B CB                 -  mov rcx,rbx
"GameAssembly.dll"+176AF7A: E8 21 8F 0D 01           -  call GameAssembly.dll+2843EA0
"GameAssembly.dll"+176AF7F: 84 C0                    -  test al,al
"GameAssembly.dll"+176AF81: 0F 84 C0 00 00 00        -  je GameAssembly.dll+176B047
"GameAssembly.dll"+176AF87: 48 85 DB                 -  test rbx,rbx
"GameAssembly.dll"+176AF8A: 0F 84 FF 00 00 00        -  je GameAssembly.dll+176B08F
"GameAssembly.dll"+176AF90: 48 8B AB 00 02 00 00     -  mov rbp,[rbx+00000200]
"GameAssembly.dll"+176AF97: 48 8B 0D 82 4B D7 02     -  mov rcx,[GameAssembly.dll+44DFB20]
"GameAssembly.dll"+176AF9E: F6 81 2F 01 00 00 02     -  test byte ptr [rcx+0000012F],02
"GameAssembly.dll"+176AFA5: 74 0E                    -  je GameAssembly.dll+176AFB5
}

{
hook2 / rope_deploy_hook_finalize
// ORIGINAL CODE - INJECTION POINT: "GameAssembly.dll"+110CC16

"GameAssembly.dll"+110CBE5: 48 85 FF              -  test rdi,rdi
"GameAssembly.dll"+110CBE8: 0F 84 E2 00 00 00     -  je GameAssembly.dll+110CCD0
"GameAssembly.dll"+110CBEE: 48 8B 05 7B B7 35 03  -  mov rax,[GameAssembly.dll+4468370]
"GameAssembly.dll"+110CBF5: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+110CBF8: 75 1C                 -  jne GameAssembly.dll+110CC16
"GameAssembly.dll"+110CBFA: 48 8D 0D 47 B6 86 02  -  lea rcx,[GameAssembly.dll+3978248]
"GameAssembly.dll"+110CC01: E8 CA 08 F7 FE        -  call GameAssembly.dll+7D4D0
"GameAssembly.dll"+110CC06: 48 85 C0              -  test rax,rax
"GameAssembly.dll"+110CC09: 0F 84 A4 00 00 00     -  je GameAssembly.dll+110CCB3
"GameAssembly.dll"+110CC0F: 48 89 05 5A B7 35 03  -  mov [GameAssembly.dll+4468370],rax
// ---------- INJECTING HERE ----------
"GameAssembly.dll"+110CC16: 48 8B CF              -  mov rcx,rdi
"GameAssembly.dll"+110CC19: FF D0                 -  call rax
// ---------- DONE INJECTING  ----------
"GameAssembly.dll"+110CC1B: 48 85 F6              -  test rsi,rsi
"GameAssembly.dll"+110CC1E: 0F 84 A6 00 00 00     -  je GameAssembly.dll+110CCCA
"GameAssembly.dll"+110CC24: 45 33 C0              -  xor r8d,r8d
"GameAssembly.dll"+110CC27: 48 8B D0              -  mov rdx,rax
"GameAssembly.dll"+110CC2A: 48 8B CE              -  mov rcx,rsi
"GameAssembly.dll"+110CC2D: E8 7E 26 CD FF        -  call GameAssembly.dll+DDF2B0
"GameAssembly.dll"+110CC32: 45 33 C9              -  xor r9d,r9d
"GameAssembly.dll"+110CC35: 41 B0 01              -  mov r8l,01
"GameAssembly.dll"+110CC38: 41 0F B6 D0           -  movzx edx,r8l
"GameAssembly.dll"+110CC3C: 48 8B CB              -  mov rcx,rbx
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>8962</ID>
      <Description>"--------------------------"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>8959</ID>
      <Description>"Dev"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>0080FF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>8940</ID>
          <Description>"tmp"</Description>
          <LastState Value="8B48C08B4CC93345" RealAddress="7FFA719F0000"/>
          <ShowAsHex>1</ShowAsHex>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>8 Bytes</VariableType>
          <Address>tmp</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>tmp</Name>
      <Address>7FFA719F0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>day_length_ptr</Name>
      <Address>7FFD12EE0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_uconsole_init</Name>
      <Address>7FF8179E0000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>https://github.com/Perfare/Il2CppDumper
How to use the (primary) skills editor:
1) Enable the script
2) Open the journal (j)
3) Go to the skills tab (2nd from the top)
4) Scroll to the bottom
5) Alt+Tab to CE
6) You can now edit your skill values
   To find appropriate values you can check the tables on the page for each skill
   https://thelongdark.fandom.com/wiki/Skills
   
How to use secondary skills editor:
1) Enable the script
2) Open your inventory (i)
3) Select an item you can repair or sharpen (pot, knive, axe, latern, etc)
4) Click on the actions button (bottom right)
5) Select the repair action (top left)
   If the repair option is not available, go to step 3 and pick a different item
   You do not actually have to perform the action, you just have to open the screen
6) Alt+Tab to CE
7) You can now edit your secondary skill values
   To find appropriate values you can check the tables on the page for each skill
   https://thelongdark.fandom.com/wiki/Skills
  
How to use inventory select item hook:
1) Enable the script
2) Open your inventory (i)
3) Click on an item
4) Alt+Tab to CE
5) You can now edit the memory values for the item
 
How to use item spawner:
1) Enable the script
2) Set the item name of the item you want to spawn
3) Set the state to "Spawn Item"
4) When you resume the game, the item should be at your feet, and the state should be "Idle/Done" again
  
How to use feats unlock:
1) Enable an unlock script
2) Open the pause menu
3) Enter the badges menu
4) Exit the badges menu
5) Resume the game
6) The badge should now be unlocked
</Comments>
</CheatTable>
